ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"main.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.global	quad_cnt_left
  19              		.bss
  20              		.align	1
  21              		.type	quad_cnt_left, %object
  22              		.size	quad_cnt_left, 2
  23              	quad_cnt_left:
  24 0000 0000     		.space	2
  25              		.global	quad_cnt_right
  26              		.align	1
  27              		.type	quad_cnt_right, %object
  28              		.size	quad_cnt_right, 2
  29              	quad_cnt_right:
  30 0002 0000     		.space	2
  31              		.global	quad_cnt_prev
  32              		.align	1
  33              		.type	quad_cnt_prev, %object
  34              		.size	quad_cnt_prev, 2
  35              	quad_cnt_prev:
  36 0004 0000     		.space	2
  37              		.global	straight_line_distance
  38              		.type	straight_line_distance, %object
  39              		.size	straight_line_distance, 1
  40              	straight_line_distance:
  41 0006 00       		.space	1
  42              		.global	distance_prev
  43              		.type	distance_prev, %object
  44              		.size	distance_prev, 1
  45              	distance_prev:
  46 0007 00       		.space	1
  47              		.global	pwm_cmp_left
  48              		.data
  49              		.type	pwm_cmp_left, %object
  50              		.size	pwm_cmp_left, 1
  51              	pwm_cmp_left:
  52 0000 73       		.byte	115
  53              		.global	pwm_cmp_right
  54              		.type	pwm_cmp_right, %object
  55              		.size	pwm_cmp_right, 1
  56              	pwm_cmp_right:
  57 0001 75       		.byte	117
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 2


  58              		.global	robot_direction
  59              		.type	robot_direction, %object
  60              		.size	robot_direction, 1
  61              	robot_direction:
  62 0002 02       		.byte	2
  63              		.global	robot_x_pos
  64              		.type	robot_x_pos, %object
  65              		.size	robot_x_pos, 1
  66              	robot_x_pos:
  67 0003 01       		.byte	1
  68              		.global	robot_y_pos
  69              		.type	robot_y_pos, %object
  70              		.size	robot_y_pos, 1
  71              	robot_y_pos:
  72 0004 01       		.byte	1
  73              		.global	num_map_nodes
  74              		.bss
  75              		.align	1
  76              		.type	num_map_nodes, %object
  77              		.size	num_map_nodes, 2
  78              	num_map_nodes:
  79 0008 0000     		.space	2
  80              		.global	orientation
  81              		.data
  82 0005 000000   		.align	2
  83              		.type	orientation, %object
  84              		.size	orientation, 8
  85              	orientation:
  86 0008 FF       		.byte	-1
  87 0009 00       		.byte	0
  88 000a 00       		.byte	0
  89 000b 01       		.byte	1
  90 000c 01       		.byte	1
  91 000d 00       		.byte	0
  92 000e 00       		.byte	0
  93 000f FF       		.byte	-1
  94              		.global	robot_orientation
  95              		.type	robot_orientation, %object
  96              		.size	robot_orientation, 1
  97              	robot_orientation:
  98 0010 02       		.byte	2
  99              		.global	path_orientation
 100 0011 000000   		.align	2
 101              		.type	path_orientation, %object
 102              		.size	path_orientation, 4
 103              	path_orientation:
 104 0014 04000000 		.word	orientation+4
 105              		.global	path_index
 106              		.bss
 107              		.align	1
 108              		.type	path_index, %object
 109              		.size	path_index, 2
 110              	path_index:
 111 000a 0000     		.space	2
 112              		.global	robot_position_index
 113              		.align	1
 114              		.type	robot_position_index, %object
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 3


 115              		.size	robot_position_index, 2
 116              	robot_position_index:
 117 000c 0000     		.space	2
 118              		.global	next_event_index
 119              		.align	1
 120              		.type	next_event_index, %object
 121              		.size	next_event_index, 2
 122              	next_event_index:
 123 000e 0000     		.space	2
 124              		.global	flag_turn_around
 125              		.type	flag_turn_around, %object
 126              		.size	flag_turn_around, 1
 127              	flag_turn_around:
 128 0010 00       		.space	1
 129              		.global	flag_veering
 130              		.type	flag_veering, %object
 131              		.size	flag_veering, 1
 132              	flag_veering:
 133 0011 00       		.space	1
 134              		.global	flag_new_path_index
 135              		.type	flag_new_path_index, %object
 136              		.size	flag_new_path_index, 1
 137              	flag_new_path_index:
 138 0012 00       		.space	1
 139              		.global	flag_passing_next_int
 140              		.type	flag_passing_next_int, %object
 141              		.size	flag_passing_next_int, 1
 142              	flag_passing_next_int:
 143 0013 00       		.space	1
 144              		.global	flag_next_event_deadend
 145              		.type	flag_next_event_deadend, %object
 146              		.size	flag_next_event_deadend, 1
 147              	flag_next_event_deadend:
 148 0014 00       		.space	1
 149              		.global	flag_next_event_u_turn
 150              		.type	flag_next_event_u_turn, %object
 151              		.size	flag_next_event_u_turn, 1
 152              	flag_next_event_u_turn:
 153 0015 00       		.space	1
 154              		.global	flag_centre_on_line_after_turn
 155              		.type	flag_centre_on_line_after_turn, %object
 156              		.size	flag_centre_on_line_after_turn, 1
 157              	flag_centre_on_line_after_turn:
 158 0016 00       		.space	1
 159              		.global	flag_next_event_intersection
 160              		.type	flag_next_event_intersection, %object
 161              		.size	flag_next_event_intersection, 1
 162              	flag_next_event_intersection:
 163 0017 00       		.space	1
 164              		.global	int_sensor_left
 165              		.type	int_sensor_left, %object
 166              		.size	int_sensor_left, 1
 167              	int_sensor_left:
 168 0018 00       		.space	1
 169              		.global	int_sensor_right
 170              		.type	int_sensor_right, %object
 171              		.size	int_sensor_right, 1
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 4


 172              	int_sensor_right:
 173 0019 00       		.space	1
 174              		.global	line_sensor_centre
 175              		.type	line_sensor_centre, %object
 176              		.size	line_sensor_centre, 1
 177              	line_sensor_centre:
 178 001a 00       		.space	1
 179              		.global	line_sensor_left
 180              		.type	line_sensor_left, %object
 181              		.size	line_sensor_left, 1
 182              	line_sensor_left:
 183 001b 00       		.space	1
 184              		.global	line_sensor_right
 185              		.type	line_sensor_right, %object
 186              		.size	line_sensor_right, 1
 187              	line_sensor_right:
 188 001c 00       		.space	1
 189              		.global	tc_cnt
 190 001d 00       		.align	1
 191              		.type	tc_cnt, %object
 192              		.size	tc_cnt, 2
 193              	tc_cnt:
 194 001e 0000     		.space	2
 195              		.global	flag_adc_ready
 196              		.type	flag_adc_ready, %object
 197              		.size	flag_adc_ready, 1
 198              	flag_adc_ready:
 199 0020 00       		.space	1
 200              		.global	map
 201 0021 00       		.data
 202              		.align	2
 203              		.type	map, %object
 204              		.size	map, 1140
 205              	map:
 206 0018 01000000 		.word	1
 207 001c 01000000 		.word	1
 208 0020 01000000 		.word	1
 209 0024 01000000 		.word	1
 210 0028 01000000 		.word	1
 211 002c 01000000 		.word	1
 212 0030 01000000 		.word	1
 213 0034 01000000 		.word	1
 214 0038 01000000 		.word	1
 215 003c 01000000 		.word	1
 216 0040 01000000 		.word	1
 217 0044 01000000 		.word	1
 218 0048 01000000 		.word	1
 219 004c 01000000 		.word	1
 220 0050 01000000 		.word	1
 221 0054 01000000 		.word	1
 222 0058 01000000 		.word	1
 223 005c 01000000 		.word	1
 224 0060 01000000 		.word	1
 225 0064 01000000 		.word	1
 226 0068 00000000 		.word	0
 227 006c 01000000 		.word	1
 228 0070 00000000 		.word	0
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 5


 229 0074 00000000 		.word	0
 230 0078 00000000 		.word	0
 231 007c 00000000 		.word	0
 232 0080 00000000 		.word	0
 233 0084 00000000 		.word	0
 234 0088 00000000 		.word	0
 235 008c 00000000 		.word	0
 236 0090 00000000 		.word	0
 237 0094 00000000 		.word	0
 238 0098 00000000 		.word	0
 239 009c 00000000 		.word	0
 240 00a0 00000000 		.word	0
 241 00a4 00000000 		.word	0
 242 00a8 00000000 		.word	0
 243 00ac 01000000 		.word	1
 244 00b0 01000000 		.word	1
 245 00b4 00000000 		.word	0
 246 00b8 01000000 		.word	1
 247 00bc 00000000 		.word	0
 248 00c0 01000000 		.word	1
 249 00c4 00000000 		.word	0
 250 00c8 01000000 		.word	1
 251 00cc 01000000 		.word	1
 252 00d0 01000000 		.word	1
 253 00d4 00000000 		.word	0
 254 00d8 01000000 		.word	1
 255 00dc 01000000 		.word	1
 256 00e0 01000000 		.word	1
 257 00e4 00000000 		.word	0
 258 00e8 01000000 		.word	1
 259 00ec 01000000 		.word	1
 260 00f0 01000000 		.word	1
 261 00f4 00000000 		.word	0
 262 00f8 01000000 		.word	1
 263 00fc 01000000 		.word	1
 264 0100 00000000 		.word	0
 265 0104 01000000 		.word	1
 266 0108 00000000 		.word	0
 267 010c 01000000 		.word	1
 268 0110 00000000 		.word	0
 269 0114 01000000 		.word	1
 270 0118 00000000 		.word	0
 271 011c 01000000 		.word	1
 272 0120 00000000 		.word	0
 273 0124 00000000 		.word	0
 274 0128 00000000 		.word	0
 275 012c 01000000 		.word	1
 276 0130 00000000 		.word	0
 277 0134 00000000 		.word	0
 278 0138 00000000 		.word	0
 279 013c 01000000 		.word	1
 280 0140 00000000 		.word	0
 281 0144 01000000 		.word	1
 282 0148 01000000 		.word	1
 283 014c 00000000 		.word	0
 284 0150 01000000 		.word	1
 285 0154 00000000 		.word	0
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 6


 286 0158 01000000 		.word	1
 287 015c 00000000 		.word	0
 288 0160 00000000 		.word	0
 289 0164 00000000 		.word	0
 290 0168 01000000 		.word	1
 291 016c 01000000 		.word	1
 292 0170 01000000 		.word	1
 293 0174 00000000 		.word	0
 294 0178 01000000 		.word	1
 295 017c 01000000 		.word	1
 296 0180 01000000 		.word	1
 297 0184 01000000 		.word	1
 298 0188 01000000 		.word	1
 299 018c 00000000 		.word	0
 300 0190 01000000 		.word	1
 301 0194 01000000 		.word	1
 302 0198 00000000 		.word	0
 303 019c 00000000 		.word	0
 304 01a0 00000000 		.word	0
 305 01a4 00000000 		.word	0
 306 01a8 00000000 		.word	0
 307 01ac 01000000 		.word	1
 308 01b0 00000000 		.word	0
 309 01b4 00000000 		.word	0
 310 01b8 00000000 		.word	0
 311 01bc 01000000 		.word	1
 312 01c0 00000000 		.word	0
 313 01c4 01000000 		.word	1
 314 01c8 00000000 		.word	0
 315 01cc 00000000 		.word	0
 316 01d0 00000000 		.word	0
 317 01d4 00000000 		.word	0
 318 01d8 00000000 		.word	0
 319 01dc 01000000 		.word	1
 320 01e0 01000000 		.word	1
 321 01e4 01000000 		.word	1
 322 01e8 01000000 		.word	1
 323 01ec 01000000 		.word	1
 324 01f0 01000000 		.word	1
 325 01f4 01000000 		.word	1
 326 01f8 01000000 		.word	1
 327 01fc 00000000 		.word	0
 328 0200 01000000 		.word	1
 329 0204 00000000 		.word	0
 330 0208 01000000 		.word	1
 331 020c 00000000 		.word	0
 332 0210 01000000 		.word	1
 333 0214 00000000 		.word	0
 334 0218 01000000 		.word	1
 335 021c 01000000 		.word	1
 336 0220 01000000 		.word	1
 337 0224 00000000 		.word	0
 338 0228 01000000 		.word	1
 339 022c 01000000 		.word	1
 340 0230 00000000 		.word	0
 341 0234 00000000 		.word	0
 342 0238 00000000 		.word	0
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 7


 343 023c 00000000 		.word	0
 344 0240 00000000 		.word	0
 345 0244 00000000 		.word	0
 346 0248 00000000 		.word	0
 347 024c 01000000 		.word	1
 348 0250 00000000 		.word	0
 349 0254 01000000 		.word	1
 350 0258 00000000 		.word	0
 351 025c 01000000 		.word	1
 352 0260 00000000 		.word	0
 353 0264 01000000 		.word	1
 354 0268 00000000 		.word	0
 355 026c 00000000 		.word	0
 356 0270 00000000 		.word	0
 357 0274 01000000 		.word	1
 358 0278 01000000 		.word	1
 359 027c 01000000 		.word	1
 360 0280 01000000 		.word	1
 361 0284 00000000 		.word	0
 362 0288 01000000 		.word	1
 363 028c 00000000 		.word	0
 364 0290 01000000 		.word	1
 365 0294 01000000 		.word	1
 366 0298 01000000 		.word	1
 367 029c 01000000 		.word	1
 368 02a0 01000000 		.word	1
 369 02a4 00000000 		.word	0
 370 02a8 01000000 		.word	1
 371 02ac 00000000 		.word	0
 372 02b0 01000000 		.word	1
 373 02b4 00000000 		.word	0
 374 02b8 01000000 		.word	1
 375 02bc 01000000 		.word	1
 376 02c0 01000000 		.word	1
 377 02c4 01000000 		.word	1
 378 02c8 00000000 		.word	0
 379 02cc 00000000 		.word	0
 380 02d0 00000000 		.word	0
 381 02d4 01000000 		.word	1
 382 02d8 00000000 		.word	0
 383 02dc 01000000 		.word	1
 384 02e0 00000000 		.word	0
 385 02e4 00000000 		.word	0
 386 02e8 00000000 		.word	0
 387 02ec 01000000 		.word	1
 388 02f0 00000000 		.word	0
 389 02f4 00000000 		.word	0
 390 02f8 00000000 		.word	0
 391 02fc 01000000 		.word	1
 392 0300 00000000 		.word	0
 393 0304 00000000 		.word	0
 394 0308 00000000 		.word	0
 395 030c 01000000 		.word	1
 396 0310 01000000 		.word	1
 397 0314 00000000 		.word	0
 398 0318 01000000 		.word	1
 399 031c 01000000 		.word	1
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 8


 400 0320 01000000 		.word	1
 401 0324 00000000 		.word	0
 402 0328 01000000 		.word	1
 403 032c 00000000 		.word	0
 404 0330 01000000 		.word	1
 405 0334 00000000 		.word	0
 406 0338 01000000 		.word	1
 407 033c 00000000 		.word	0
 408 0340 01000000 		.word	1
 409 0344 01000000 		.word	1
 410 0348 01000000 		.word	1
 411 034c 01000000 		.word	1
 412 0350 01000000 		.word	1
 413 0354 00000000 		.word	0
 414 0358 01000000 		.word	1
 415 035c 01000000 		.word	1
 416 0360 00000000 		.word	0
 417 0364 00000000 		.word	0
 418 0368 00000000 		.word	0
 419 036c 00000000 		.word	0
 420 0370 00000000 		.word	0
 421 0374 00000000 		.word	0
 422 0378 00000000 		.word	0
 423 037c 01000000 		.word	1
 424 0380 00000000 		.word	0
 425 0384 00000000 		.word	0
 426 0388 00000000 		.word	0
 427 038c 00000000 		.word	0
 428 0390 00000000 		.word	0
 429 0394 01000000 		.word	1
 430 0398 00000000 		.word	0
 431 039c 00000000 		.word	0
 432 03a0 00000000 		.word	0
 433 03a4 01000000 		.word	1
 434 03a8 01000000 		.word	1
 435 03ac 00000000 		.word	0
 436 03b0 01000000 		.word	1
 437 03b4 01000000 		.word	1
 438 03b8 01000000 		.word	1
 439 03bc 01000000 		.word	1
 440 03c0 01000000 		.word	1
 441 03c4 01000000 		.word	1
 442 03c8 01000000 		.word	1
 443 03cc 00000000 		.word	0
 444 03d0 01000000 		.word	1
 445 03d4 01000000 		.word	1
 446 03d8 01000000 		.word	1
 447 03dc 01000000 		.word	1
 448 03e0 01000000 		.word	1
 449 03e4 00000000 		.word	0
 450 03e8 01000000 		.word	1
 451 03ec 01000000 		.word	1
 452 03f0 01000000 		.word	1
 453 03f4 01000000 		.word	1
 454 03f8 00000000 		.word	0
 455 03fc 00000000 		.word	0
 456 0400 00000000 		.word	0
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 9


 457 0404 00000000 		.word	0
 458 0408 00000000 		.word	0
 459 040c 00000000 		.word	0
 460 0410 00000000 		.word	0
 461 0414 01000000 		.word	1
 462 0418 00000000 		.word	0
 463 041c 00000000 		.word	0
 464 0420 00000000 		.word	0
 465 0424 00000000 		.word	0
 466 0428 00000000 		.word	0
 467 042c 00000000 		.word	0
 468 0430 00000000 		.word	0
 469 0434 00000000 		.word	0
 470 0438 00000000 		.word	0
 471 043c 01000000 		.word	1
 472 0440 01000000 		.word	1
 473 0444 01000000 		.word	1
 474 0448 01000000 		.word	1
 475 044c 01000000 		.word	1
 476 0450 01000000 		.word	1
 477 0454 01000000 		.word	1
 478 0458 01000000 		.word	1
 479 045c 01000000 		.word	1
 480 0460 01000000 		.word	1
 481 0464 01000000 		.word	1
 482 0468 01000000 		.word	1
 483 046c 01000000 		.word	1
 484 0470 01000000 		.word	1
 485 0474 01000000 		.word	1
 486 0478 01000000 		.word	1
 487 047c 01000000 		.word	1
 488 0480 01000000 		.word	1
 489 0484 01000000 		.word	1
 490 0488 01000000 		.word	1
 491              		.global	food_list
 492              		.align	2
 493              		.type	food_list, %object
 494              		.size	food_list, 48
 495              	food_list:
 496 048c 05000000 		.word	5
 497 0490 04000000 		.word	4
 498 0494 01000000 		.word	1
 499 0498 07000000 		.word	7
 500 049c 05000000 		.word	5
 501 04a0 0B000000 		.word	11
 502 04a4 0B000000 		.word	11
 503 04a8 0A000000 		.word	10
 504 04ac 08000000 		.word	8
 505 04b0 05000000 		.word	5
 506 04b4 02000000 		.word	2
 507 04b8 11000000 		.word	17
 508              		.section	.text.handle_timer_tc,"ax",%progbits
 509              		.align	2
 510              		.global	handle_timer_tc
 511              		.thumb
 512              		.thumb_func
 513              		.type	handle_timer_tc, %function
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 10


 514              	handle_timer_tc:
 515              	.LFB63:
 516              		.file 1 ".\\main.c"
   1:.\main.c      **** /* ========================================
   2:.\main.c      ****  * Fully working code: 
   3:.\main.c      ****  * PWM      : 
   4:.\main.c      ****  * Encoder  : 
   5:.\main.c      ****  * ADC      :
   6:.\main.c      ****  * USB      : port displays speed and position.
   7:.\main.c      ****  * CMD: "PW xx"
   8:.\main.c      ****  * Copyright Univ of Auckland, 2016
   9:.\main.c      ****  * All Rights Reserved
  10:.\main.c      ****  * UNPUBLISHED, LICENSED SOFTWARE.
  11:.\main.c      ****  *
  12:.\main.c      ****  * CONFIDENTIAL AND PROPRIETARY INFORMATION
  13:.\main.c      ****  * WHICH IS THE PROPERTY OF Univ of Auckland.
  14:.\main.c      ****  *
  15:.\main.c      ****  * ========================================
  16:.\main.c      **** */
  17:.\main.c      **** 
  18:.\main.c      **** #include <stdio.h>
  19:.\main.c      **** #include <string.h>
  20:.\main.c      **** #include <stdlib.h>
  21:.\main.c      **** #include <math.h>
  22:.\main.c      **** #include <project.h>
  23:.\main.c      **** //* ========================================
  24:.\main.c      **** #include "defines.h"
  25:.\main.c      **** #include "func.h"
  26:.\main.c      **** #include "vars.h"
  27:.\main.c      **** #include "map.h"
  28:.\main.c      **** //* ========================================
  29:.\main.c      **** // USBUART
  30:.\main.c      **** void usbPutString(char *s);
  31:.\main.c      **** void usbPutChar(char c);
  32:.\main.c      **** //* ========================================
  33:.\main.c      **** CY_ISR_PROTO(handle_timer_tc);
  34:.\main.c      **** CY_ISR_PROTO(handle_adc_reading);
  35:.\main.c      **** //* ========================================
  36:.\main.c      **** CY_ISR(handle_timer_tc)
  37:.\main.c      **** {
 517              		.loc 1 37 0
 518              		.cfi_startproc
 519              		@ args = 0, pretend = 0, frame = 0
 520              		@ frame_needed = 1, uses_anonymous_args = 0
 521 0000 80B5     		push	{r7, lr}
 522              		.cfi_def_cfa_offset 8
 523              		.cfi_offset 7, -8
 524              		.cfi_offset 14, -4
 525 0002 00AF     		add	r7, sp, #0
 526              		.cfi_def_cfa_register 7
  38:.\main.c      ****     tc_cnt += TC_TIMEOUT;
 527              		.loc 1 38 0
 528 0004 114B     		ldr	r3, .L4
 529 0006 1B88     		ldrh	r3, [r3]
 530 0008 0533     		adds	r3, r3, #5
 531 000a 9AB2     		uxth	r2, r3
 532 000c 0F4B     		ldr	r3, .L4
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 11


 533 000e 1A80     		strh	r2, [r3]	@ movhi
  39:.\main.c      ****     
  40:.\main.c      ****     if (tc_cnt % TC_BATTERY == 0)
 534              		.loc 1 40 0
 535 0010 0E4B     		ldr	r3, .L4
 536 0012 1B88     		ldrh	r3, [r3]
 537 0014 0E4A     		ldr	r2, .L4+4
 538 0016 A2FB0312 		umull	r1, r2, r2, r3
 539 001a 520B     		lsrs	r2, r2, #13
 540 001c 42F21071 		movw	r1, #10000
 541 0020 01FB02F2 		mul	r2, r1, r2
 542 0024 9B1A     		subs	r3, r3, r2
 543 0026 9BB2     		uxth	r3, r3
 544 0028 002B     		cmp	r3, #0
 545 002a 02D1     		bne	.L2
  41:.\main.c      ****         flag_adc_ready = 0;
 546              		.loc 1 41 0
 547 002c 094B     		ldr	r3, .L4+8
 548 002e 0022     		movs	r2, #0
 549 0030 1A70     		strb	r2, [r3]
 550              	.L2:
  42:.\main.c      ****     
  43:.\main.c      ****     if (tc_cnt == TC_RESET)
 551              		.loc 1 43 0
 552 0032 064B     		ldr	r3, .L4
 553 0034 1B88     		ldrh	r3, [r3]
 554 0036 4FF6FA72 		movw	r2, #65530
 555 003a 9342     		cmp	r3, r2
 556 003c 02D1     		bne	.L3
  44:.\main.c      ****         tc_cnt = 0;
 557              		.loc 1 44 0
 558 003e 034B     		ldr	r3, .L4
 559 0040 0022     		movs	r2, #0
 560 0042 1A80     		strh	r2, [r3]	@ movhi
 561              	.L3:
  45:.\main.c      ****     
  46:.\main.c      ****     Timer_TS_ReadStatusRegister();
 562              		.loc 1 46 0
 563 0044 FFF7FEFF 		bl	Timer_TS_ReadStatusRegister
  47:.\main.c      **** }
 564              		.loc 1 47 0
 565 0048 80BD     		pop	{r7, pc}
 566              	.L5:
 567 004a 00BF     		.align	2
 568              	.L4:
 569 004c 00000000 		.word	tc_cnt
 570 0050 5917B7D1 		.word	-776530087
 571 0054 00000000 		.word	flag_adc_ready
 572              		.cfi_endproc
 573              	.LFE63:
 574              		.size	handle_timer_tc, .-handle_timer_tc
 575              		.section	.text.handle_adc_reading,"ax",%progbits
 576              		.align	2
 577              		.global	handle_adc_reading
 578              		.thumb
 579              		.thumb_func
 580              		.type	handle_adc_reading, %function
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 12


 581              	handle_adc_reading:
 582              	.LFB64:
  48:.\main.c      **** //* ========================================
  49:.\main.c      **** CY_ISR(handle_adc_reading)
  50:.\main.c      **** {
 583              		.loc 1 50 0
 584              		.cfi_startproc
 585              		@ args = 0, pretend = 0, frame = 0
 586              		@ frame_needed = 1, uses_anonymous_args = 0
 587              		@ link register save eliminated.
 588 0000 80B4     		push	{r7}
 589              		.cfi_def_cfa_offset 4
 590              		.cfi_offset 7, -4
 591 0002 00AF     		add	r7, sp, #0
 592              		.cfi_def_cfa_register 7
  51:.\main.c      ****     flag_adc_ready = 1;
 593              		.loc 1 51 0
 594 0004 034B     		ldr	r3, .L7
 595 0006 0122     		movs	r2, #1
 596 0008 1A70     		strb	r2, [r3]
  52:.\main.c      **** }
 597              		.loc 1 52 0
 598 000a BD46     		mov	sp, r7
 599              		.cfi_def_cfa_register 13
 600              		@ sp needed
 601 000c 5DF8047B 		ldr	r7, [sp], #4
 602              		.cfi_restore 7
 603              		.cfi_def_cfa_offset 0
 604 0010 7047     		bx	lr
 605              	.L8:
 606 0012 00BF     		.align	2
 607              	.L7:
 608 0014 00000000 		.word	flag_adc_ready
 609              		.cfi_endproc
 610              	.LFE64:
 611              		.size	handle_adc_reading, .-handle_adc_reading
 612              		.global	__aeabi_i2f
 613              		.global	__aeabi_f2d
 614              		.global	__aeabi_dmul
 615              		.global	__aeabi_d2iz
 616              		.section	.text.main,"ax",%progbits
 617              		.align	2
 618              		.global	main
 619              		.thumb
 620              		.thumb_func
 621              		.type	main, %function
 622              	main:
 623              	.LFB65:
  53:.\main.c      **** //* ========================================
  54:.\main.c      **** int main()
  55:.\main.c      **** {
 624              		.loc 1 55 0
 625              		.cfi_startproc
 626              		@ args = 0, pretend = 0, frame = 16
 627              		@ frame_needed = 1, uses_anonymous_args = 0
 628 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 629              		.cfi_def_cfa_offset 28
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 13


 630              		.cfi_offset 4, -28
 631              		.cfi_offset 5, -24
 632              		.cfi_offset 6, -20
 633              		.cfi_offset 7, -16
 634              		.cfi_offset 8, -12
 635              		.cfi_offset 9, -8
 636              		.cfi_offset 14, -4
 637 0004 85B0     		sub	sp, sp, #20
 638              		.cfi_def_cfa_offset 48
 639 0006 00AF     		add	r7, sp, #0
 640              		.cfi_def_cfa_register 7
  56:.\main.c      **** // --------------------------------
  57:.\main.c      **** // ----- INITIALIZATIONS ----------
  58:.\main.c      ****     // Start timer
  59:.\main.c      ****     Timer_TS_Start();
 641              		.loc 1 59 0
 642 0008 FFF7FEFF 		bl	Timer_TS_Start
  60:.\main.c      ****     isr_TS_StartEx(handle_timer_tc);
 643              		.loc 1 60 0
 644 000c 8A48     		ldr	r0, .L27+8
 645 000e FFF7FEFF 		bl	isr_TS_StartEx
  61:.\main.c      ****     
  62:.\main.c      ****     // Start ADC
  63:.\main.c      ****     ADC_Start();
 646              		.loc 1 63 0
 647 0012 FFF7FEFF 		bl	ADC_Start
  64:.\main.c      ****     isr_eoc_StartEx(handle_adc_reading);
 648              		.loc 1 64 0
 649 0016 8948     		ldr	r0, .L27+12
 650 0018 FFF7FEFF 		bl	isr_eoc_StartEx
  65:.\main.c      ****     
  66:.\main.c      ****     // Activate global interupts
  67:.\main.c      ****     CYGlobalIntEnable;
 651              		.loc 1 67 0
 652              	@ 67 ".\main.c" 1
 653 001c 62B6     		CPSIE   i
 654              	@ 0 "" 2
  68:.\main.c      ****     
  69:.\main.c      ****     // Set mode of operation by reading dip switches
  70:.\main.c      ****     uint8 mode = (SW1 << 1) | (SW0);
 655              		.loc 1 70 0
 656              		.thumb
 657 001e FFF7FEFF 		bl	SW1_Read
 658 0022 0346     		mov	r3, r0
 659 0024 5B00     		lsls	r3, r3, #1
 660 0026 DEB2     		uxtb	r6, r3
 661 0028 FFF7FEFF 		bl	SW0_Read
 662 002c 0346     		mov	r3, r0
 663 002e DBB2     		uxtb	r3, r3
 664 0030 3246     		mov	r2, r6
 665 0032 1343     		orrs	r3, r3, r2
 666 0034 DBB2     		uxtb	r3, r3
 667 0036 7B73     		strb	r3, [r7, #13]
  71:.\main.c      ****     
  72:.\main.c      ****     // Find number of nodes in map
  73:.\main.c      ****     get_num_map_nodes();
 668              		.loc 1 73 0
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 14


 669 0038 FFF7FEFF 		bl	get_num_map_nodes
  74:.\main.c      ****     // Exit if map has no nodes
  75:.\main.c      ****     if (!num_map_nodes)
 670              		.loc 1 75 0
 671 003c 804B     		ldr	r3, .L27+16
 672 003e 1B88     		ldrh	r3, [r3]
 673 0040 002B     		cmp	r3, #0
 674 0042 01D1     		bne	.L10
  76:.\main.c      ****         return 1;
 675              		.loc 1 76 0
 676 0044 0123     		movs	r3, #1
 677 0046 ECE0     		b	.L11
 678              	.L10:
  77:.\main.c      ****     
  78:.\main.c      ****     // Find path legnth
  79:.\main.c      **** 	uint16 path_length = 0;
 679              		.loc 1 79 0
 680 0048 0023     		movs	r3, #0
 681 004a FB81     		strh	r3, [r7, #14]	@ movhi
  80:.\main.c      ****     switch (mode) {
 682              		.loc 1 80 0
 683 004c 7B7B     		ldrb	r3, [r7, #13]	@ zero_extendqisi2
 684 004e 002B     		cmp	r3, #0
 685 0050 02D0     		beq	.L13
 686 0052 022B     		cmp	r3, #2
 687 0054 05D0     		beq	.L14
 688 0056 09E0     		b	.L12
 689              	.L13:
  81:.\main.c      ****         case 0:
  82:.\main.c      ****             path_length = get_food_list_path_length();
 690              		.loc 1 82 0
 691 0058 FFF7FEFF 		bl	get_food_list_path_length
 692 005c 0346     		mov	r3, r0
 693 005e FB81     		strh	r3, [r7, #14]	@ movhi
  83:.\main.c      ****             break;
 694              		.loc 1 83 0
 695 0060 04E0     		b	.L12
 696              	.L14:
  84:.\main.c      ****         case 2:
  85:.\main.c      ****             path_length = get_traverse_path_length();
 697              		.loc 1 85 0
 698 0062 FFF7FEFF 		bl	get_traverse_path_length
 699 0066 0346     		mov	r3, r0
 700 0068 FB81     		strh	r3, [r7, #14]	@ movhi
  86:.\main.c      ****             break;
 701              		.loc 1 86 0
 702 006a 00BF     		nop
 703              	.L12:
  87:.\main.c      ****     }
  88:.\main.c      ****     if (!path_length || path_length == INF)
 704              		.loc 1 88 0
 705 006c FB89     		ldrh	r3, [r7, #14]
 706 006e 002B     		cmp	r3, #0
 707 0070 04D0     		beq	.L15
 708              		.loc 1 88 0 is_stmt 0 discriminator 1
 709 0072 FB89     		ldrh	r3, [r7, #14]
 710 0074 42F22832 		movw	r2, #9000
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 15


 711 0078 9342     		cmp	r3, r2
 712 007a 01D1     		bne	.L16
 713              	.L15:
  89:.\main.c      ****         return 1;
 714              		.loc 1 89 0 is_stmt 1
 715 007c 0123     		movs	r3, #1
 716 007e D0E0     		b	.L11
 717              	.L16:
  90:.\main.c      ****     
  91:.\main.c      ****     // Generate path
  92:.\main.c      **** 	int8 path[path_length][2];
 718              		.loc 1 92 0
 719 0080 F989     		ldrh	r1, [r7, #14]
 720 0082 6B46     		mov	r3, sp
 721 0084 1E46     		mov	r6, r3
 722 0086 0B46     		mov	r3, r1
 723 0088 013B     		subs	r3, r3, #1
 724 008a BB60     		str	r3, [r7, #8]
 725 008c 8AB2     		uxth	r2, r1
 726 008e 4FF00003 		mov	r3, #0
 727 0092 4FEA0319 		lsl	r9, r3, #4
 728 0096 49EA1279 		orr	r9, r9, r2, lsr #28
 729 009a 4FEA0218 		lsl	r8, r2, #4
 730 009e 8AB2     		uxth	r2, r1
 731 00a0 4FF00003 		mov	r3, #0
 732 00a4 1D01     		lsls	r5, r3, #4
 733 00a6 45EA1275 		orr	r5, r5, r2, lsr #28
 734 00aa 1401     		lsls	r4, r2, #4
 735 00ac 0B46     		mov	r3, r1
 736 00ae 5B00     		lsls	r3, r3, #1
 737 00b0 0733     		adds	r3, r3, #7
 738 00b2 DB08     		lsrs	r3, r3, #3
 739 00b4 DB00     		lsls	r3, r3, #3
 740 00b6 ADEB030D 		sub	sp, sp, r3
 741 00ba 6B46     		mov	r3, sp
 742 00bc 0033     		adds	r3, r3, #0
 743 00be 7B60     		str	r3, [r7, #4]
  93:.\main.c      **** 	init_path(path, path_length);
 744              		.loc 1 93 0
 745 00c0 7A68     		ldr	r2, [r7, #4]
 746 00c2 FB89     		ldrh	r3, [r7, #14]
 747 00c4 1046     		mov	r0, r2
 748 00c6 1946     		mov	r1, r3
 749 00c8 FFF7FEFF 		bl	init_path
  94:.\main.c      ****     switch (mode) {
 750              		.loc 1 94 0
 751 00cc 7B7B     		ldrb	r3, [r7, #13]	@ zero_extendqisi2
 752 00ce 002B     		cmp	r3, #0
 753 00d0 02D0     		beq	.L18
 754 00d2 022B     		cmp	r3, #2
 755 00d4 07D0     		beq	.L19
 756 00d6 0BE0     		b	.L17
 757              	.L18:
  95:.\main.c      ****         case 0:
  96:.\main.c      ****             generate_food_list_path(path, path_length);
 758              		.loc 1 96 0
 759 00d8 7A68     		ldr	r2, [r7, #4]
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 16


 760 00da FB89     		ldrh	r3, [r7, #14]
 761 00dc 1046     		mov	r0, r2
 762 00de 1946     		mov	r1, r3
 763 00e0 FFF7FEFF 		bl	generate_food_list_path
  97:.\main.c      ****             break;
 764              		.loc 1 97 0
 765 00e4 04E0     		b	.L17
 766              	.L19:
  98:.\main.c      ****         case 2:
  99:.\main.c      ****             generate_traverse_path(path);
 767              		.loc 1 99 0
 768 00e6 7B68     		ldr	r3, [r7, #4]
 769 00e8 1846     		mov	r0, r3
 770 00ea FFF7FEFF 		bl	generate_traverse_path
 100:.\main.c      ****             break;
 771              		.loc 1 100 0
 772 00ee 00BF     		nop
 773              	.L17:
 101:.\main.c      ****     }
 102:.\main.c      ****     
 103:.\main.c      ****     // Allow light sensors to settle after power up
 104:.\main.c      ****     CyDelay(TC_PROJECTOR);
 774              		.loc 1 104 0
 775 00f0 0820     		movs	r0, #8
 776 00f2 FFF7FEFF 		bl	CyDelay
 105:.\main.c      ****     
 106:.\main.c      ****     // Start quadrature decoders
 107:.\main.c      ****     QuadDec_M1_Start();
 777              		.loc 1 107 0
 778 00f6 FFF7FEFF 		bl	QuadDec_M1_Start
 108:.\main.c      ****     QuadDec_M2_Start();
 779              		.loc 1 108 0
 780 00fa FFF7FEFF 		bl	QuadDec_M2_Start
 109:.\main.c      ****     
 110:.\main.c      ****     // Start pwm for both motors
 111:.\main.c      ****     PWM_1_Start();
 781              		.loc 1 111 0
 782 00fe FFF7FEFF 		bl	PWM_1_Start
 112:.\main.c      ****     PWM_2_Start();
 783              		.loc 1 112 0
 784 0102 FFF7FEFF 		bl	PWM_2_Start
 113:.\main.c      ****     
 114:.\main.c      ****     // Set both PWM to initial duty cycle
 115:.\main.c      ****     PWM_1_WriteCompare(pwm_cmp_left);
 785              		.loc 1 115 0
 786 0106 4F4B     		ldr	r3, .L27+20
 787 0108 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 788 010a 1846     		mov	r0, r3
 789 010c FFF7FEFF 		bl	PWM_1_WriteCompare
 116:.\main.c      ****     PWM_2_WriteCompare(pwm_cmp_right);
 790              		.loc 1 116 0
 791 0110 4D4B     		ldr	r3, .L27+24
 792 0112 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 793 0114 1846     		mov	r0, r3
 794 0116 FFF7FEFF 		bl	PWM_2_WriteCompare
 117:.\main.c      ****     
 118:.\main.c      ****     // Activate Robot
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 17


 119:.\main.c      ****     if (SW2) {
 795              		.loc 1 119 0
 796 011a FFF7FEFF 		bl	SW2_Read
 797 011e 0346     		mov	r3, r0
 798 0120 002B     		cmp	r3, #0
 799 0122 08D0     		beq	.L20
 120:.\main.c      ****         MOVE_FORWARD
 800              		.loc 1 120 0
 801 0124 0020     		movs	r0, #0
 802 0126 FFF7FEFF 		bl	PWM_CONTROL_Write
 121:.\main.c      ****         robot_direction = FORWARD;
 803              		.loc 1 121 0
 804 012a 484B     		ldr	r3, .L27+28
 805 012c 0022     		movs	r2, #0
 806 012e 1A70     		strb	r2, [r3]
 122:.\main.c      ****         COAST_ON
 807              		.loc 1 122 0
 808 0130 0120     		movs	r0, #1
 809 0132 FFF7FEFF 		bl	H_BRIDGE_CONTROL_Write
 810              	.L20:
 123:.\main.c      ****     }
 124:.\main.c      **** 
 125:.\main.c      **** // ------USB SETUP ----------------    
 126:.\main.c      **** #ifdef USE_USB    
 127:.\main.c      ****     USBUART_Start(0,USBUART_5V_OPERATION);
 811              		.loc 1 127 0
 812 0136 0020     		movs	r0, #0
 813 0138 0121     		movs	r1, #1
 814 013a FFF7FEFF 		bl	USBUART_Start
 815              	.L26:
 128:.\main.c      **** #endif
 129:.\main.c      ****     // Run robot
 130:.\main.c      ****     for(;;)
 131:.\main.c      ****     {
 132:.\main.c      ****         // follow generated path and stop all operations
 133:.\main.c      ****         // when end of path is reached
 134:.\main.c      ****         get_light_sensors();
 816              		.loc 1 134 0
 817 013e FFF7FEFF 		bl	get_light_sensors
 135:.\main.c      ****         if (!follow_path(path, path_length)) {
 818              		.loc 1 135 0
 819 0142 7A68     		ldr	r2, [r7, #4]
 820 0144 FB89     		ldrh	r3, [r7, #14]
 821 0146 1046     		mov	r0, r2
 822 0148 1946     		mov	r1, r3
 823 014a FFF7FEFF 		bl	follow_path
 824 014e 0346     		mov	r3, r0
 825 0150 002B     		cmp	r3, #0
 826 0152 16D1     		bne	.L21
 136:.\main.c      ****             COAST_OFF
 827              		.loc 1 136 0
 828 0154 0020     		movs	r0, #0
 829 0156 FFF7FEFF 		bl	H_BRIDGE_CONTROL_Write
 137:.\main.c      ****             robot_direction = STAT;
 830              		.loc 1 137 0
 831 015a 3C4B     		ldr	r3, .L27+28
 832 015c 0222     		movs	r2, #2
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 18


 833 015e 1A70     		strb	r2, [r3]
 138:.\main.c      ****             
 139:.\main.c      ****             PWM_1_Stop();
 834              		.loc 1 139 0
 835 0160 FFF7FEFF 		bl	PWM_1_Stop
 140:.\main.c      ****             PWM_2_Stop();
 836              		.loc 1 140 0
 837 0164 FFF7FEFF 		bl	PWM_2_Stop
 141:.\main.c      ****             
 142:.\main.c      ****             QuadDec_M1_Stop();
 838              		.loc 1 142 0
 839 0168 FFF7FEFF 		bl	QuadDec_M1_Stop
 143:.\main.c      ****             QuadDec_M2_Stop();
 840              		.loc 1 143 0
 841 016c FFF7FEFF 		bl	QuadDec_M2_Stop
 144:.\main.c      ****             
 145:.\main.c      ****             ADC_Stop();
 842              		.loc 1 145 0
 843 0170 FFF7FEFF 		bl	ADC_Stop
 146:.\main.c      ****             isr_eoc_Stop();
 844              		.loc 1 146 0
 845 0174 FFF7FEFF 		bl	isr_eoc_Stop
 147:.\main.c      ****             
 148:.\main.c      ****             Timer_TS_Stop();
 846              		.loc 1 148 0
 847 0178 FFF7FEFF 		bl	Timer_TS_Stop
 149:.\main.c      ****             isr_TS_Stop();
 848              		.loc 1 149 0
 849 017c FFF7FEFF 		bl	isr_TS_Stop
 150:.\main.c      ****             
 151:.\main.c      ****             break;
 850              		.loc 1 151 0
 851 0180 4DE0     		b	.L22
 852              	.L21:
 152:.\main.c      ****         }
 153:.\main.c      ****         
 154:.\main.c      ****         // monitor battery level and stop all operations if it drops below 7.15V
 155:.\main.c      ****         if (!flag_adc_ready) {
 853              		.loc 1 155 0
 854 0182 334B     		ldr	r3, .L27+32
 855 0184 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 856 0186 002B     		cmp	r3, #0
 857 0188 02D1     		bne	.L23
 156:.\main.c      ****             ADC_StartConvert();
 858              		.loc 1 156 0
 859 018a FFF7FEFF 		bl	ADC_StartConvert
 860 018e 45E0     		b	.L24
 861              	.L23:
 157:.\main.c      ****         }
 158:.\main.c      ****         else if (flag_adc_ready == 1) {
 862              		.loc 1 158 0
 863 0190 2F4B     		ldr	r3, .L27+32
 864 0192 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 865 0194 012B     		cmp	r3, #1
 866 0196 41D1     		bne	.L24
 867              	.LBB2:
 159:.\main.c      ****             int16 adc_bat_value = ADC_CountsTo_mVolts(ADC_GetResult16());
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 19


 868              		.loc 1 159 0
 869 0198 FFF7FEFF 		bl	ADC_GetResult16
 870 019c 0346     		mov	r3, r0
 871 019e 1846     		mov	r0, r3
 872 01a0 FFF7FEFF 		bl	ADC_CountsTo_mVolts
 873 01a4 0346     		mov	r3, r0
 874 01a6 7B80     		strh	r3, [r7, #2]	@ movhi
 160:.\main.c      ****             if ((int)((float)adc_bat_value*V_DIV) < 7150) {
 875              		.loc 1 160 0
 876 01a8 B7F90230 		ldrsh	r3, [r7, #2]
 877 01ac 1846     		mov	r0, r3
 878 01ae FFF7FEFF 		bl	__aeabi_i2f
 879 01b2 0346     		mov	r3, r0
 880 01b4 1846     		mov	r0, r3
 881 01b6 FFF7FEFF 		bl	__aeabi_f2d
 882 01ba 0246     		mov	r2, r0
 883 01bc 0B46     		mov	r3, r1
 884 01be 1046     		mov	r0, r2
 885 01c0 1946     		mov	r1, r3
 886 01c2 1BA3     		adr	r3, .L27
 887 01c4 D3E90023 		ldrd	r2, [r3]
 888 01c8 FFF7FEFF 		bl	__aeabi_dmul
 889 01cc 0246     		mov	r2, r0
 890 01ce 0B46     		mov	r3, r1
 891 01d0 1046     		mov	r0, r2
 892 01d2 1946     		mov	r1, r3
 893 01d4 FFF7FEFF 		bl	__aeabi_d2iz
 894 01d8 0246     		mov	r2, r0
 895 01da 41F6ED33 		movw	r3, #7149
 896 01de 9A42     		cmp	r2, r3
 897 01e0 19DC     		bgt	.L25
 161:.\main.c      ****                 LED_ON
 898              		.loc 1 161 0
 899 01e2 0120     		movs	r0, #1
 900 01e4 FFF7FEFF 		bl	LED_Write
 162:.\main.c      ****                 COAST_OFF
 901              		.loc 1 162 0
 902 01e8 0020     		movs	r0, #0
 903 01ea FFF7FEFF 		bl	H_BRIDGE_CONTROL_Write
 163:.\main.c      ****                 robot_direction = STAT;
 904              		.loc 1 163 0
 905 01ee 174B     		ldr	r3, .L27+28
 906 01f0 0222     		movs	r2, #2
 907 01f2 1A70     		strb	r2, [r3]
 164:.\main.c      ****                 
 165:.\main.c      ****                 PWM_1_Stop();
 908              		.loc 1 165 0
 909 01f4 FFF7FEFF 		bl	PWM_1_Stop
 166:.\main.c      ****                 PWM_2_Stop();
 910              		.loc 1 166 0
 911 01f8 FFF7FEFF 		bl	PWM_2_Stop
 167:.\main.c      ****                 
 168:.\main.c      ****                 QuadDec_M1_Stop();
 912              		.loc 1 168 0
 913 01fc FFF7FEFF 		bl	QuadDec_M1_Stop
 169:.\main.c      ****                 QuadDec_M2_Stop();
 914              		.loc 1 169 0
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 20


 915 0200 FFF7FEFF 		bl	QuadDec_M2_Stop
 170:.\main.c      ****                 
 171:.\main.c      ****                 ADC_Stop();
 916              		.loc 1 171 0
 917 0204 FFF7FEFF 		bl	ADC_Stop
 172:.\main.c      ****                 isr_eoc_Stop();
 918              		.loc 1 172 0
 919 0208 FFF7FEFF 		bl	isr_eoc_Stop
 173:.\main.c      ****                 
 174:.\main.c      ****                 Timer_TS_Stop();
 920              		.loc 1 174 0
 921 020c FFF7FEFF 		bl	Timer_TS_Stop
 175:.\main.c      ****                 isr_TS_Stop();
 922              		.loc 1 175 0
 923 0210 FFF7FEFF 		bl	isr_TS_Stop
 176:.\main.c      ****                 
 177:.\main.c      ****                 break;
 924              		.loc 1 177 0
 925 0214 03E0     		b	.L22
 926              	.L25:
 178:.\main.c      ****             }
 179:.\main.c      ****             flag_adc_ready = 2;
 927              		.loc 1 179 0
 928 0216 0E4B     		ldr	r3, .L27+32
 929 0218 0222     		movs	r2, #2
 930 021a 1A70     		strb	r2, [r3]
 931              	.L24:
 932              	.LBE2:
 180:.\main.c      ****         }
 181:.\main.c      ****     }
 933              		.loc 1 181 0
 934 021c 8FE7     		b	.L26
 935              	.L22:
 182:.\main.c      ****     return 0;
 936              		.loc 1 182 0
 937 021e 0023     		movs	r3, #0
 938 0220 B546     		mov	sp, r6
 939              	.L11:
 183:.\main.c      **** }
 940              		.loc 1 183 0 discriminator 1
 941 0222 1846     		mov	r0, r3
 942 0224 1437     		adds	r7, r7, #20
 943              		.cfi_def_cfa_offset 28
 944 0226 BD46     		mov	sp, r7
 945              		.cfi_def_cfa_register 13
 946              		@ sp needed
 947 0228 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 948              	.L28:
 949 022c AFF30080 		.align	3
 950              	.L27:
 951 0230 C3F5285C 		.word	1546188227
 952 0234 8FC21340 		.word	1075036815
 953 0238 00000000 		.word	handle_timer_tc
 954 023c 00000000 		.word	handle_adc_reading
 955 0240 00000000 		.word	num_map_nodes
 956 0244 00000000 		.word	pwm_cmp_left
 957 0248 00000000 		.word	pwm_cmp_right
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 21


 958 024c 00000000 		.word	robot_direction
 959 0250 00000000 		.word	flag_adc_ready
 960              		.cfi_endproc
 961              	.LFE65:
 962              		.size	main, .-main
 963 0254 AFF30080 		.section	.text.get_food_list_path_length,"ax",%progbits
 964              		.align	2
 965              		.global	get_food_list_path_length
 966              		.thumb
 967              		.thumb_func
 968              		.type	get_food_list_path_length, %function
 969              	get_food_list_path_length:
 970              	.LFB66:
 184:.\main.c      **** //* ========================================
 185:.\main.c      **** //* PATH */
 186:.\main.c      **** //* ========================================
 187:.\main.c      **** //* Path Generation Logic */
 188:.\main.c      **** //* ========================================
 189:.\main.c      **** /*
 190:.\main.c      **** Return the path distance to visit every given food_list item
 191:.\main.c      **** from the current robot x,y coordinates.
 192:.\main.c      **** */
 193:.\main.c      **** uint16 get_food_list_path_length()
 194:.\main.c      **** {
 971              		.loc 1 194 0
 972              		.cfi_startproc
 973              		@ args = 0, pretend = 0, frame = 24
 974              		@ frame_needed = 1, uses_anonymous_args = 0
 975 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 976              		.cfi_def_cfa_offset 24
 977              		.cfi_offset 4, -24
 978              		.cfi_offset 5, -20
 979              		.cfi_offset 6, -16
 980              		.cfi_offset 7, -12
 981              		.cfi_offset 8, -8
 982              		.cfi_offset 14, -4
 983 0004 86B0     		sub	sp, sp, #24
 984              		.cfi_def_cfa_offset 48
 985 0006 00AF     		add	r7, sp, #0
 986              		.cfi_def_cfa_register 7
 987 0008 6C46     		mov	r4, sp
 988 000a A046     		mov	r8, r4
 195:.\main.c      ****     // initialise variables
 196:.\main.c      ****     uint8 pos[2] = {robot_y_pos, robot_x_pos};
 989              		.loc 1 196 0
 990 000c 314C     		ldr	r4, .L35
 991 000e 2478     		ldrb	r4, [r4]	@ zero_extendqisi2
 992 0010 3C71     		strb	r4, [r7, #4]
 993 0012 314C     		ldr	r4, .L35+4
 994 0014 2478     		ldrb	r4, [r4]	@ zero_extendqisi2
 995 0016 7C71     		strb	r4, [r7, #5]
 197:.\main.c      ****     uint8 des[2];
 198:.\main.c      ****     int8 temp_path[num_map_nodes][2];
 996              		.loc 1 198 0
 997 0018 304C     		ldr	r4, .L35+8
 998 001a 2688     		ldrh	r6, [r4]
 999 001c 3446     		mov	r4, r6
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 22


 1000 001e 013C     		subs	r4, r4, #1
 1001 0020 FC60     		str	r4, [r7, #12]
 1002 0022 B4B2     		uxth	r4, r6
 1003 0024 4FF00005 		mov	r5, #0
 1004 0028 2901     		lsls	r1, r5, #4
 1005 002a 41EA1471 		orr	r1, r1, r4, lsr #28
 1006 002e 2001     		lsls	r0, r4, #4
 1007 0030 B0B2     		uxth	r0, r6
 1008 0032 4FF00001 		mov	r1, #0
 1009 0036 0B01     		lsls	r3, r1, #4
 1010 0038 43EA1073 		orr	r3, r3, r0, lsr #28
 1011 003c 0201     		lsls	r2, r0, #4
 1012 003e 3346     		mov	r3, r6
 1013 0040 5B00     		lsls	r3, r3, #1
 1014 0042 0733     		adds	r3, r3, #7
 1015 0044 DB08     		lsrs	r3, r3, #3
 1016 0046 DB00     		lsls	r3, r3, #3
 1017 0048 ADEB030D 		sub	sp, sp, r3
 1018 004c 6B46     		mov	r3, sp
 1019 004e 0033     		adds	r3, r3, #0
 1020 0050 BB60     		str	r3, [r7, #8]
 199:.\main.c      **** 	init_path(temp_path, num_map_nodes);
 1021              		.loc 1 199 0
 1022 0052 BA68     		ldr	r2, [r7, #8]
 1023 0054 214B     		ldr	r3, .L35+8
 1024 0056 1B88     		ldrh	r3, [r3]
 1025 0058 1046     		mov	r0, r2
 1026 005a 1946     		mov	r1, r3
 1027 005c FFF7FEFF 		bl	init_path
 200:.\main.c      ****     uint16 path_length = 0;
 1028              		.loc 1 200 0
 1029 0060 0023     		movs	r3, #0
 1030 0062 FB82     		strh	r3, [r7, #22]	@ movhi
 201:.\main.c      ****     
 202:.\main.c      ****     // find length of path to visit every food list item
 203:.\main.c      ****     int i;
 204:.\main.c      ****     for (i = 0; i < FOOD; i++) {
 1031              		.loc 1 204 0
 1032 0064 0023     		movs	r3, #0
 1033 0066 3B61     		str	r3, [r7, #16]
 1034 0068 29E0     		b	.L30
 1035              	.L33:
 1036              	.LBB3:
 205:.\main.c      ****         // set current food list item as destination
 206:.\main.c      ****         des[0] = food_list[i][0];
 1037              		.loc 1 206 0
 1038 006a 1D4A     		ldr	r2, .L35+12
 1039 006c 3B69     		ldr	r3, [r7, #16]
 1040 006e 52F83330 		ldr	r3, [r2, r3, lsl #3]
 1041 0072 DBB2     		uxtb	r3, r3
 1042 0074 3B70     		strb	r3, [r7]
 207:.\main.c      ****         des[1] = food_list[i][1];
 1043              		.loc 1 207 0
 1044 0076 1A4A     		ldr	r2, .L35+12
 1045 0078 3B69     		ldr	r3, [r7, #16]
 1046 007a DB00     		lsls	r3, r3, #3
 1047 007c 1344     		add	r3, r3, r2
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 23


 1048 007e 5B68     		ldr	r3, [r3, #4]
 1049 0080 DBB2     		uxtb	r3, r3
 1050 0082 7B70     		strb	r3, [r7, #1]
 208:.\main.c      ****         // find distatnce 
 209:.\main.c      **** 		uint16 dist = find_shortest_path(pos, des, temp_path);
 1051              		.loc 1 209 0
 1052 0084 BB68     		ldr	r3, [r7, #8]
 1053 0086 391D     		adds	r1, r7, #4
 1054 0088 3A46     		mov	r2, r7
 1055 008a 0846     		mov	r0, r1
 1056 008c 1146     		mov	r1, r2
 1057 008e 1A46     		mov	r2, r3
 1058 0090 FFF7FEFF 		bl	find_shortest_path
 1059 0094 0346     		mov	r3, r0
 1060 0096 FB80     		strh	r3, [r7, #6]	@ movhi
 210:.\main.c      ****         // return INF if one of the food list items is not reachable
 211:.\main.c      **** 		if (dist == INF)
 1061              		.loc 1 211 0
 1062 0098 FB88     		ldrh	r3, [r7, #6]
 1063 009a 42F22832 		movw	r2, #9000
 1064 009e 9342     		cmp	r3, r2
 1065 00a0 02D1     		bne	.L31
 212:.\main.c      **** 			return INF;
 1066              		.loc 1 212 0
 1067 00a2 42F22833 		movw	r3, #9000
 1068 00a6 0EE0     		b	.L32
 1069              	.L31:
 213:.\main.c      **** 		else 
 214:.\main.c      **** 			path_length += dist;
 1070              		.loc 1 214 0 discriminator 2
 1071 00a8 FA8A     		ldrh	r2, [r7, #22]	@ movhi
 1072 00aa FB88     		ldrh	r3, [r7, #6]	@ movhi
 1073 00ac 1344     		add	r3, r3, r2
 1074 00ae FB82     		strh	r3, [r7, #22]	@ movhi
 215:.\main.c      ****         // set next pos to current found food list item
 216:.\main.c      ****         pos[0] = des[0];
 1075              		.loc 1 216 0 discriminator 2
 1076 00b0 3B78     		ldrb	r3, [r7]	@ zero_extendqisi2
 1077 00b2 3B71     		strb	r3, [r7, #4]
 217:.\main.c      ****         pos[1] = des[1];
 1078              		.loc 1 217 0 discriminator 2
 1079 00b4 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 1080 00b6 7B71     		strb	r3, [r7, #5]
 1081              	.LBE3:
 204:.\main.c      ****         // set current food list item as destination
 1082              		.loc 1 204 0 discriminator 2
 1083 00b8 3B69     		ldr	r3, [r7, #16]
 1084 00ba 0133     		adds	r3, r3, #1
 1085 00bc 3B61     		str	r3, [r7, #16]
 1086              	.L30:
 204:.\main.c      ****         // set current food list item as destination
 1087              		.loc 1 204 0 is_stmt 0 discriminator 1
 1088 00be 3B69     		ldr	r3, [r7, #16]
 1089 00c0 052B     		cmp	r3, #5
 1090 00c2 D2DD     		ble	.L33
 218:.\main.c      ****     }
 219:.\main.c      ****     return path_length;
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 24


 1091              		.loc 1 219 0 is_stmt 1
 1092 00c4 FB8A     		ldrh	r3, [r7, #22]
 1093              	.L32:
 1094 00c6 C546     		mov	sp, r8
 220:.\main.c      **** }
 1095              		.loc 1 220 0
 1096 00c8 1846     		mov	r0, r3
 1097 00ca 1837     		adds	r7, r7, #24
 1098              		.cfi_def_cfa_offset 24
 1099 00cc BD46     		mov	sp, r7
 1100              		.cfi_def_cfa_register 13
 1101              		@ sp needed
 1102 00ce BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1103              	.L36:
 1104 00d2 00BF     		.align	2
 1105              	.L35:
 1106 00d4 00000000 		.word	robot_y_pos
 1107 00d8 00000000 		.word	robot_x_pos
 1108 00dc 00000000 		.word	num_map_nodes
 1109 00e0 00000000 		.word	food_list
 1110              		.cfi_endproc
 1111              	.LFE66:
 1112              		.size	get_food_list_path_length, .-get_food_list_path_length
 1113              		.section	.text.get_traverse_path_length,"ax",%progbits
 1114              		.align	2
 1115              		.global	get_traverse_path_length
 1116              		.thumb
 1117              		.thumb_func
 1118              		.type	get_traverse_path_length, %function
 1119              	get_traverse_path_length:
 1120              	.LFB67:
 221:.\main.c      **** //* ========================================
 222:.\main.c      **** /*
 223:.\main.c      **** Return the path distance to visit every node on the given map
 224:.\main.c      **** from the current robot x,y coordinates.
 225:.\main.c      **** */
 226:.\main.c      **** uint16 get_traverse_path_length()
 227:.\main.c      **** {
 1121              		.loc 1 227 0
 1122              		.cfi_startproc
 1123              		@ args = 0, pretend = 0, frame = 16
 1124              		@ frame_needed = 1, uses_anonymous_args = 0
 1125 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1126              		.cfi_def_cfa_offset 24
 1127              		.cfi_offset 4, -24
 1128              		.cfi_offset 5, -20
 1129              		.cfi_offset 6, -16
 1130              		.cfi_offset 7, -12
 1131              		.cfi_offset 8, -8
 1132              		.cfi_offset 14, -4
 1133 0004 84B0     		sub	sp, sp, #16
 1134              		.cfi_def_cfa_offset 40
 1135 0006 00AF     		add	r7, sp, #0
 1136              		.cfi_def_cfa_register 7
 1137 0008 6C46     		mov	r4, sp
 1138 000a A046     		mov	r8, r4
 228:.\main.c      ****     // initialise variables
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 25


 229:.\main.c      ****     uint8 pos[2] = {robot_y_pos, robot_x_pos};
 1139              		.loc 1 229 0
 1140 000c 1B4C     		ldr	r4, .L39
 1141 000e 2478     		ldrb	r4, [r4]	@ zero_extendqisi2
 1142 0010 3C70     		strb	r4, [r7]
 1143 0012 1B4C     		ldr	r4, .L39+4
 1144 0014 2478     		ldrb	r4, [r4]	@ zero_extendqisi2
 1145 0016 7C70     		strb	r4, [r7, #1]
 230:.\main.c      **** 	uint16 path_length_temp = 2*ROW*COL;
 1146              		.loc 1 230 0
 1147 0018 40F23A24 		movw	r4, #570
 1148 001c FC81     		strh	r4, [r7, #14]	@ movhi
 231:.\main.c      ****     int8 temp_path[path_length_temp][2];
 1149              		.loc 1 231 0
 1150 001e FE89     		ldrh	r6, [r7, #14]
 1151 0020 3446     		mov	r4, r6
 1152 0022 013C     		subs	r4, r4, #1
 1153 0024 BC60     		str	r4, [r7, #8]
 1154 0026 B4B2     		uxth	r4, r6
 1155 0028 4FF00005 		mov	r5, #0
 1156 002c 2901     		lsls	r1, r5, #4
 1157 002e 41EA1471 		orr	r1, r1, r4, lsr #28
 1158 0032 2001     		lsls	r0, r4, #4
 1159 0034 B0B2     		uxth	r0, r6
 1160 0036 4FF00001 		mov	r1, #0
 1161 003a 0B01     		lsls	r3, r1, #4
 1162 003c 43EA1073 		orr	r3, r3, r0, lsr #28
 1163 0040 0201     		lsls	r2, r0, #4
 1164 0042 3346     		mov	r3, r6
 1165 0044 5B00     		lsls	r3, r3, #1
 1166 0046 0733     		adds	r3, r3, #7
 1167 0048 DB08     		lsrs	r3, r3, #3
 1168 004a DB00     		lsls	r3, r3, #3
 1169 004c ADEB030D 		sub	sp, sp, r3
 1170 0050 6B46     		mov	r3, sp
 1171 0052 0033     		adds	r3, r3, #0
 1172 0054 7B60     		str	r3, [r7, #4]
 232:.\main.c      **** 	init_path(temp_path, path_length_temp);
 1173              		.loc 1 232 0
 1174 0056 7A68     		ldr	r2, [r7, #4]
 1175 0058 FB89     		ldrh	r3, [r7, #14]
 1176 005a 1046     		mov	r0, r2
 1177 005c 1946     		mov	r1, r3
 1178 005e FFF7FEFF 		bl	init_path
 233:.\main.c      ****     // return length of path
 234:.\main.c      ****     return find_traverse_path(pos, temp_path);
 1179              		.loc 1 234 0
 1180 0062 7B68     		ldr	r3, [r7, #4]
 1181 0064 3A46     		mov	r2, r7
 1182 0066 1046     		mov	r0, r2
 1183 0068 1946     		mov	r1, r3
 1184 006a FFF7FEFF 		bl	find_traverse_path
 1185 006e 0346     		mov	r3, r0
 1186 0070 C546     		mov	sp, r8
 235:.\main.c      **** }
 1187              		.loc 1 235 0
 1188 0072 1846     		mov	r0, r3
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 26


 1189 0074 1037     		adds	r7, r7, #16
 1190              		.cfi_def_cfa_offset 24
 1191 0076 BD46     		mov	sp, r7
 1192              		.cfi_def_cfa_register 13
 1193              		@ sp needed
 1194 0078 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1195              	.L40:
 1196              		.align	2
 1197              	.L39:
 1198 007c 00000000 		.word	robot_y_pos
 1199 0080 00000000 		.word	robot_x_pos
 1200              		.cfi_endproc
 1201              	.LFE67:
 1202              		.size	get_traverse_path_length, .-get_traverse_path_length
 1203              		.section	.text.generate_food_list_path,"ax",%progbits
 1204              		.align	2
 1205              		.global	generate_food_list_path
 1206              		.thumb
 1207              		.thumb_func
 1208              		.type	generate_food_list_path, %function
 1209              	generate_food_list_path:
 1210              	.LFB68:
 236:.\main.c      **** //* ========================================
 237:.\main.c      **** /*
 238:.\main.c      **** Generate and return the path to visit every given food_list item
 239:.\main.c      **** from the current robot x,y coordinates.
 240:.\main.c      **** */
 241:.\main.c      **** void generate_food_list_path(int8 path[][2], uint16 path_length)
 242:.\main.c      **** {
 1211              		.loc 1 242 0
 1212              		.cfi_startproc
 1213              		@ args = 0, pretend = 0, frame = 40
 1214              		@ frame_needed = 1, uses_anonymous_args = 0
 1215 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1216              		.cfi_def_cfa_offset 24
 1217              		.cfi_offset 4, -24
 1218              		.cfi_offset 5, -20
 1219              		.cfi_offset 6, -16
 1220              		.cfi_offset 7, -12
 1221              		.cfi_offset 8, -8
 1222              		.cfi_offset 14, -4
 1223 0004 8AB0     		sub	sp, sp, #40
 1224              		.cfi_def_cfa_offset 64
 1225 0006 00AF     		add	r7, sp, #0
 1226              		.cfi_def_cfa_register 7
 1227 0008 7860     		str	r0, [r7, #4]
 1228 000a 7980     		strh	r1, [r7, #2]	@ movhi
 1229 000c 6946     		mov	r1, sp
 1230 000e 8846     		mov	r8, r1
 243:.\main.c      ****     // initialise variables
 244:.\main.c      ****     uint8 pos[2] = {robot_y_pos, robot_x_pos};
 1231              		.loc 1 244 0
 1232 0010 3F49     		ldr	r1, .L46
 1233 0012 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 1234 0014 3973     		strb	r1, [r7, #12]
 1235 0016 3F49     		ldr	r1, .L46+4
 1236 0018 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 27


 1237 001a 7973     		strb	r1, [r7, #13]
 245:.\main.c      ****     uint8 des[2];
 246:.\main.c      ****     int8 temp_path[path_length][2];
 1238              		.loc 1 246 0
 1239 001c 7E88     		ldrh	r6, [r7, #2]
 1240 001e 3146     		mov	r1, r6
 1241 0020 0139     		subs	r1, r1, #1
 1242 0022 7961     		str	r1, [r7, #20]
 1243 0024 B0B2     		uxth	r0, r6
 1244 0026 4FF00001 		mov	r1, #0
 1245 002a 0D01     		lsls	r5, r1, #4
 1246 002c 45EA1075 		orr	r5, r5, r0, lsr #28
 1247 0030 0401     		lsls	r4, r0, #4
 1248 0032 B0B2     		uxth	r0, r6
 1249 0034 4FF00001 		mov	r1, #0
 1250 0038 0B01     		lsls	r3, r1, #4
 1251 003a 43EA1073 		orr	r3, r3, r0, lsr #28
 1252 003e 0201     		lsls	r2, r0, #4
 1253 0040 3346     		mov	r3, r6
 1254 0042 5B00     		lsls	r3, r3, #1
 1255 0044 0733     		adds	r3, r3, #7
 1256 0046 DB08     		lsrs	r3, r3, #3
 1257 0048 DB00     		lsls	r3, r3, #3
 1258 004a ADEB030D 		sub	sp, sp, r3
 1259 004e 6B46     		mov	r3, sp
 1260 0050 0033     		adds	r3, r3, #0
 1261 0052 3B61     		str	r3, [r7, #16]
 247:.\main.c      **** 	init_path(temp_path, path_length);
 1262              		.loc 1 247 0
 1263 0054 3A69     		ldr	r2, [r7, #16]
 1264 0056 7B88     		ldrh	r3, [r7, #2]
 1265 0058 1046     		mov	r0, r2
 1266 005a 1946     		mov	r1, r3
 1267 005c FFF7FEFF 		bl	init_path
 248:.\main.c      ****     uint16 current_path_length = 0;
 1268              		.loc 1 248 0
 1269 0060 0023     		movs	r3, #0
 1270 0062 FB84     		strh	r3, [r7, #38]	@ movhi
 249:.\main.c      ****     
 250:.\main.c      ****     int i;
 251:.\main.c      ****     for (i = 0; i < FOOD; i++) {
 1271              		.loc 1 251 0
 1272 0064 0023     		movs	r3, #0
 1273 0066 3B62     		str	r3, [r7, #32]
 1274 0068 4AE0     		b	.L42
 1275              	.L45:
 1276              	.LBB4:
 252:.\main.c      ****         // set current food list item as destination
 253:.\main.c      ****         des[0] = food_list[i][0];
 1277              		.loc 1 253 0
 1278 006a 2B4A     		ldr	r2, .L46+8
 1279 006c 3B6A     		ldr	r3, [r7, #32]
 1280 006e 52F83330 		ldr	r3, [r2, r3, lsl #3]
 1281 0072 DBB2     		uxtb	r3, r3
 1282 0074 3B72     		strb	r3, [r7, #8]
 254:.\main.c      ****         des[1] = food_list[i][1];
 1283              		.loc 1 254 0
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 28


 1284 0076 284A     		ldr	r2, .L46+8
 1285 0078 3B6A     		ldr	r3, [r7, #32]
 1286 007a DB00     		lsls	r3, r3, #3
 1287 007c 1344     		add	r3, r3, r2
 1288 007e 5B68     		ldr	r3, [r3, #4]
 1289 0080 DBB2     		uxtb	r3, r3
 1290 0082 7B72     		strb	r3, [r7, #9]
 255:.\main.c      ****         // generate path from pos to des
 256:.\main.c      **** 		uint16 j = current_path_length;
 1291              		.loc 1 256 0
 1292 0084 FB8C     		ldrh	r3, [r7, #38]	@ movhi
 1293 0086 FB83     		strh	r3, [r7, #30]	@ movhi
 257:.\main.c      ****         current_path_length += find_shortest_path(pos, des, temp_path);
 1294              		.loc 1 257 0
 1295 0088 3B69     		ldr	r3, [r7, #16]
 1296 008a 07F10C01 		add	r1, r7, #12
 1297 008e 07F10802 		add	r2, r7, #8
 1298 0092 0846     		mov	r0, r1
 1299 0094 1146     		mov	r1, r2
 1300 0096 1A46     		mov	r2, r3
 1301 0098 FFF7FEFF 		bl	find_shortest_path
 1302 009c 0346     		mov	r3, r0
 1303 009e 1A46     		mov	r2, r3
 1304 00a0 FB8C     		ldrh	r3, [r7, #38]	@ movhi
 1305 00a2 1344     		add	r3, r3, r2
 1306 00a4 FB84     		strh	r3, [r7, #38]	@ movhi
 258:.\main.c      ****         // concatenate generated path to total path
 259:.\main.c      **** 		int k = 0;
 1307              		.loc 1 259 0
 1308 00a6 0023     		movs	r3, #0
 1309 00a8 BB61     		str	r3, [r7, #24]
 260:.\main.c      ****         while (j < current_path_length) {
 1310              		.loc 1 260 0
 1311 00aa 18E0     		b	.L43
 1312              	.L44:
 261:.\main.c      ****             path[j][0] = temp_path[k][0];
 1313              		.loc 1 261 0
 1314 00ac FB8B     		ldrh	r3, [r7, #30]
 1315 00ae 5B00     		lsls	r3, r3, #1
 1316 00b0 7A68     		ldr	r2, [r7, #4]
 1317 00b2 1344     		add	r3, r3, r2
 1318 00b4 3A69     		ldr	r2, [r7, #16]
 1319 00b6 B969     		ldr	r1, [r7, #24]
 1320 00b8 12F81120 		ldrb	r2, [r2, r1, lsl #1]	@ zero_extendqisi2
 1321 00bc 1A70     		strb	r2, [r3]
 262:.\main.c      ****             path[j][1] = temp_path[k][1];
 1322              		.loc 1 262 0
 1323 00be FB8B     		ldrh	r3, [r7, #30]
 1324 00c0 5B00     		lsls	r3, r3, #1
 1325 00c2 7A68     		ldr	r2, [r7, #4]
 1326 00c4 1A44     		add	r2, r2, r3
 1327 00c6 3969     		ldr	r1, [r7, #16]
 1328 00c8 BB69     		ldr	r3, [r7, #24]
 1329 00ca 5B00     		lsls	r3, r3, #1
 1330 00cc 0B44     		add	r3, r3, r1
 1331 00ce 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1332 00d0 5370     		strb	r3, [r2, #1]
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 29


 263:.\main.c      ****             j++;
 1333              		.loc 1 263 0
 1334 00d2 FB8B     		ldrh	r3, [r7, #30]
 1335 00d4 0133     		adds	r3, r3, #1
 1336 00d6 FB83     		strh	r3, [r7, #30]	@ movhi
 264:.\main.c      **** 			k++;
 1337              		.loc 1 264 0
 1338 00d8 BB69     		ldr	r3, [r7, #24]
 1339 00da 0133     		adds	r3, r3, #1
 1340 00dc BB61     		str	r3, [r7, #24]
 1341              	.L43:
 260:.\main.c      ****             path[j][0] = temp_path[k][0];
 1342              		.loc 1 260 0
 1343 00de FA8B     		ldrh	r2, [r7, #30]
 1344 00e0 FB8C     		ldrh	r3, [r7, #38]
 1345 00e2 9A42     		cmp	r2, r3
 1346 00e4 E2D3     		bcc	.L44
 265:.\main.c      ****         }
 266:.\main.c      ****         // set next pos to current found food list item and reset temp path
 267:.\main.c      ****         pos[0] = des[0];
 1347              		.loc 1 267 0 discriminator 2
 1348 00e6 3B7A     		ldrb	r3, [r7, #8]	@ zero_extendqisi2
 1349 00e8 3B73     		strb	r3, [r7, #12]
 268:.\main.c      ****         pos[1] = des[1];
 1350              		.loc 1 268 0 discriminator 2
 1351 00ea 7B7A     		ldrb	r3, [r7, #9]	@ zero_extendqisi2
 1352 00ec 7B73     		strb	r3, [r7, #13]
 269:.\main.c      **** 		init_path(temp_path, path_length);
 1353              		.loc 1 269 0 discriminator 2
 1354 00ee 3A69     		ldr	r2, [r7, #16]
 1355 00f0 7B88     		ldrh	r3, [r7, #2]
 1356 00f2 1046     		mov	r0, r2
 1357 00f4 1946     		mov	r1, r3
 1358 00f6 FFF7FEFF 		bl	init_path
 1359              	.LBE4:
 251:.\main.c      ****         // set current food list item as destination
 1360              		.loc 1 251 0 discriminator 2
 1361 00fa 3B6A     		ldr	r3, [r7, #32]
 1362 00fc 0133     		adds	r3, r3, #1
 1363 00fe 3B62     		str	r3, [r7, #32]
 1364              	.L42:
 251:.\main.c      ****         // set current food list item as destination
 1365              		.loc 1 251 0 is_stmt 0 discriminator 1
 1366 0100 3B6A     		ldr	r3, [r7, #32]
 1367 0102 052B     		cmp	r3, #5
 1368 0104 B1DD     		ble	.L45
 1369 0106 C546     		mov	sp, r8
 270:.\main.c      ****     }
 271:.\main.c      **** }
 1370              		.loc 1 271 0 is_stmt 1
 1371 0108 2837     		adds	r7, r7, #40
 1372              		.cfi_def_cfa_offset 24
 1373 010a BD46     		mov	sp, r7
 1374              		.cfi_def_cfa_register 13
 1375              		@ sp needed
 1376 010c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1377              	.L47:
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 30


 1378              		.align	2
 1379              	.L46:
 1380 0110 00000000 		.word	robot_y_pos
 1381 0114 00000000 		.word	robot_x_pos
 1382 0118 00000000 		.word	food_list
 1383              		.cfi_endproc
 1384              	.LFE68:
 1385              		.size	generate_food_list_path, .-generate_food_list_path
 1386              		.section	.text.generate_traverse_path,"ax",%progbits
 1387              		.align	2
 1388              		.global	generate_traverse_path
 1389              		.thumb
 1390              		.thumb_func
 1391              		.type	generate_traverse_path, %function
 1392              	generate_traverse_path:
 1393              	.LFB69:
 272:.\main.c      **** //* ========================================
 273:.\main.c      **** /*
 274:.\main.c      **** Generate and return the path distance to visit every node on the given map
 275:.\main.c      **** from the current robot x,y coordinates.
 276:.\main.c      **** */
 277:.\main.c      **** void generate_traverse_path(int8 path[][2])
 278:.\main.c      **** {
 1394              		.loc 1 278 0
 1395              		.cfi_startproc
 1396              		@ args = 0, pretend = 0, frame = 16
 1397              		@ frame_needed = 1, uses_anonymous_args = 0
 1398 0000 80B5     		push	{r7, lr}
 1399              		.cfi_def_cfa_offset 8
 1400              		.cfi_offset 7, -8
 1401              		.cfi_offset 14, -4
 1402 0002 84B0     		sub	sp, sp, #16
 1403              		.cfi_def_cfa_offset 24
 1404 0004 00AF     		add	r7, sp, #0
 1405              		.cfi_def_cfa_register 7
 1406 0006 7860     		str	r0, [r7, #4]
 279:.\main.c      ****     // initialise position
 280:.\main.c      ****     uint8 pos[2] = {robot_y_pos, robot_x_pos};
 1407              		.loc 1 280 0
 1408 0008 074B     		ldr	r3, .L49
 1409 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1410 000c 3B73     		strb	r3, [r7, #12]
 1411 000e 074B     		ldr	r3, .L49+4
 1412 0010 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1413 0012 7B73     		strb	r3, [r7, #13]
 281:.\main.c      ****     // generate path
 282:.\main.c      ****     find_traverse_path(pos, path);
 1414              		.loc 1 282 0
 1415 0014 07F10C03 		add	r3, r7, #12
 1416 0018 1846     		mov	r0, r3
 1417 001a 7968     		ldr	r1, [r7, #4]
 1418 001c FFF7FEFF 		bl	find_traverse_path
 283:.\main.c      **** }
 1419              		.loc 1 283 0
 1420 0020 1037     		adds	r7, r7, #16
 1421              		.cfi_def_cfa_offset 8
 1422 0022 BD46     		mov	sp, r7
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 31


 1423              		.cfi_def_cfa_register 13
 1424              		@ sp needed
 1425 0024 80BD     		pop	{r7, pc}
 1426              	.L50:
 1427 0026 00BF     		.align	2
 1428              	.L49:
 1429 0028 00000000 		.word	robot_y_pos
 1430 002c 00000000 		.word	robot_x_pos
 1431              		.cfi_endproc
 1432              	.LFE69:
 1433              		.size	generate_traverse_path, .-generate_traverse_path
 1434              		.global	__aeabi_i2d
 1435              		.global	__aeabi_dadd
 1436              		.global	__aeabi_d2f
 1437              		.global	__aeabi_fadd
 1438              		.section	.text.find_shortest_path,"ax",%progbits
 1439              		.align	2
 1440              		.global	find_shortest_path
 1441              		.thumb
 1442              		.thumb_func
 1443              		.type	find_shortest_path, %function
 1444              	find_shortest_path:
 1445              	.LFB70:
 284:.\main.c      **** //* ========================================
 285:.\main.c      **** //* Path Algorithms */
 286:.\main.c      **** //* ========================================
 287:.\main.c      **** /*
 288:.\main.c      **** Generate the shortest path between a position and destination
 289:.\main.c      **** using A* path finding algorithm and return the path distance.
 290:.\main.c      **** If the destination is not reachable return INF.
 291:.\main.c      **** */
 292:.\main.c      **** uint16 find_shortest_path(uint8 pos[2], uint8 des[2], int8 path[][2])
 293:.\main.c      **** {
 1446              		.loc 1 293 0
 1447              		.cfi_startproc
 1448              		@ args = 0, pretend = 0, frame = 216
 1449              		@ frame_needed = 1, uses_anonymous_args = 0
 1450 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1451              		.cfi_def_cfa_offset 36
 1452              		.cfi_offset 4, -36
 1453              		.cfi_offset 5, -32
 1454              		.cfi_offset 6, -28
 1455              		.cfi_offset 7, -24
 1456              		.cfi_offset 8, -20
 1457              		.cfi_offset 9, -16
 1458              		.cfi_offset 10, -12
 1459              		.cfi_offset 11, -8
 1460              		.cfi_offset 14, -4
 1461 0004 B7B0     		sub	sp, sp, #220
 1462              		.cfi_def_cfa_offset 256
 1463 0006 00AF     		add	r7, sp, #0
 1464              		.cfi_def_cfa_register 7
 1465 0008 7866     		str	r0, [r7, #100]
 1466 000a 3966     		str	r1, [r7, #96]
 1467 000c FA65     		str	r2, [r7, #92]
 1468 000e 6B46     		mov	r3, sp
 1469 0010 1E46     		mov	r6, r3
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 32


 294:.\main.c      ****     // define arrays
 295:.\main.c      **** 	uint8 nodes[num_map_nodes][2];      // traverseable map nodes
 1470              		.loc 1 295 0
 1471 0012 7A4B     		ldr	r3, .L77
 1472 0014 1988     		ldrh	r1, [r3]
 1473 0016 0B46     		mov	r3, r1
 1474 0018 013B     		subs	r3, r3, #1
 1475 001a C7F8BC30 		str	r3, [r7, #188]
 1476 001e 8AB2     		uxth	r2, r1
 1477 0020 4FF00003 		mov	r3, #0
 1478 0024 1D01     		lsls	r5, r3, #4
 1479 0026 45EA1275 		orr	r5, r5, r2, lsr #28
 1480 002a 1401     		lsls	r4, r2, #4
 1481 002c 8AB2     		uxth	r2, r1
 1482 002e 4FF00003 		mov	r3, #0
 1483 0032 4FEA0319 		lsl	r9, r3, #4
 1484 0036 49EA1279 		orr	r9, r9, r2, lsr #28
 1485 003a 4FEA0218 		lsl	r8, r2, #4
 1486 003e 0B46     		mov	r3, r1
 1487 0040 5B00     		lsls	r3, r3, #1
 1488 0042 0733     		adds	r3, r3, #7
 1489 0044 DB08     		lsrs	r3, r3, #3
 1490 0046 DB00     		lsls	r3, r3, #3
 1491 0048 ADEB030D 		sub	sp, sp, r3
 1492 004c 6B46     		mov	r3, sp
 1493 004e 0033     		adds	r3, r3, #0
 1494 0050 C7F8B830 		str	r3, [r7, #184]
 296:.\main.c      **** 	uint8 cons[num_map_nodes];          // nodes considered by algorithm
 1495              		.loc 1 296 0
 1496 0054 694B     		ldr	r3, .L77
 1497 0056 1988     		ldrh	r1, [r3]
 1498 0058 0B46     		mov	r3, r1
 1499 005a 013B     		subs	r3, r3, #1
 1500 005c C7F8B430 		str	r3, [r7, #180]
 1501 0060 8AB2     		uxth	r2, r1
 1502 0062 4FF00003 		mov	r3, #0
 1503 0066 4FEAC30B 		lsl	fp, r3, #3
 1504 006a 4BEA527B 		orr	fp, fp, r2, lsr #29
 1505 006e 4FEAC20A 		lsl	r10, r2, #3
 1506 0072 8AB2     		uxth	r2, r1
 1507 0074 4FF00003 		mov	r3, #0
 1508 0078 D800     		lsls	r0, r3, #3
 1509 007a 7865     		str	r0, [r7, #84]
 1510 007c 786D     		ldr	r0, [r7, #84]
 1511 007e 40EA5270 		orr	r0, r0, r2, lsr #29
 1512 0082 7865     		str	r0, [r7, #84]
 1513 0084 D300     		lsls	r3, r2, #3
 1514 0086 3B65     		str	r3, [r7, #80]
 1515 0088 0B46     		mov	r3, r1
 1516 008a 0733     		adds	r3, r3, #7
 1517 008c DB08     		lsrs	r3, r3, #3
 1518 008e DB00     		lsls	r3, r3, #3
 1519 0090 ADEB030D 		sub	sp, sp, r3
 1520 0094 6B46     		mov	r3, sp
 1521 0096 0033     		adds	r3, r3, #0
 1522 0098 C7F8B030 		str	r3, [r7, #176]
 297:.\main.c      **** 	float heurst[num_map_nodes];        // heuristic dist from pos to each map node
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 33


 1523              		.loc 1 297 0
 1524 009c 574B     		ldr	r3, .L77
 1525 009e 1988     		ldrh	r1, [r3]
 1526 00a0 0B46     		mov	r3, r1
 1527 00a2 013B     		subs	r3, r3, #1
 1528 00a4 C7F8AC30 		str	r3, [r7, #172]
 1529 00a8 8AB2     		uxth	r2, r1
 1530 00aa 4FF00003 		mov	r3, #0
 1531 00ae 5801     		lsls	r0, r3, #5
 1532 00b0 F864     		str	r0, [r7, #76]
 1533 00b2 F86C     		ldr	r0, [r7, #76]
 1534 00b4 40EAD260 		orr	r0, r0, r2, lsr #27
 1535 00b8 F864     		str	r0, [r7, #76]
 1536 00ba 5301     		lsls	r3, r2, #5
 1537 00bc BB64     		str	r3, [r7, #72]
 1538 00be 8AB2     		uxth	r2, r1
 1539 00c0 4FF00003 		mov	r3, #0
 1540 00c4 5801     		lsls	r0, r3, #5
 1541 00c6 7864     		str	r0, [r7, #68]
 1542 00c8 786C     		ldr	r0, [r7, #68]
 1543 00ca 40EAD260 		orr	r0, r0, r2, lsr #27
 1544 00ce 7864     		str	r0, [r7, #68]
 1545 00d0 5301     		lsls	r3, r2, #5
 1546 00d2 3B64     		str	r3, [r7, #64]
 1547 00d4 0B46     		mov	r3, r1
 1548 00d6 9B00     		lsls	r3, r3, #2
 1549 00d8 0333     		adds	r3, r3, #3
 1550 00da 0733     		adds	r3, r3, #7
 1551 00dc DB08     		lsrs	r3, r3, #3
 1552 00de DB00     		lsls	r3, r3, #3
 1553 00e0 ADEB030D 		sub	sp, sp, r3
 1554 00e4 6B46     		mov	r3, sp
 1555 00e6 0333     		adds	r3, r3, #3
 1556 00e8 9B08     		lsrs	r3, r3, #2
 1557 00ea 9B00     		lsls	r3, r3, #2
 1558 00ec C7F8A830 		str	r3, [r7, #168]
 298:.\main.c      **** 	uint16 dist[num_map_nodes];         // path dist from pos to each map node
 1559              		.loc 1 298 0
 1560 00f0 424B     		ldr	r3, .L77
 1561 00f2 1988     		ldrh	r1, [r3]
 1562 00f4 0B46     		mov	r3, r1
 1563 00f6 013B     		subs	r3, r3, #1
 1564 00f8 C7F8A430 		str	r3, [r7, #164]
 1565 00fc 8AB2     		uxth	r2, r1
 1566 00fe 4FF00003 		mov	r3, #0
 1567 0102 1801     		lsls	r0, r3, #4
 1568 0104 F863     		str	r0, [r7, #60]
 1569 0106 F86B     		ldr	r0, [r7, #60]
 1570 0108 40EA1270 		orr	r0, r0, r2, lsr #28
 1571 010c F863     		str	r0, [r7, #60]
 1572 010e 1301     		lsls	r3, r2, #4
 1573 0110 BB63     		str	r3, [r7, #56]
 1574 0112 8AB2     		uxth	r2, r1
 1575 0114 4FF00003 		mov	r3, #0
 1576 0118 1801     		lsls	r0, r3, #4
 1577 011a 7863     		str	r0, [r7, #52]
 1578 011c 786B     		ldr	r0, [r7, #52]
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 34


 1579 011e 40EA1270 		orr	r0, r0, r2, lsr #28
 1580 0122 7863     		str	r0, [r7, #52]
 1581 0124 1301     		lsls	r3, r2, #4
 1582 0126 3B63     		str	r3, [r7, #48]
 1583 0128 0B46     		mov	r3, r1
 1584 012a 5B00     		lsls	r3, r3, #1
 1585 012c 0133     		adds	r3, r3, #1
 1586 012e 0733     		adds	r3, r3, #7
 1587 0130 DB08     		lsrs	r3, r3, #3
 1588 0132 DB00     		lsls	r3, r3, #3
 1589 0134 ADEB030D 		sub	sp, sp, r3
 1590 0138 6B46     		mov	r3, sp
 1591 013a 0133     		adds	r3, r3, #1
 1592 013c 5B08     		lsrs	r3, r3, #1
 1593 013e 5B00     		lsls	r3, r3, #1
 1594 0140 C7F8A030 		str	r3, [r7, #160]
 299:.\main.c      **** 	float d_h[num_map_nodes];           // heust dist + path dist for each node
 1595              		.loc 1 299 0
 1596 0144 2D4B     		ldr	r3, .L77
 1597 0146 1988     		ldrh	r1, [r3]
 1598 0148 0B46     		mov	r3, r1
 1599 014a 013B     		subs	r3, r3, #1
 1600 014c C7F89C30 		str	r3, [r7, #156]
 1601 0150 8AB2     		uxth	r2, r1
 1602 0152 4FF00003 		mov	r3, #0
 1603 0156 5801     		lsls	r0, r3, #5
 1604 0158 F862     		str	r0, [r7, #44]
 1605 015a F86A     		ldr	r0, [r7, #44]
 1606 015c 40EAD260 		orr	r0, r0, r2, lsr #27
 1607 0160 F862     		str	r0, [r7, #44]
 1608 0162 5301     		lsls	r3, r2, #5
 1609 0164 BB62     		str	r3, [r7, #40]
 1610 0166 8AB2     		uxth	r2, r1
 1611 0168 4FF00003 		mov	r3, #0
 1612 016c 5801     		lsls	r0, r3, #5
 1613 016e 7862     		str	r0, [r7, #36]
 1614 0170 786A     		ldr	r0, [r7, #36]
 1615 0172 40EAD260 		orr	r0, r0, r2, lsr #27
 1616 0176 7862     		str	r0, [r7, #36]
 1617 0178 5301     		lsls	r3, r2, #5
 1618 017a 3B62     		str	r3, [r7, #32]
 1619 017c 0B46     		mov	r3, r1
 1620 017e 9B00     		lsls	r3, r3, #2
 1621 0180 0333     		adds	r3, r3, #3
 1622 0182 0733     		adds	r3, r3, #7
 1623 0184 DB08     		lsrs	r3, r3, #3
 1624 0186 DB00     		lsls	r3, r3, #3
 1625 0188 ADEB030D 		sub	sp, sp, r3
 1626 018c 6B46     		mov	r3, sp
 1627 018e 0333     		adds	r3, r3, #3
 1628 0190 9B08     		lsrs	r3, r3, #2
 1629 0192 9B00     		lsls	r3, r3, #2
 1630 0194 C7F89830 		str	r3, [r7, #152]
 300:.\main.c      **** 	int8 prev[num_map_nodes][2];        // previous node used to reach map node
 1631              		.loc 1 300 0
 1632 0198 184B     		ldr	r3, .L77
 1633 019a 1988     		ldrh	r1, [r3]
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 35


 1634 019c 0B46     		mov	r3, r1
 1635 019e 013B     		subs	r3, r3, #1
 1636 01a0 C7F89430 		str	r3, [r7, #148]
 1637 01a4 8AB2     		uxth	r2, r1
 1638 01a6 4FF00003 		mov	r3, #0
 1639 01aa 1801     		lsls	r0, r3, #4
 1640 01ac F861     		str	r0, [r7, #28]
 1641 01ae F869     		ldr	r0, [r7, #28]
 1642 01b0 40EA1270 		orr	r0, r0, r2, lsr #28
 1643 01b4 F861     		str	r0, [r7, #28]
 1644 01b6 1301     		lsls	r3, r2, #4
 1645 01b8 BB61     		str	r3, [r7, #24]
 1646 01ba 8AB2     		uxth	r2, r1
 1647 01bc 4FF00003 		mov	r3, #0
 1648 01c0 1801     		lsls	r0, r3, #4
 1649 01c2 7861     		str	r0, [r7, #20]
 1650 01c4 7869     		ldr	r0, [r7, #20]
 1651 01c6 40EA1270 		orr	r0, r0, r2, lsr #28
 1652 01ca 7861     		str	r0, [r7, #20]
 1653 01cc 1301     		lsls	r3, r2, #4
 1654 01ce 3B61     		str	r3, [r7, #16]
 1655 01d0 0B46     		mov	r3, r1
 1656 01d2 5B00     		lsls	r3, r3, #1
 1657 01d4 0733     		adds	r3, r3, #7
 1658 01d6 DB08     		lsrs	r3, r3, #3
 1659 01d8 DB00     		lsls	r3, r3, #3
 1660 01da ADEB030D 		sub	sp, sp, r3
 1661 01de 6B46     		mov	r3, sp
 1662 01e0 0033     		adds	r3, r3, #0
 1663 01e2 C7F89030 		str	r3, [r7, #144]
 301:.\main.c      ****     
 302:.\main.c      ****     // init arrays
 303:.\main.c      **** 	uint16 i = 0;
 1664              		.loc 1 303 0
 1665 01e6 0023     		movs	r3, #0
 1666 01e8 A7F8D630 		strh	r3, [r7, #214]	@ movhi
 304:.\main.c      ****     int r, c;
 305:.\main.c      **** 	for (r = 0; r < ROW; r++) {
 1667              		.loc 1 305 0
 1668 01ec 0023     		movs	r3, #0
 1669 01ee C7F8D030 		str	r3, [r7, #208]
 1670 01f2 A2E0     		b	.L52
 1671              	.L56:
 306:.\main.c      **** 		for (c = 0; c < COL; c++) {
 1672              		.loc 1 306 0
 1673 01f4 0023     		movs	r3, #0
 1674 01f6 C7F8CC30 		str	r3, [r7, #204]
 1675 01fa 94E0     		b	.L53
 1676              	.L78:
 1677              		.align	2
 1678              	.L77:
 1679 01fc 00000000 		.word	num_map_nodes
 1680              	.L55:
 307:.\main.c      **** 			if (!map[r][c]) {
 1681              		.loc 1 307 0
 1682 0200 CE49     		ldr	r1, .L79
 1683 0202 D7F8D020 		ldr	r2, [r7, #208]
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 36


 1684 0206 1346     		mov	r3, r2
 1685 0208 DB00     		lsls	r3, r3, #3
 1686 020a 1344     		add	r3, r3, r2
 1687 020c 5B00     		lsls	r3, r3, #1
 1688 020e 1344     		add	r3, r3, r2
 1689 0210 D7F8CC20 		ldr	r2, [r7, #204]
 1690 0214 1344     		add	r3, r3, r2
 1691 0216 51F82330 		ldr	r3, [r1, r3, lsl #2]
 1692 021a 002B     		cmp	r3, #0
 1693 021c 7ED1     		bne	.L54
 308:.\main.c      **** 				nodes[i][0] = r;
 1694              		.loc 1 308 0
 1695 021e B7F8D620 		ldrh	r2, [r7, #214]
 1696 0222 D7F8D030 		ldr	r3, [r7, #208]
 1697 0226 D9B2     		uxtb	r1, r3
 1698 0228 D7F8B830 		ldr	r3, [r7, #184]
 1699 022c 03F81210 		strb	r1, [r3, r2, lsl #1]
 309:.\main.c      **** 				nodes[i][1] = c;
 1700              		.loc 1 309 0
 1701 0230 B7F8D630 		ldrh	r3, [r7, #214]
 1702 0234 D7F8CC20 		ldr	r2, [r7, #204]
 1703 0238 D1B2     		uxtb	r1, r2
 1704 023a D7F8B820 		ldr	r2, [r7, #184]
 1705 023e 5B00     		lsls	r3, r3, #1
 1706 0240 1344     		add	r3, r3, r2
 1707 0242 0A46     		mov	r2, r1
 1708 0244 5A70     		strb	r2, [r3, #1]
 310:.\main.c      **** 				cons[i] = 0;
 1709              		.loc 1 310 0
 1710 0246 B7F8D630 		ldrh	r3, [r7, #214]
 1711 024a D7F8B020 		ldr	r2, [r7, #176]
 1712 024e 0021     		movs	r1, #0
 1713 0250 D154     		strb	r1, [r2, r3]
 311:.\main.c      ****                 // straight line distance
 312:.\main.c      **** 				heurst[i] = sqrt(pow((des[0]-r),2) + pow((des[1]-c),2));
 1714              		.loc 1 312 0
 1715 0252 B7F8D640 		ldrh	r4, [r7, #214]
 1716 0256 3B6E     		ldr	r3, [r7, #96]
 1717 0258 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1718 025a 1A46     		mov	r2, r3
 1719 025c D7F8D030 		ldr	r3, [r7, #208]
 1720 0260 D31A     		subs	r3, r2, r3
 1721 0262 1846     		mov	r0, r3
 1722 0264 FFF7FEFF 		bl	__aeabi_i2d
 1723 0268 0246     		mov	r2, r0
 1724 026a 0B46     		mov	r3, r1
 1725 026c 1046     		mov	r0, r2
 1726 026e 1946     		mov	r1, r3
 1727 0270 4FF00002 		mov	r2, #0
 1728 0274 4FF08043 		mov	r3, #1073741824
 1729 0278 FFF7FEFF 		bl	pow
 1730 027c 8046     		mov	r8, r0
 1731 027e 8946     		mov	r9, r1
 1732 0280 3B6E     		ldr	r3, [r7, #96]
 1733 0282 0133     		adds	r3, r3, #1
 1734 0284 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1735 0286 1A46     		mov	r2, r3
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 37


 1736 0288 D7F8CC30 		ldr	r3, [r7, #204]
 1737 028c D31A     		subs	r3, r2, r3
 1738 028e 1846     		mov	r0, r3
 1739 0290 FFF7FEFF 		bl	__aeabi_i2d
 1740 0294 0246     		mov	r2, r0
 1741 0296 0B46     		mov	r3, r1
 1742 0298 1046     		mov	r0, r2
 1743 029a 1946     		mov	r1, r3
 1744 029c 4FF00002 		mov	r2, #0
 1745 02a0 4FF08043 		mov	r3, #1073741824
 1746 02a4 FFF7FEFF 		bl	pow
 1747 02a8 0246     		mov	r2, r0
 1748 02aa 0B46     		mov	r3, r1
 1749 02ac 4046     		mov	r0, r8
 1750 02ae 4946     		mov	r1, r9
 1751 02b0 FFF7FEFF 		bl	__aeabi_dadd
 1752 02b4 0246     		mov	r2, r0
 1753 02b6 0B46     		mov	r3, r1
 1754 02b8 1046     		mov	r0, r2
 1755 02ba 1946     		mov	r1, r3
 1756 02bc FFF7FEFF 		bl	sqrt
 1757 02c0 0246     		mov	r2, r0
 1758 02c2 0B46     		mov	r3, r1
 1759 02c4 1046     		mov	r0, r2
 1760 02c6 1946     		mov	r1, r3
 1761 02c8 FFF7FEFF 		bl	__aeabi_d2f
 1762 02cc 0246     		mov	r2, r0
 1763 02ce D7F8A830 		ldr	r3, [r7, #168]
 1764 02d2 43F82420 		str	r2, [r3, r4, lsl #2]	@ float
 313:.\main.c      **** 				dist[i] = INF;
 1765              		.loc 1 313 0
 1766 02d6 B7F8D620 		ldrh	r2, [r7, #214]
 1767 02da D7F8A030 		ldr	r3, [r7, #160]
 1768 02de 42F22831 		movw	r1, #9000
 1769 02e2 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
 314:.\main.c      **** 				d_h[i] = INF;
 1770              		.loc 1 314 0
 1771 02e6 B7F8D620 		ldrh	r2, [r7, #214]
 1772 02ea D7F89830 		ldr	r3, [r7, #152]
 1773 02ee 9449     		ldr	r1, .L79+4
 1774 02f0 43F82210 		str	r1, [r3, r2, lsl #2]	@ float
 315:.\main.c      **** 				prev[i][0] = -1;
 1775              		.loc 1 315 0
 1776 02f4 B7F8D620 		ldrh	r2, [r7, #214]
 1777 02f8 D7F89030 		ldr	r3, [r7, #144]
 1778 02fc FF21     		movs	r1, #255
 1779 02fe 03F81210 		strb	r1, [r3, r2, lsl #1]
 316:.\main.c      **** 				prev[i][1] = -1;
 1780              		.loc 1 316 0
 1781 0302 B7F8D630 		ldrh	r3, [r7, #214]
 1782 0306 D7F89020 		ldr	r2, [r7, #144]
 1783 030a 5B00     		lsls	r3, r3, #1
 1784 030c 1344     		add	r3, r3, r2
 1785 030e FF22     		movs	r2, #255
 1786 0310 5A70     		strb	r2, [r3, #1]
 317:.\main.c      **** 				i++;
 1787              		.loc 1 317 0
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 38


 1788 0312 B7F8D630 		ldrh	r3, [r7, #214]
 1789 0316 0133     		adds	r3, r3, #1
 1790 0318 A7F8D630 		strh	r3, [r7, #214]	@ movhi
 1791              	.L54:
 306:.\main.c      **** 			if (!map[r][c]) {
 1792              		.loc 1 306 0 discriminator 2
 1793 031c D7F8CC30 		ldr	r3, [r7, #204]
 1794 0320 0133     		adds	r3, r3, #1
 1795 0322 C7F8CC30 		str	r3, [r7, #204]
 1796              	.L53:
 306:.\main.c      **** 			if (!map[r][c]) {
 1797              		.loc 1 306 0 is_stmt 0 discriminator 1
 1798 0326 D7F8CC30 		ldr	r3, [r7, #204]
 1799 032a 122B     		cmp	r3, #18
 1800 032c 7FF768AF 		ble	.L55
 305:.\main.c      **** 		for (c = 0; c < COL; c++) {
 1801              		.loc 1 305 0 is_stmt 1 discriminator 2
 1802 0330 D7F8D030 		ldr	r3, [r7, #208]
 1803 0334 0133     		adds	r3, r3, #1
 1804 0336 C7F8D030 		str	r3, [r7, #208]
 1805              	.L52:
 305:.\main.c      **** 		for (c = 0; c < COL; c++) {
 1806              		.loc 1 305 0 is_stmt 0 discriminator 1
 1807 033a D7F8D030 		ldr	r3, [r7, #208]
 1808 033e 0E2B     		cmp	r3, #14
 1809 0340 7FF758AF 		ble	.L56
 318:.\main.c      **** 			}
 319:.\main.c      **** 		}
 320:.\main.c      **** 	}
 321:.\main.c      **** 	
 322:.\main.c      **** 	// return INF if pos and des are not traveseable nodes
 323:.\main.c      **** 	int32 pos_index = get_node_index(pos, nodes);
 1810              		.loc 1 323 0 is_stmt 1
 1811 0344 D7F8B830 		ldr	r3, [r7, #184]
 1812 0348 786E     		ldr	r0, [r7, #100]
 1813 034a 1946     		mov	r1, r3
 1814 034c FFF7FEFF 		bl	get_node_index
 1815 0350 C7F88C00 		str	r0, [r7, #140]
 324:.\main.c      **** 	int32 des_index = get_node_index(des, nodes);
 1816              		.loc 1 324 0
 1817 0354 D7F8B830 		ldr	r3, [r7, #184]
 1818 0358 386E     		ldr	r0, [r7, #96]
 1819 035a 1946     		mov	r1, r3
 1820 035c FFF7FEFF 		bl	get_node_index
 1821 0360 C7F88800 		str	r0, [r7, #136]
 325:.\main.c      **** 	if (pos_index == -1 || des_index == -1)
 1822              		.loc 1 325 0
 1823 0364 D7F88C30 		ldr	r3, [r7, #140]
 1824 0368 B3F1FF3F 		cmp	r3, #-1
 1825 036c 04D0     		beq	.L57
 1826              		.loc 1 325 0 is_stmt 0 discriminator 1
 1827 036e D7F88830 		ldr	r3, [r7, #136]
 1828 0372 B3F1FF3F 		cmp	r3, #-1
 1829 0376 02D1     		bne	.L58
 1830              	.L57:
 326:.\main.c      **** 		return INF;
 1831              		.loc 1 326 0 is_stmt 1
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 39


 1832 0378 42F22833 		movw	r3, #9000
 1833 037c ACE1     		b	.L59
 1834              	.L58:
 327:.\main.c      **** 	
 328:.\main.c      **** 	// init dist parameters for starting pos
 329:.\main.c      **** 	dist[pos_index] = 0;
 1835              		.loc 1 329 0
 1836 037e D7F8A030 		ldr	r3, [r7, #160]
 1837 0382 D7F88C20 		ldr	r2, [r7, #140]
 1838 0386 0021     		movs	r1, #0
 1839 0388 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
 330:.\main.c      **** 	d_h[pos_index] = heurst[pos_index];
 1840              		.loc 1 330 0
 1841 038c D7F8A830 		ldr	r3, [r7, #168]
 1842 0390 D7F88C20 		ldr	r2, [r7, #140]
 1843 0394 53F82210 		ldr	r1, [r3, r2, lsl #2]	@ float
 1844 0398 D7F89830 		ldr	r3, [r7, #152]
 1845 039c D7F88C20 		ldr	r2, [r7, #140]
 1846 03a0 43F82210 		str	r1, [r3, r2, lsl #2]	@ float
 331:.\main.c      ****     
 332:.\main.c      ****     // Perform A* by considering every closest non-considered reachable node
 333:.\main.c      ****     // and finding the distance to all surrounding nodes.
 334:.\main.c      ****     // while loop should never run more times than there are nodes
 335:.\main.c      ****     uint16 safety = 0;
 1847              		.loc 1 335 0
 1848 03a4 0023     		movs	r3, #0
 1849 03a6 A7F8CA30 		strh	r3, [r7, #202]	@ movhi
 336:.\main.c      **** 	while (safety < num_map_nodes) {
 1850              		.loc 1 336 0
 1851 03aa B2E0     		b	.L60
 1852              	.L65:
 1853              	.LBB5:
 337:.\main.c      ****         // find non-considered node with smallest path + heurst dist
 338:.\main.c      **** 		int32 cur_node_index = get_array_min_index(d_h, cons);
 1854              		.loc 1 338 0
 1855 03ac D7F89820 		ldr	r2, [r7, #152]
 1856 03b0 D7F8B030 		ldr	r3, [r7, #176]
 1857 03b4 1046     		mov	r0, r2
 1858 03b6 1946     		mov	r1, r3
 1859 03b8 FFF7FEFF 		bl	get_array_min_index
 1860 03bc C7F88400 		str	r0, [r7, #132]
 339:.\main.c      ****         // end algorithm if current node is des or all nodes have been considered
 340:.\main.c      **** 		if (cur_node_index == get_node_index(des, nodes) || cur_node_index == -1)
 1861              		.loc 1 340 0
 1862 03c0 D7F8B830 		ldr	r3, [r7, #184]
 1863 03c4 386E     		ldr	r0, [r7, #96]
 1864 03c6 1946     		mov	r1, r3
 1865 03c8 FFF7FEFF 		bl	get_node_index
 1866 03cc 0246     		mov	r2, r0
 1867 03ce D7F88430 		ldr	r3, [r7, #132]
 1868 03d2 9A42     		cmp	r2, r3
 1869 03d4 00F0A480 		beq	.L61
 1870              		.loc 1 340 0 is_stmt 0 discriminator 1
 1871 03d8 D7F88430 		ldr	r3, [r7, #132]
 1872 03dc B3F1FF3F 		cmp	r3, #-1
 1873 03e0 00F09E80 		beq	.L61
 341:.\main.c      **** 		    break;
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 40


 342:.\main.c      **** 	    
 343:.\main.c      ****         // find all non-considered nodes next to current node
 344:.\main.c      ****         i = 0;
 1874              		.loc 1 344 0 is_stmt 1
 1875 03e4 0023     		movs	r3, #0
 1876 03e6 A7F8D630 		strh	r3, [r7, #214]	@ movhi
 345:.\main.c      **** 	    while (i < num_map_nodes) {
 1877              		.loc 1 345 0
 1878 03ea 7FE0     		b	.L62
 1879              	.L64:
 1880              	.LBB6:
 346:.\main.c      **** 			uint8 node_1[2] = {nodes[i][0], nodes[i][1]};
 1881              		.loc 1 346 0
 1882 03ec B7F8D620 		ldrh	r2, [r7, #214]
 1883 03f0 D7F8B830 		ldr	r3, [r7, #184]
 1884 03f4 13F81230 		ldrb	r3, [r3, r2, lsl #1]	@ zero_extendqisi2
 1885 03f8 87F87030 		strb	r3, [r7, #112]
 1886 03fc B7F8D630 		ldrh	r3, [r7, #214]
 1887 0400 D7F8B820 		ldr	r2, [r7, #184]
 1888 0404 5B00     		lsls	r3, r3, #1
 1889 0406 1344     		add	r3, r3, r2
 1890 0408 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1891 040a 87F87130 		strb	r3, [r7, #113]
 347:.\main.c      **** 			uint8 node_2[2] = {nodes[cur_node_index][0], nodes[cur_node_index][1]};
 1892              		.loc 1 347 0
 1893 040e D7F8B830 		ldr	r3, [r7, #184]
 1894 0412 D7F88420 		ldr	r2, [r7, #132]
 1895 0416 13F81230 		ldrb	r3, [r3, r2, lsl #1]	@ zero_extendqisi2
 1896 041a 87F86C30 		strb	r3, [r7, #108]
 1897 041e D7F8B820 		ldr	r2, [r7, #184]
 1898 0422 D7F88430 		ldr	r3, [r7, #132]
 1899 0426 5B00     		lsls	r3, r3, #1
 1900 0428 1344     		add	r3, r3, r2
 1901 042a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1902 042c 87F86D30 		strb	r3, [r7, #109]
 348:.\main.c      **** 	        if (!cons[i] && is_next_to(node_1, node_2)) {
 1903              		.loc 1 348 0
 1904 0430 B7F8D630 		ldrh	r3, [r7, #214]
 1905 0434 D7F8B020 		ldr	r2, [r7, #176]
 1906 0438 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1907 043a 002B     		cmp	r3, #0
 1908 043c 51D1     		bne	.L63
 1909              		.loc 1 348 0 is_stmt 0 discriminator 1
 1910 043e 07F17002 		add	r2, r7, #112
 1911 0442 07F16C03 		add	r3, r7, #108
 1912 0446 1046     		mov	r0, r2
 1913 0448 1946     		mov	r1, r3
 1914 044a FFF7FEFF 		bl	is_next_to
 1915 044e 0346     		mov	r3, r0
 1916 0450 002B     		cmp	r3, #0
 1917 0452 46D0     		beq	.L63
 349:.\main.c      **** 	            dist[i] = 1 + dist[cur_node_index];     // weight of dist between nodes is 1
 1918              		.loc 1 349 0 is_stmt 1
 1919 0454 B7F8D620 		ldrh	r2, [r7, #214]
 1920 0458 D7F8A030 		ldr	r3, [r7, #160]
 1921 045c D7F88410 		ldr	r1, [r7, #132]
 1922 0460 33F81130 		ldrh	r3, [r3, r1, lsl #1]
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 41


 1923 0464 0133     		adds	r3, r3, #1
 1924 0466 99B2     		uxth	r1, r3
 1925 0468 D7F8A030 		ldr	r3, [r7, #160]
 1926 046c 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
 350:.\main.c      **** 	            d_h[i] = dist[i] + heurst[i];
 1927              		.loc 1 350 0
 1928 0470 B7F8D640 		ldrh	r4, [r7, #214]
 1929 0474 B7F8D620 		ldrh	r2, [r7, #214]
 1930 0478 D7F8A030 		ldr	r3, [r7, #160]
 1931 047c 33F81230 		ldrh	r3, [r3, r2, lsl #1]
 1932 0480 1846     		mov	r0, r3
 1933 0482 FFF7FEFF 		bl	__aeabi_i2f
 1934 0486 0146     		mov	r1, r0
 1935 0488 B7F8D620 		ldrh	r2, [r7, #214]
 1936 048c D7F8A830 		ldr	r3, [r7, #168]
 1937 0490 53F82230 		ldr	r3, [r3, r2, lsl #2]	@ float
 1938 0494 0846     		mov	r0, r1
 1939 0496 1946     		mov	r1, r3
 1940 0498 FFF7FEFF 		bl	__aeabi_fadd
 1941 049c 0346     		mov	r3, r0
 1942 049e 1A46     		mov	r2, r3
 1943 04a0 D7F89830 		ldr	r3, [r7, #152]
 1944 04a4 43F82420 		str	r2, [r3, r4, lsl #2]	@ float
 351:.\main.c      **** 	            prev[i][0] = nodes[cur_node_index][0];
 1945              		.loc 1 351 0
 1946 04a8 B7F8D620 		ldrh	r2, [r7, #214]
 1947 04ac D7F8B830 		ldr	r3, [r7, #184]
 1948 04b0 D7F88410 		ldr	r1, [r7, #132]
 1949 04b4 13F81130 		ldrb	r3, [r3, r1, lsl #1]	@ zero_extendqisi2
 1950 04b8 D9B2     		uxtb	r1, r3
 1951 04ba D7F89030 		ldr	r3, [r7, #144]
 1952 04be 03F81210 		strb	r1, [r3, r2, lsl #1]
 352:.\main.c      **** 	            prev[i][1] = nodes[cur_node_index][1];
 1953              		.loc 1 352 0
 1954 04c2 B7F8D610 		ldrh	r1, [r7, #214]
 1955 04c6 D7F8B820 		ldr	r2, [r7, #184]
 1956 04ca D7F88430 		ldr	r3, [r7, #132]
 1957 04ce 5B00     		lsls	r3, r3, #1
 1958 04d0 1344     		add	r3, r3, r2
 1959 04d2 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1960 04d4 D8B2     		uxtb	r0, r3
 1961 04d6 D7F89020 		ldr	r2, [r7, #144]
 1962 04da 4B00     		lsls	r3, r1, #1
 1963 04dc 1344     		add	r3, r3, r2
 1964 04de 0246     		mov	r2, r0
 1965 04e0 5A70     		strb	r2, [r3, #1]
 1966              	.L63:
 353:.\main.c      **** 	        }
 354:.\main.c      ****             i++;
 1967              		.loc 1 354 0
 1968 04e2 B7F8D630 		ldrh	r3, [r7, #214]
 1969 04e6 0133     		adds	r3, r3, #1
 1970 04e8 A7F8D630 		strh	r3, [r7, #214]	@ movhi
 1971              	.L62:
 1972              	.LBE6:
 345:.\main.c      **** 			uint8 node_1[2] = {nodes[i][0], nodes[i][1]};
 1973              		.loc 1 345 0
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 42


 1974 04ec 154B     		ldr	r3, .L79+8
 1975 04ee 1B88     		ldrh	r3, [r3]
 1976 04f0 B7F8D620 		ldrh	r2, [r7, #214]
 1977 04f4 9A42     		cmp	r2, r3
 1978 04f6 FFF479AF 		bcc	.L64
 355:.\main.c      **** 	    }
 356:.\main.c      **** 	    cons[cur_node_index] = 1;
 1979              		.loc 1 356 0
 1980 04fa D7F8B020 		ldr	r2, [r7, #176]
 1981 04fe D7F88430 		ldr	r3, [r7, #132]
 1982 0502 1344     		add	r3, r3, r2
 1983 0504 0122     		movs	r2, #1
 1984 0506 1A70     		strb	r2, [r3]
 357:.\main.c      **** 	    safety++;
 1985              		.loc 1 357 0
 1986 0508 B7F8CA30 		ldrh	r3, [r7, #202]
 1987 050c 0133     		adds	r3, r3, #1
 1988 050e A7F8CA30 		strh	r3, [r7, #202]	@ movhi
 1989              	.L60:
 1990              	.LBE5:
 336:.\main.c      ****         // find non-considered node with smallest path + heurst dist
 1991              		.loc 1 336 0
 1992 0512 0C4B     		ldr	r3, .L79+8
 1993 0514 1B88     		ldrh	r3, [r3]
 1994 0516 B7F8CA20 		ldrh	r2, [r7, #202]
 1995 051a 9A42     		cmp	r2, r3
 1996 051c FFF446AF 		bcc	.L65
 1997              	.L61:
 358:.\main.c      **** 	}
 359:.\main.c      **** 	
 360:.\main.c      **** 	// ensure des is reachable
 361:.\main.c      **** 	if (dist[des_index] == INF)
 1998              		.loc 1 361 0
 1999 0520 D7F8A030 		ldr	r3, [r7, #160]
 2000 0524 D7F88820 		ldr	r2, [r7, #136]
 2001 0528 33F81230 		ldrh	r3, [r3, r2, lsl #1]
 2002 052c 42F22832 		movw	r2, #9000
 2003 0530 9342     		cmp	r3, r2
 2004 0532 09D1     		bne	.L66
 362:.\main.c      **** 		return INF;
 2005              		.loc 1 362 0
 2006 0534 42F22833 		movw	r3, #9000
 2007 0538 CEE0     		b	.L59
 2008              	.L80:
 2009 053a 00BF     		.align	2
 2010              	.L79:
 2011 053c 00000000 		.word	map
 2012 0540 00A00C46 		.word	1175232512
 2013 0544 00000000 		.word	num_map_nodes
 2014              	.L66:
 363:.\main.c      **** 	
 364:.\main.c      ****     // initialise variables to retrieve the reversed path to des
 365:.\main.c      **** 	int8 reverse_path[num_map_nodes][2];
 2015              		.loc 1 365 0
 2016 0548 664B     		ldr	r3, .L81
 2017 054a 1988     		ldrh	r1, [r3]
 2018 054c 6B46     		mov	r3, sp
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 43


 2019 054e 1C46     		mov	r4, r3
 2020 0550 0B46     		mov	r3, r1
 2021 0552 013B     		subs	r3, r3, #1
 2022 0554 C7F88030 		str	r3, [r7, #128]
 2023 0558 8AB2     		uxth	r2, r1
 2024 055a 4FF00003 		mov	r3, #0
 2025 055e 1801     		lsls	r0, r3, #4
 2026 0560 F860     		str	r0, [r7, #12]
 2027 0562 F868     		ldr	r0, [r7, #12]
 2028 0564 40EA1270 		orr	r0, r0, r2, lsr #28
 2029 0568 F860     		str	r0, [r7, #12]
 2030 056a 1301     		lsls	r3, r2, #4
 2031 056c BB60     		str	r3, [r7, #8]
 2032 056e 8AB2     		uxth	r2, r1
 2033 0570 4FF00003 		mov	r3, #0
 2034 0574 1801     		lsls	r0, r3, #4
 2035 0576 7860     		str	r0, [r7, #4]
 2036 0578 7868     		ldr	r0, [r7, #4]
 2037 057a 40EA1270 		orr	r0, r0, r2, lsr #28
 2038 057e 7860     		str	r0, [r7, #4]
 2039 0580 1301     		lsls	r3, r2, #4
 2040 0582 3B60     		str	r3, [r7]
 2041 0584 0B46     		mov	r3, r1
 2042 0586 5B00     		lsls	r3, r3, #1
 2043 0588 0733     		adds	r3, r3, #7
 2044 058a DB08     		lsrs	r3, r3, #3
 2045 058c DB00     		lsls	r3, r3, #3
 2046 058e ADEB030D 		sub	sp, sp, r3
 2047 0592 6B46     		mov	r3, sp
 2048 0594 0033     		adds	r3, r3, #0
 2049 0596 FB67     		str	r3, [r7, #124]
 366:.\main.c      **** 	init_path(reverse_path, num_map_nodes);
 2050              		.loc 1 366 0
 2051 0598 FA6F     		ldr	r2, [r7, #124]
 2052 059a 524B     		ldr	r3, .L81
 2053 059c 1B88     		ldrh	r3, [r3]
 2054 059e 1046     		mov	r0, r2
 2055 05a0 1946     		mov	r1, r3
 2056 05a2 FFF7FEFF 		bl	init_path
 367:.\main.c      **** 	uint8 cur_path_node[2] = {des[0], des[1]};
 2057              		.loc 1 367 0
 2058 05a6 3B6E     		ldr	r3, [r7, #96]
 2059 05a8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2060 05aa 87F87430 		strb	r3, [r7, #116]
 2061 05ae 3B6E     		ldr	r3, [r7, #96]
 2062 05b0 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2063 05b2 87F87530 		strb	r3, [r7, #117]
 368:.\main.c      **** 	
 369:.\main.c      ****     // Start at the des node and add the prev node to reversed path
 370:.\main.c      ****     // until pos node is reached.
 371:.\main.c      ****     // while loop should never run more times than there are nodes
 372:.\main.c      **** 	i = 0;
 2064              		.loc 1 372 0
 2065 05b6 0023     		movs	r3, #0
 2066 05b8 A7F8D630 		strh	r3, [r7, #214]	@ movhi
 373:.\main.c      **** 	safety = 0;
 2067              		.loc 1 373 0
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 44


 2068 05bc 0023     		movs	r3, #0
 2069 05be A7F8CA30 		strh	r3, [r7, #202]	@ movhi
 374:.\main.c      **** 	while (safety < num_map_nodes) {
 2070              		.loc 1 374 0
 2071 05c2 43E0     		b	.L67
 2072              	.L70:
 2073              	.LBB7:
 375:.\main.c      **** 		// don't include pos node in path as it is already reached
 376:.\main.c      **** 		if (cur_path_node[0] == pos[0] && cur_path_node[1] == pos[1])
 2074              		.loc 1 376 0
 2075 05c4 97F87420 		ldrb	r2, [r7, #116]	@ zero_extendqisi2
 2076 05c8 7B6E     		ldr	r3, [r7, #100]
 2077 05ca 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2078 05cc 9A42     		cmp	r2, r3
 2079 05ce 07D1     		bne	.L68
 2080              		.loc 1 376 0 is_stmt 0 discriminator 1
 2081 05d0 97F87520 		ldrb	r2, [r7, #117]	@ zero_extendqisi2
 2082 05d4 7B6E     		ldr	r3, [r7, #100]
 2083 05d6 0133     		adds	r3, r3, #1
 2084 05d8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2085 05da 9A42     		cmp	r2, r3
 2086 05dc 00D1     		bne	.L68
 377:.\main.c      **** 	        break;
 2087              		.loc 1 377 0 is_stmt 1
 2088 05de 3BE0     		b	.L69
 2089              	.L68:
 378:.\main.c      **** 		
 379:.\main.c      ****         // add current path node to reverse path
 380:.\main.c      ****         reverse_path[i][0] = cur_path_node[0];
 2090              		.loc 1 380 0
 2091 05e0 B7F8D620 		ldrh	r2, [r7, #214]
 2092 05e4 97F87430 		ldrb	r3, [r7, #116]	@ zero_extendqisi2
 2093 05e8 D9B2     		uxtb	r1, r3
 2094 05ea FB6F     		ldr	r3, [r7, #124]
 2095 05ec 03F81210 		strb	r1, [r3, r2, lsl #1]
 381:.\main.c      ****         reverse_path[i][1] = cur_path_node[1];
 2096              		.loc 1 381 0
 2097 05f0 B7F8D630 		ldrh	r3, [r7, #214]
 2098 05f4 97F87520 		ldrb	r2, [r7, #117]	@ zero_extendqisi2
 2099 05f8 D1B2     		uxtb	r1, r2
 2100 05fa FA6F     		ldr	r2, [r7, #124]
 2101 05fc 5B00     		lsls	r3, r3, #1
 2102 05fe 1344     		add	r3, r3, r2
 2103 0600 0A46     		mov	r2, r1
 2104 0602 5A70     		strb	r2, [r3, #1]
 382:.\main.c      **** 		
 383:.\main.c      ****         // set the prev node of current node as current node
 384:.\main.c      ****         int32 cur_node_index = get_node_index(cur_path_node, nodes);
 2105              		.loc 1 384 0
 2106 0604 D7F8B830 		ldr	r3, [r7, #184]
 2107 0608 07F17402 		add	r2, r7, #116
 2108 060c 1046     		mov	r0, r2
 2109 060e 1946     		mov	r1, r3
 2110 0610 FFF7FEFF 		bl	get_node_index
 2111 0614 B867     		str	r0, [r7, #120]
 385:.\main.c      ****         cur_path_node[0] = prev[cur_node_index][0];
 2112              		.loc 1 385 0
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 45


 2113 0616 D7F89030 		ldr	r3, [r7, #144]
 2114 061a BA6F     		ldr	r2, [r7, #120]
 2115 061c 13F81230 		ldrb	r3, [r3, r2, lsl #1]	@ zero_extendqisi2
 2116 0620 DBB2     		uxtb	r3, r3
 2117 0622 87F87430 		strb	r3, [r7, #116]
 386:.\main.c      ****         cur_path_node[1] = prev[cur_node_index][1];
 2118              		.loc 1 386 0
 2119 0626 D7F89020 		ldr	r2, [r7, #144]
 2120 062a BB6F     		ldr	r3, [r7, #120]
 2121 062c 5B00     		lsls	r3, r3, #1
 2122 062e 1344     		add	r3, r3, r2
 2123 0630 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2124 0632 DBB2     		uxtb	r3, r3
 2125 0634 87F87530 		strb	r3, [r7, #117]
 387:.\main.c      **** 	    
 388:.\main.c      **** 	    i++;
 2126              		.loc 1 388 0
 2127 0638 B7F8D630 		ldrh	r3, [r7, #214]
 2128 063c 0133     		adds	r3, r3, #1
 2129 063e A7F8D630 		strh	r3, [r7, #214]	@ movhi
 389:.\main.c      **** 	    safety++;
 2130              		.loc 1 389 0
 2131 0642 B7F8CA30 		ldrh	r3, [r7, #202]
 2132 0646 0133     		adds	r3, r3, #1
 2133 0648 A7F8CA30 		strh	r3, [r7, #202]	@ movhi
 2134              	.L67:
 2135              	.LBE7:
 374:.\main.c      **** 		// don't include pos node in path as it is already reached
 2136              		.loc 1 374 0
 2137 064c 254B     		ldr	r3, .L81
 2138 064e 1B88     		ldrh	r3, [r3]
 2139 0650 B7F8CA20 		ldrh	r2, [r7, #202]
 2140 0654 9A42     		cmp	r2, r3
 2141 0656 B5D3     		bcc	.L70
 2142              	.L69:
 390:.\main.c      **** 	}
 391:.\main.c      **** 	// if pos == des path is zero
 392:.\main.c      **** 	if (!i)
 2143              		.loc 1 392 0
 2144 0658 B7F8D630 		ldrh	r3, [r7, #214]
 2145 065c 002B     		cmp	r3, #0
 2146 065e 01D1     		bne	.L71
 393:.\main.c      **** 		return 0;
 2147              		.loc 1 393 0
 2148 0660 0023     		movs	r3, #0
 2149 0662 38E0     		b	.L72
 2150              	.L71:
 394:.\main.c      **** 	
 395:.\main.c      **** 	// traverse backwards through the reverse path to generate path and
 396:.\main.c      ****     // determine length of path
 397:.\main.c      ****     int32 cur_node_index = num_map_nodes - 1;
 2151              		.loc 1 397 0
 2152 0664 1F4B     		ldr	r3, .L81
 2153 0666 1B88     		ldrh	r3, [r3]
 2154 0668 013B     		subs	r3, r3, #1
 2155 066a C7F8C430 		str	r3, [r7, #196]
 398:.\main.c      **** 	uint16 path_length = 0;
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 46


 2156              		.loc 1 398 0
 2157 066e 0023     		movs	r3, #0
 2158 0670 A7F8C230 		strh	r3, [r7, #194]	@ movhi
 399:.\main.c      **** 	// copy all non -1 elements in reverse path backwards to path
 400:.\main.c      **** 	while (cur_node_index >= 0) {
 2159              		.loc 1 400 0
 2160 0674 29E0     		b	.L73
 2161              	.L75:
 401:.\main.c      **** 		if (reverse_path[cur_node_index][0] != -1) {
 2162              		.loc 1 401 0
 2163 0676 FB6F     		ldr	r3, [r7, #124]
 2164 0678 D7F8C420 		ldr	r2, [r7, #196]
 2165 067c 13F81230 		ldrb	r3, [r3, r2, lsl #1]	@ zero_extendqisi2
 2166 0680 5BB2     		sxtb	r3, r3
 2167 0682 B3F1FF3F 		cmp	r3, #-1
 2168 0686 1BD0     		beq	.L74
 402:.\main.c      **** 			path[path_length][0] = reverse_path[cur_node_index][0];
 2169              		.loc 1 402 0
 2170 0688 B7F8C230 		ldrh	r3, [r7, #194]
 2171 068c 5B00     		lsls	r3, r3, #1
 2172 068e FA6D     		ldr	r2, [r7, #92]
 2173 0690 1344     		add	r3, r3, r2
 2174 0692 FA6F     		ldr	r2, [r7, #124]
 2175 0694 D7F8C410 		ldr	r1, [r7, #196]
 2176 0698 12F81120 		ldrb	r2, [r2, r1, lsl #1]	@ zero_extendqisi2
 2177 069c 1A70     		strb	r2, [r3]
 403:.\main.c      **** 			path[path_length][1] = reverse_path[cur_node_index][1];
 2178              		.loc 1 403 0
 2179 069e B7F8C230 		ldrh	r3, [r7, #194]
 2180 06a2 5B00     		lsls	r3, r3, #1
 2181 06a4 FA6D     		ldr	r2, [r7, #92]
 2182 06a6 1A44     		add	r2, r2, r3
 2183 06a8 F96F     		ldr	r1, [r7, #124]
 2184 06aa D7F8C430 		ldr	r3, [r7, #196]
 2185 06ae 5B00     		lsls	r3, r3, #1
 2186 06b0 0B44     		add	r3, r3, r1
 2187 06b2 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2188 06b4 5370     		strb	r3, [r2, #1]
 404:.\main.c      **** 			path_length++;
 2189              		.loc 1 404 0
 2190 06b6 B7F8C230 		ldrh	r3, [r7, #194]
 2191 06ba 0133     		adds	r3, r3, #1
 2192 06bc A7F8C230 		strh	r3, [r7, #194]	@ movhi
 2193              	.L74:
 405:.\main.c      **** 		}
 406:.\main.c      ****         cur_node_index--;
 2194              		.loc 1 406 0
 2195 06c0 D7F8C430 		ldr	r3, [r7, #196]
 2196 06c4 013B     		subs	r3, r3, #1
 2197 06c6 C7F8C430 		str	r3, [r7, #196]
 2198              	.L73:
 400:.\main.c      **** 		if (reverse_path[cur_node_index][0] != -1) {
 2199              		.loc 1 400 0
 2200 06ca D7F8C430 		ldr	r3, [r7, #196]
 2201 06ce 002B     		cmp	r3, #0
 2202 06d0 D1DA     		bge	.L75
 407:.\main.c      **** 	}
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 47


 408:.\main.c      **** 	
 409:.\main.c      **** 	return path_length;
 2203              		.loc 1 409 0
 2204 06d2 B7F8C230 		ldrh	r3, [r7, #194]
 2205              	.L72:
 2206 06d6 A546     		mov	sp, r4
 2207              	.L59:
 2208 06d8 B546     		mov	sp, r6
 410:.\main.c      **** }
 2209              		.loc 1 410 0 discriminator 1
 2210 06da 1846     		mov	r0, r3
 2211 06dc DC37     		adds	r7, r7, #220
 2212              		.cfi_def_cfa_offset 36
 2213 06de BD46     		mov	sp, r7
 2214              		.cfi_def_cfa_register 13
 2215              		@ sp needed
 2216 06e0 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 2217              	.L82:
 2218              		.align	2
 2219              	.L81:
 2220 06e4 00000000 		.word	num_map_nodes
 2221              		.cfi_endproc
 2222              	.LFE70:
 2223              		.size	find_shortest_path, .-find_shortest_path
 2224              		.section	.text.find_traverse_path,"ax",%progbits
 2225              		.align	2
 2226              		.global	find_traverse_path
 2227              		.thumb
 2228              		.thumb_func
 2229              		.type	find_traverse_path, %function
 2230              	find_traverse_path:
 2231              	.LFB71:
 411:.\main.c      **** //* ========================================
 412:.\main.c      **** /*
 413:.\main.c      **** Generate the map traversal path from a starting position using a
 414:.\main.c      **** combination of breadth-first and A* path finding algorithms to
 415:.\main.c      **** ensure each map node is visited and return the path distance.
 416:.\main.c      **** */
 417:.\main.c      **** uint16 find_traverse_path(uint8 pos[2], int8 path[][2])
 418:.\main.c      **** {
 2232              		.loc 1 418 0
 2233              		.cfi_startproc
 2234              		@ args = 0, pretend = 0, frame = 352
 2235              		@ frame_needed = 1, uses_anonymous_args = 0
 2236 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 2237              		.cfi_def_cfa_offset 36
 2238              		.cfi_offset 4, -36
 2239              		.cfi_offset 5, -32
 2240              		.cfi_offset 6, -28
 2241              		.cfi_offset 7, -24
 2242              		.cfi_offset 8, -20
 2243              		.cfi_offset 9, -16
 2244              		.cfi_offset 10, -12
 2245              		.cfi_offset 11, -8
 2246              		.cfi_offset 14, -4
 2247 0004 D9B0     		sub	sp, sp, #356
 2248              		.cfi_def_cfa_offset 392
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 48


 2249 0006 00AF     		add	r7, sp, #0
 2250              		.cfi_def_cfa_register 7
 2251 0008 07F10C03 		add	r3, r7, #12
 2252 000c 1860     		str	r0, [r3]
 2253 000e 07F10803 		add	r3, r7, #8
 2254 0012 1960     		str	r1, [r3]
 419:.\main.c      ****     // init traversed map to be a copy of map
 420:.\main.c      **** 	int8 traversed_map[ROW][COL];
 421:.\main.c      ****     uint8 r, c;
 422:.\main.c      ****     for (r = 0; r < ROW; r++) {
 2255              		.loc 1 422 0
 2256 0014 0023     		movs	r3, #0
 2257 0016 87F85F31 		strb	r3, [r7, #351]
 2258 001a 2FE0     		b	.L84
 2259              	.L87:
 423:.\main.c      **** 		for (c = 0; c < COL; c++) {
 2260              		.loc 1 423 0
 2261 001c 0023     		movs	r3, #0
 2262 001e 87F85E31 		strb	r3, [r7, #350]
 2263 0022 22E0     		b	.L85
 2264              	.L86:
 424:.\main.c      **** 			traversed_map[r][c] = map[r][c];
 2265              		.loc 1 424 0 discriminator 3
 2266 0024 97F85F01 		ldrb	r0, [r7, #351]	@ zero_extendqisi2
 2267 0028 97F85E61 		ldrb	r6, [r7, #350]	@ zero_extendqisi2
 2268 002c 97F85F21 		ldrb	r2, [r7, #351]	@ zero_extendqisi2
 2269 0030 97F85E11 		ldrb	r1, [r7, #350]	@ zero_extendqisi2
 2270 0034 DFF858E2 		ldr	lr, .L109+8
 2271 0038 1346     		mov	r3, r2
 2272 003a DB00     		lsls	r3, r3, #3
 2273 003c 1344     		add	r3, r3, r2
 2274 003e 5B00     		lsls	r3, r3, #1
 2275 0040 1344     		add	r3, r3, r2
 2276 0042 0B44     		add	r3, r3, r1
 2277 0044 5EF82330 		ldr	r3, [lr, r3, lsl #2]
 2278 0048 D9B2     		uxtb	r1, r3
 2279 004a 07F11802 		add	r2, r7, #24
 2280 004e 0346     		mov	r3, r0
 2281 0050 DB00     		lsls	r3, r3, #3
 2282 0052 0344     		add	r3, r3, r0
 2283 0054 5B00     		lsls	r3, r3, #1
 2284 0056 0344     		add	r3, r3, r0
 2285 0058 3344     		add	r3, r3, r6
 2286 005a 1344     		add	r3, r3, r2
 2287 005c 0A46     		mov	r2, r1
 2288 005e 1A70     		strb	r2, [r3]
 423:.\main.c      **** 		for (c = 0; c < COL; c++) {
 2289              		.loc 1 423 0 discriminator 3
 2290 0060 97F85E31 		ldrb	r3, [r7, #350]	@ zero_extendqisi2
 2291 0064 0133     		adds	r3, r3, #1
 2292 0066 87F85E31 		strb	r3, [r7, #350]
 2293              	.L85:
 423:.\main.c      **** 		for (c = 0; c < COL; c++) {
 2294              		.loc 1 423 0 is_stmt 0 discriminator 1
 2295 006a 97F85E31 		ldrb	r3, [r7, #350]	@ zero_extendqisi2
 2296 006e 122B     		cmp	r3, #18
 2297 0070 D8D9     		bls	.L86
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 49


 422:.\main.c      **** 		for (c = 0; c < COL; c++) {
 2298              		.loc 1 422 0 is_stmt 1 discriminator 2
 2299 0072 97F85F31 		ldrb	r3, [r7, #351]	@ zero_extendqisi2
 2300 0076 0133     		adds	r3, r3, #1
 2301 0078 87F85F31 		strb	r3, [r7, #351]
 2302              	.L84:
 422:.\main.c      **** 		for (c = 0; c < COL; c++) {
 2303              		.loc 1 422 0 is_stmt 0 discriminator 1
 2304 007c 97F85F31 		ldrb	r3, [r7, #351]	@ zero_extendqisi2
 2305 0080 0E2B     		cmp	r3, #14
 2306 0082 CBD9     		bls	.L87
 425:.\main.c      ****         }
 426:.\main.c      ****     }
 427:.\main.c      ****     // set starting pos as traversed
 428:.\main.c      **** 	traversed_map[pos[0]][pos[1]] = -1;
 2307              		.loc 1 428 0 is_stmt 1
 2308 0084 07F10C03 		add	r3, r7, #12
 2309 0088 1B68     		ldr	r3, [r3]
 2310 008a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2311 008c 1A46     		mov	r2, r3
 2312 008e 07F10C03 		add	r3, r7, #12
 2313 0092 1B68     		ldr	r3, [r3]
 2314 0094 0133     		adds	r3, r3, #1
 2315 0096 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2316 0098 1846     		mov	r0, r3
 2317 009a 07F11801 		add	r1, r7, #24
 2318 009e 1346     		mov	r3, r2
 2319 00a0 DB00     		lsls	r3, r3, #3
 2320 00a2 1344     		add	r3, r3, r2
 2321 00a4 5B00     		lsls	r3, r3, #1
 2322 00a6 1344     		add	r3, r3, r2
 2323 00a8 0344     		add	r3, r3, r0
 2324 00aa 0B44     		add	r3, r3, r1
 2325 00ac FF22     		movs	r2, #255
 2326 00ae 1A70     		strb	r2, [r3]
 429:.\main.c      ****     
 430:.\main.c      ****     // set initial orientation
 431:.\main.c      **** 	uint8 current_orientation = robot_orientation;
 2327              		.loc 1 431 0
 2328 00b0 754B     		ldr	r3, .L109
 2329 00b2 1B78     		ldrb	r3, [r3]
 2330 00b4 87F85D31 		strb	r3, [r7, #349]
 432:.\main.c      **** 	int8* traverse_orientation = &orientation[current_orientation][0];
 2331              		.loc 1 432 0
 2332 00b8 97F85D31 		ldrb	r3, [r7, #349]	@ zero_extendqisi2
 2333 00bc 5B00     		lsls	r3, r3, #1
 2334 00be 734A     		ldr	r2, .L109+4
 2335 00c0 1344     		add	r3, r3, r2
 2336 00c2 C7F85831 		str	r3, [r7, #344]
 433:.\main.c      **** 	uint8 original_orientation = UNKNOWN;
 2337              		.loc 1 433 0
 2338 00c6 0A23     		movs	r3, #10
 2339 00c8 87F85731 		strb	r3, [r7, #343]
 434:.\main.c      **** 	#define NEXT_TRAVERSE_ROW pos[0]+(*traverse_orientation)
 435:.\main.c      **** 	#define NEXT_TRAVERSE_COL pos[1]+(*(traverse_orientation+1))
 436:.\main.c      ****     
 437:.\main.c      ****     uint16 path_length = 0;
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 50


 2340              		.loc 1 437 0
 2341 00cc 0023     		movs	r3, #0
 2342 00ce A7F85431 		strh	r3, [r7, #340]	@ movhi
 438:.\main.c      **** 	uint16 safety = 0;
 2343              		.loc 1 438 0
 2344 00d2 0023     		movs	r3, #0
 2345 00d4 A7F85231 		strh	r3, [r7, #338]	@ movhi
 439:.\main.c      **** 	while (safety < 500) {
 2346              		.loc 1 439 0
 2347 00d8 0EE2     		b	.L88
 2348              	.L107:
 440:.\main.c      **** 		// if next node in current orientation is empty and not traversed
 441:.\main.c      **** 		if (!traversed_map[NEXT_TRAVERSE_ROW][NEXT_TRAVERSE_COL]) {
 2349              		.loc 1 441 0
 2350 00da 07F10C03 		add	r3, r7, #12
 2351 00de 1B68     		ldr	r3, [r3]
 2352 00e0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2353 00e2 1A46     		mov	r2, r3
 2354 00e4 D7F85831 		ldr	r3, [r7, #344]
 2355 00e8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2356 00ea 5BB2     		sxtb	r3, r3
 2357 00ec 1A44     		add	r2, r2, r3
 2358 00ee 07F10C03 		add	r3, r7, #12
 2359 00f2 1B68     		ldr	r3, [r3]
 2360 00f4 0133     		adds	r3, r3, #1
 2361 00f6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2362 00f8 1946     		mov	r1, r3
 2363 00fa D7F85831 		ldr	r3, [r7, #344]
 2364 00fe 0133     		adds	r3, r3, #1
 2365 0100 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2366 0102 5BB2     		sxtb	r3, r3
 2367 0104 C818     		adds	r0, r1, r3
 2368 0106 07F11801 		add	r1, r7, #24
 2369 010a 1346     		mov	r3, r2
 2370 010c DB00     		lsls	r3, r3, #3
 2371 010e 1344     		add	r3, r3, r2
 2372 0110 5B00     		lsls	r3, r3, #1
 2373 0112 1344     		add	r3, r3, r2
 2374 0114 0344     		add	r3, r3, r0
 2375 0116 0B44     		add	r3, r3, r1
 2376 0118 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2377 011a 002B     		cmp	r3, #0
 2378 011c 58D1     		bne	.L89
 442:.\main.c      ****             // move to next node and set current node as traversed
 443:.\main.c      **** 			pos[0] = NEXT_TRAVERSE_ROW;
 2379              		.loc 1 443 0
 2380 011e 07F10C03 		add	r3, r7, #12
 2381 0122 1B68     		ldr	r3, [r3]
 2382 0124 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2383 0126 D7F85831 		ldr	r3, [r7, #344]
 2384 012a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2385 012c DBB2     		uxtb	r3, r3
 2386 012e 1344     		add	r3, r3, r2
 2387 0130 DAB2     		uxtb	r2, r3
 2388 0132 07F10C03 		add	r3, r7, #12
 2389 0136 1B68     		ldr	r3, [r3]
 2390 0138 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 51


 444:.\main.c      **** 			pos[1] = NEXT_TRAVERSE_COL;
 2391              		.loc 1 444 0
 2392 013a 07F10C03 		add	r3, r7, #12
 2393 013e 1B68     		ldr	r3, [r3]
 2394 0140 0133     		adds	r3, r3, #1
 2395 0142 07F10C02 		add	r2, r7, #12
 2396 0146 1268     		ldr	r2, [r2]
 2397 0148 0132     		adds	r2, r2, #1
 2398 014a 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 2399 014c D7F85821 		ldr	r2, [r7, #344]
 2400 0150 0132     		adds	r2, r2, #1
 2401 0152 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 2402 0154 D2B2     		uxtb	r2, r2
 2403 0156 0A44     		add	r2, r2, r1
 2404 0158 D2B2     		uxtb	r2, r2
 2405 015a 1A70     		strb	r2, [r3]
 445:.\main.c      **** 			traversed_map[pos[0]][pos[1]] = -1;
 2406              		.loc 1 445 0
 2407 015c 07F10C03 		add	r3, r7, #12
 2408 0160 1B68     		ldr	r3, [r3]
 2409 0162 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2410 0164 1A46     		mov	r2, r3
 2411 0166 07F10C03 		add	r3, r7, #12
 2412 016a 1B68     		ldr	r3, [r3]
 2413 016c 0133     		adds	r3, r3, #1
 2414 016e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2415 0170 1846     		mov	r0, r3
 2416 0172 07F11801 		add	r1, r7, #24
 2417 0176 1346     		mov	r3, r2
 2418 0178 DB00     		lsls	r3, r3, #3
 2419 017a 1344     		add	r3, r3, r2
 2420 017c 5B00     		lsls	r3, r3, #1
 2421 017e 1344     		add	r3, r3, r2
 2422 0180 0344     		add	r3, r3, r0
 2423 0182 0B44     		add	r3, r3, r1
 2424 0184 FF22     		movs	r2, #255
 2425 0186 1A70     		strb	r2, [r3]
 446:.\main.c      ****             
 447:.\main.c      **** 			// add node moved to to path
 448:.\main.c      **** 			path[path_length][0] = pos[0];
 2426              		.loc 1 448 0
 2427 0188 B7F85431 		ldrh	r3, [r7, #340]
 2428 018c 5B00     		lsls	r3, r3, #1
 2429 018e 07F10802 		add	r2, r7, #8
 2430 0192 1268     		ldr	r2, [r2]
 2431 0194 1344     		add	r3, r3, r2
 2432 0196 07F10C02 		add	r2, r7, #12
 2433 019a 1268     		ldr	r2, [r2]
 2434 019c 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 2435 019e D2B2     		uxtb	r2, r2
 2436 01a0 1A70     		strb	r2, [r3]
 449:.\main.c      **** 			path[path_length][1] = pos[1];
 2437              		.loc 1 449 0
 2438 01a2 B7F85431 		ldrh	r3, [r7, #340]
 2439 01a6 5B00     		lsls	r3, r3, #1
 2440 01a8 07F10802 		add	r2, r7, #8
 2441 01ac 1268     		ldr	r2, [r2]
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 52


 2442 01ae 1344     		add	r3, r3, r2
 2443 01b0 07F10C02 		add	r2, r7, #12
 2444 01b4 1268     		ldr	r2, [r2]
 2445 01b6 0132     		adds	r2, r2, #1
 2446 01b8 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 2447 01ba D2B2     		uxtb	r2, r2
 2448 01bc 5A70     		strb	r2, [r3, #1]
 450:.\main.c      **** 			path_length++;
 2449              		.loc 1 450 0
 2450 01be B7F85431 		ldrh	r3, [r7, #340]
 2451 01c2 0133     		adds	r3, r3, #1
 2452 01c4 A7F85431 		strh	r3, [r7, #340]	@ movhi
 451:.\main.c      **** 			
 452:.\main.c      **** 			original_orientation = UNKNOWN;
 2453              		.loc 1 452 0
 2454 01c8 0A23     		movs	r3, #10
 2455 01ca 87F85731 		strb	r3, [r7, #343]
 2456 01ce 8EE1     		b	.L90
 2457              	.L89:
 453:.\main.c      **** 		}
 454:.\main.c      **** 		// if next point is wall
 455:.\main.c      **** 		else {
 456:.\main.c      ****             // if other orientations not considered
 457:.\main.c      **** 			if (original_orientation == UNKNOWN) {
 2458              		.loc 1 457 0
 2459 01d0 97F85731 		ldrb	r3, [r7, #343]	@ zero_extendqisi2
 2460 01d4 0A2B     		cmp	r3, #10
 2461 01d6 18D1     		bne	.L91
 458:.\main.c      **** 				// start turning process
 459:.\main.c      **** 				original_orientation = current_orientation;
 2462              		.loc 1 459 0
 2463 01d8 97F85D31 		ldrb	r3, [r7, #349]
 2464 01dc 87F85731 		strb	r3, [r7, #343]
 460:.\main.c      **** 				
 461:.\main.c      **** 				// change orientation to the right of current
 462:.\main.c      **** 				(current_orientation == LEFT) ? (current_orientation = UP) : (current_orientation++);
 2465              		.loc 1 462 0
 2466 01e0 97F85D31 		ldrb	r3, [r7, #349]	@ zero_extendqisi2
 2467 01e4 032B     		cmp	r3, #3
 2468 01e6 03D1     		bne	.L92
 2469              		.loc 1 462 0 is_stmt 0 discriminator 1
 2470 01e8 0023     		movs	r3, #0
 2471 01ea 87F85D31 		strb	r3, [r7, #349]
 2472 01ee 04E0     		b	.L93
 2473              	.L92:
 2474              		.loc 1 462 0 discriminator 2
 2475 01f0 97F85D31 		ldrb	r3, [r7, #349]	@ zero_extendqisi2
 2476 01f4 0133     		adds	r3, r3, #1
 2477 01f6 87F85D31 		strb	r3, [r7, #349]
 2478              	.L93:
 463:.\main.c      **** 				traverse_orientation = &orientation[current_orientation][0];
 2479              		.loc 1 463 0 is_stmt 1
 2480 01fa 97F85D31 		ldrb	r3, [r7, #349]	@ zero_extendqisi2
 2481 01fe 5B00     		lsls	r3, r3, #1
 2482 0200 224A     		ldr	r2, .L109+4
 2483 0202 1344     		add	r3, r3, r2
 2484 0204 C7F85831 		str	r3, [r7, #344]
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 53


 2485 0208 71E1     		b	.L90
 2486              	.L91:
 464:.\main.c      **** 			}
 465:.\main.c      ****             // if all other orientations not yet considered
 466:.\main.c      **** 			else if (original_orientation != current_orientation) {
 2487              		.loc 1 466 0
 2488 020a 97F85721 		ldrb	r2, [r7, #343]	@ zero_extendqisi2
 2489 020e 97F85D31 		ldrb	r3, [r7, #349]	@ zero_extendqisi2
 2490 0212 9A42     		cmp	r2, r3
 2491 0214 14D0     		beq	.L94
 467:.\main.c      **** 				// change orientation
 468:.\main.c      **** 				(current_orientation == LEFT) ? (current_orientation = UP) : (current_orientation++);
 2492              		.loc 1 468 0
 2493 0216 97F85D31 		ldrb	r3, [r7, #349]	@ zero_extendqisi2
 2494 021a 032B     		cmp	r3, #3
 2495 021c 03D1     		bne	.L95
 2496              		.loc 1 468 0 is_stmt 0 discriminator 1
 2497 021e 0023     		movs	r3, #0
 2498 0220 87F85D31 		strb	r3, [r7, #349]
 2499 0224 04E0     		b	.L96
 2500              	.L95:
 2501              		.loc 1 468 0 discriminator 2
 2502 0226 97F85D31 		ldrb	r3, [r7, #349]	@ zero_extendqisi2
 2503 022a 0133     		adds	r3, r3, #1
 2504 022c 87F85D31 		strb	r3, [r7, #349]
 2505              	.L96:
 469:.\main.c      **** 				traverse_orientation = &orientation[current_orientation][0];
 2506              		.loc 1 469 0 is_stmt 1
 2507 0230 97F85D31 		ldrb	r3, [r7, #349]	@ zero_extendqisi2
 2508 0234 5B00     		lsls	r3, r3, #1
 2509 0236 154A     		ldr	r2, .L109+4
 2510 0238 1344     		add	r3, r3, r2
 2511 023a C7F85831 		str	r3, [r7, #344]
 2512 023e 56E1     		b	.L90
 2513              	.L94:
 470:.\main.c      **** 			}
 471:.\main.c      ****             // if all other orienations considered
 472:.\main.c      **** 			else if (original_orientation == current_orientation) {
 2514              		.loc 1 472 0
 2515 0240 97F85721 		ldrb	r2, [r7, #343]	@ zero_extendqisi2
 2516 0244 97F85D31 		ldrb	r3, [r7, #349]	@ zero_extendqisi2
 2517 0248 9A42     		cmp	r2, r3
 2518 024a 40F05081 		bne	.L90
 2519              	.LBB8:
 473:.\main.c      **** 				// find nearest non-traversed node
 474:.\main.c      **** 				uint8 map_traversed = 1;
 2520              		.loc 1 474 0
 2521 024e 0123     		movs	r3, #1
 2522 0250 87F85131 		strb	r3, [r7, #337]
 475:.\main.c      **** 				uint16 min_dist = INF;
 2523              		.loc 1 475 0
 2524 0254 42F22833 		movw	r3, #9000
 2525 0258 A7F84E31 		strh	r3, [r7, #334]	@ movhi
 476:.\main.c      ****                 uint8 des[2];
 477:.\main.c      **** 				uint8 min_des[2] = {pos[0], pos[1]};
 2526              		.loc 1 477 0
 2527 025c 07F10C03 		add	r3, r7, #12
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 54


 2528 0260 1B68     		ldr	r3, [r3]
 2529 0262 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2530 0264 07F11003 		add	r3, r7, #16
 2531 0268 1A70     		strb	r2, [r3]
 2532 026a 07F10C03 		add	r3, r7, #12
 2533 026e 1B68     		ldr	r3, [r3]
 2534 0270 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 2535 0272 07F11003 		add	r3, r7, #16
 2536 0276 5A70     		strb	r2, [r3, #1]
 478:.\main.c      ****                 for (r = 0; r < ROW; r++) {
 2537              		.loc 1 478 0
 2538 0278 0023     		movs	r3, #0
 2539 027a 87F85F31 		strb	r3, [r7, #351]
 2540 027e 80E0     		b	.L97
 2541              	.L102:
 479:.\main.c      ****             		for (c = 0; c < COL; c++) {
 2542              		.loc 1 479 0
 2543 0280 0023     		movs	r3, #0
 2544 0282 87F85E31 		strb	r3, [r7, #350]
 2545 0286 73E0     		b	.L98
 2546              	.L110:
 2547              		.align	2
 2548              	.L109:
 2549 0288 00000000 		.word	robot_orientation
 2550 028c 00000000 		.word	orientation
 2551 0290 00000000 		.word	map
 2552              	.L101:
 480:.\main.c      ****                         // find shortest distance to every non-traversed node
 481:.\main.c      ****             			if (!traversed_map[r][c]) {
 2553              		.loc 1 481 0
 2554 0294 97F85F21 		ldrb	r2, [r7, #351]	@ zero_extendqisi2
 2555 0298 97F85E01 		ldrb	r0, [r7, #350]	@ zero_extendqisi2
 2556 029c 07F11801 		add	r1, r7, #24
 2557 02a0 1346     		mov	r3, r2
 2558 02a2 DB00     		lsls	r3, r3, #3
 2559 02a4 1344     		add	r3, r3, r2
 2560 02a6 5B00     		lsls	r3, r3, #1
 2561 02a8 1344     		add	r3, r3, r2
 2562 02aa 0344     		add	r3, r3, r0
 2563 02ac 0B44     		add	r3, r3, r1
 2564 02ae 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2565 02b0 002B     		cmp	r3, #0
 2566 02b2 58D1     		bne	.L99
 2567              	.LBB9:
 2568 02b4 6B46     		mov	r3, sp
 2569 02b6 1E46     		mov	r6, r3
 482:.\main.c      **** 							des[0] = r;
 2570              		.loc 1 482 0
 2571 02b8 07F11403 		add	r3, r7, #20
 2572 02bc 97F85F21 		ldrb	r2, [r7, #351]
 2573 02c0 1A70     		strb	r2, [r3]
 483:.\main.c      **** 							des[1] = c;
 2574              		.loc 1 483 0
 2575 02c2 07F11403 		add	r3, r7, #20
 2576 02c6 97F85E21 		ldrb	r2, [r7, #350]
 2577 02ca 5A70     		strb	r2, [r3, #1]
 484:.\main.c      ****                             int8 temp_path[num_map_nodes][2];
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 55


 2578              		.loc 1 484 0
 2579 02cc 914B     		ldr	r3, .L111
 2580 02ce 1988     		ldrh	r1, [r3]
 2581 02d0 0B46     		mov	r3, r1
 2582 02d2 013B     		subs	r3, r3, #1
 2583 02d4 C7F84831 		str	r3, [r7, #328]
 2584 02d8 8AB2     		uxth	r2, r1
 2585 02da 4FF00003 		mov	r3, #0
 2586 02de 1D01     		lsls	r5, r3, #4
 2587 02e0 45EA1275 		orr	r5, r5, r2, lsr #28
 2588 02e4 1401     		lsls	r4, r2, #4
 2589 02e6 8AB2     		uxth	r2, r1
 2590 02e8 4FF00003 		mov	r3, #0
 2591 02ec 4FEA0319 		lsl	r9, r3, #4
 2592 02f0 49EA1279 		orr	r9, r9, r2, lsr #28
 2593 02f4 4FEA0218 		lsl	r8, r2, #4
 2594 02f8 0B46     		mov	r3, r1
 2595 02fa 5B00     		lsls	r3, r3, #1
 2596 02fc 0733     		adds	r3, r3, #7
 2597 02fe DB08     		lsrs	r3, r3, #3
 2598 0300 DB00     		lsls	r3, r3, #3
 2599 0302 ADEB030D 		sub	sp, sp, r3
 2600 0306 6B46     		mov	r3, sp
 2601 0308 0033     		adds	r3, r3, #0
 2602 030a C7F84431 		str	r3, [r7, #324]
 485:.\main.c      **** 							init_path(temp_path, num_map_nodes);
 2603              		.loc 1 485 0
 2604 030e D7F84421 		ldr	r2, [r7, #324]
 2605 0312 804B     		ldr	r3, .L111
 2606 0314 1B88     		ldrh	r3, [r3]
 2607 0316 1046     		mov	r0, r2
 2608 0318 1946     		mov	r1, r3
 2609 031a FFF7FEFF 		bl	init_path
 486:.\main.c      **** 							uint16 dist = find_shortest_path(pos, des, temp_path);
 2610              		.loc 1 486 0
 2611 031e D7F84421 		ldr	r2, [r7, #324]
 2612 0322 07F10C03 		add	r3, r7, #12
 2613 0326 07F11401 		add	r1, r7, #20
 2614 032a 1868     		ldr	r0, [r3]
 2615 032c FFF7FEFF 		bl	find_shortest_path
 2616 0330 0346     		mov	r3, r0
 2617 0332 A7F84231 		strh	r3, [r7, #322]	@ movhi
 487:.\main.c      ****                             // retain closest node
 488:.\main.c      **** 							if (dist < min_dist) {
 2618              		.loc 1 488 0
 2619 0336 B7F84221 		ldrh	r2, [r7, #322]
 2620 033a B7F84E31 		ldrh	r3, [r7, #334]
 2621 033e 9A42     		cmp	r2, r3
 2622 0340 10D2     		bcs	.L100
 489:.\main.c      **** 								min_dist = dist;
 2623              		.loc 1 489 0
 2624 0342 B7F84231 		ldrh	r3, [r7, #322]	@ movhi
 2625 0346 A7F84E31 		strh	r3, [r7, #334]	@ movhi
 490:.\main.c      **** 								min_des[0] = r;
 2626              		.loc 1 490 0
 2627 034a 07F11003 		add	r3, r7, #16
 2628 034e 97F85F21 		ldrb	r2, [r7, #351]
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 56


 2629 0352 1A70     		strb	r2, [r3]
 491:.\main.c      **** 								min_des[1] = c;
 2630              		.loc 1 491 0
 2631 0354 07F11003 		add	r3, r7, #16
 2632 0358 97F85E21 		ldrb	r2, [r7, #350]
 2633 035c 5A70     		strb	r2, [r3, #1]
 492:.\main.c      **** 								map_traversed = 0;
 2634              		.loc 1 492 0
 2635 035e 0023     		movs	r3, #0
 2636 0360 87F85131 		strb	r3, [r7, #337]
 2637              	.L100:
 2638 0364 B546     		mov	sp, r6
 2639              	.L99:
 2640              	.LBE9:
 479:.\main.c      ****                         // find shortest distance to every non-traversed node
 2641              		.loc 1 479 0 discriminator 2
 2642 0366 97F85E31 		ldrb	r3, [r7, #350]	@ zero_extendqisi2
 2643 036a 0133     		adds	r3, r3, #1
 2644 036c 87F85E31 		strb	r3, [r7, #350]
 2645              	.L98:
 479:.\main.c      ****                         // find shortest distance to every non-traversed node
 2646              		.loc 1 479 0 is_stmt 0 discriminator 1
 2647 0370 97F85E31 		ldrb	r3, [r7, #350]	@ zero_extendqisi2
 2648 0374 122B     		cmp	r3, #18
 2649 0376 8DD9     		bls	.L101
 478:.\main.c      ****             		for (c = 0; c < COL; c++) {
 2650              		.loc 1 478 0 is_stmt 1 discriminator 2
 2651 0378 97F85F31 		ldrb	r3, [r7, #351]	@ zero_extendqisi2
 2652 037c 0133     		adds	r3, r3, #1
 2653 037e 87F85F31 		strb	r3, [r7, #351]
 2654              	.L97:
 478:.\main.c      ****             		for (c = 0; c < COL; c++) {
 2655              		.loc 1 478 0 is_stmt 0 discriminator 1
 2656 0382 97F85F31 		ldrb	r3, [r7, #351]	@ zero_extendqisi2
 2657 0386 0E2B     		cmp	r3, #14
 2658 0388 7FF67AAF 		bls	.L102
 493:.\main.c      **** 							}
 494:.\main.c      **** 						}
 495:.\main.c      ****                     }
 496:.\main.c      ****                 }
 497:.\main.c      ****                 // if whole map has not been traversed 
 498:.\main.c      **** 				if (!map_traversed) {
 2659              		.loc 1 498 0 is_stmt 1
 2660 038c 97F85131 		ldrb	r3, [r7, #337]	@ zero_extendqisi2
 2661 0390 002B     		cmp	r3, #0
 2662 0392 40F0A980 		bne	.L103
 2663              	.LBB10:
 2664 0396 6B46     		mov	r3, sp
 2665 0398 1E46     		mov	r6, r3
 499:.\main.c      ****                     // set destination to closest node
 500:.\main.c      **** 					des[0] = min_des[0];
 2666              		.loc 1 500 0
 2667 039a 07F11003 		add	r3, r7, #16
 2668 039e 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2669 03a0 07F11403 		add	r3, r7, #20
 2670 03a4 1A70     		strb	r2, [r3]
 501:.\main.c      **** 					des[1] = min_des[1];
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 57


 2671              		.loc 1 501 0
 2672 03a6 07F11003 		add	r3, r7, #16
 2673 03aa 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 2674 03ac 07F11403 		add	r3, r7, #20
 2675 03b0 5A70     		strb	r2, [r3, #1]
 502:.\main.c      ****                     
 503:.\main.c      ****                     // generate shortest path to closest node
 504:.\main.c      ****                     int8 temp_path[min_dist][2];
 2676              		.loc 1 504 0
 2677 03b2 B7F84E11 		ldrh	r1, [r7, #334]
 2678 03b6 0B46     		mov	r3, r1
 2679 03b8 013B     		subs	r3, r3, #1
 2680 03ba C7F83C31 		str	r3, [r7, #316]
 2681 03be 8AB2     		uxth	r2, r1
 2682 03c0 4FF00003 		mov	r3, #0
 2683 03c4 4FEA031B 		lsl	fp, r3, #4
 2684 03c8 4BEA127B 		orr	fp, fp, r2, lsr #28
 2685 03cc 4FEA021A 		lsl	r10, r2, #4
 2686 03d0 8AB2     		uxth	r2, r1
 2687 03d2 4FF00003 		mov	r3, #0
 2688 03d6 1801     		lsls	r0, r3, #4
 2689 03d8 7860     		str	r0, [r7, #4]
 2690 03da 7868     		ldr	r0, [r7, #4]
 2691 03dc 40EA1270 		orr	r0, r0, r2, lsr #28
 2692 03e0 7860     		str	r0, [r7, #4]
 2693 03e2 1301     		lsls	r3, r2, #4
 2694 03e4 3B60     		str	r3, [r7]
 2695 03e6 0B46     		mov	r3, r1
 2696 03e8 5B00     		lsls	r3, r3, #1
 2697 03ea 0733     		adds	r3, r3, #7
 2698 03ec DB08     		lsrs	r3, r3, #3
 2699 03ee DB00     		lsls	r3, r3, #3
 2700 03f0 ADEB030D 		sub	sp, sp, r3
 2701 03f4 6B46     		mov	r3, sp
 2702 03f6 0033     		adds	r3, r3, #0
 2703 03f8 C7F83831 		str	r3, [r7, #312]
 505:.\main.c      ****                     init_path(temp_path, min_dist);
 2704              		.loc 1 505 0
 2705 03fc D7F83821 		ldr	r2, [r7, #312]
 2706 0400 B7F84E31 		ldrh	r3, [r7, #334]
 2707 0404 1046     		mov	r0, r2
 2708 0406 1946     		mov	r1, r3
 2709 0408 FFF7FEFF 		bl	init_path
 506:.\main.c      **** 					find_shortest_path(pos, des, temp_path);
 2710              		.loc 1 506 0
 2711 040c D7F83821 		ldr	r2, [r7, #312]
 2712 0410 07F10C03 		add	r3, r7, #12
 2713 0414 07F11401 		add	r1, r7, #20
 2714 0418 1868     		ldr	r0, [r3]
 2715 041a FFF7FEFF 		bl	find_shortest_path
 507:.\main.c      ****                     
 508:.\main.c      ****                     // add shortest path to total path
 509:.\main.c      ****                     uint16 i = 0;
 2716              		.loc 1 509 0
 2717 041e 0023     		movs	r3, #0
 2718 0420 A7F84C31 		strh	r3, [r7, #332]	@ movhi
 510:.\main.c      ****                     while (i < min_dist) {
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 58


 2719              		.loc 1 510 0
 2720 0424 26E0     		b	.L104
 2721              	.L105:
 511:.\main.c      **** 						path[path_length][0] = temp_path[i][0];
 2722              		.loc 1 511 0
 2723 0426 B7F85431 		ldrh	r3, [r7, #340]
 2724 042a 5B00     		lsls	r3, r3, #1
 2725 042c 07F10802 		add	r2, r7, #8
 2726 0430 1268     		ldr	r2, [r2]
 2727 0432 1344     		add	r3, r3, r2
 2728 0434 B7F84C11 		ldrh	r1, [r7, #332]
 2729 0438 D7F83821 		ldr	r2, [r7, #312]
 2730 043c 12F81120 		ldrb	r2, [r2, r1, lsl #1]	@ zero_extendqisi2
 2731 0440 1A70     		strb	r2, [r3]
 512:.\main.c      **** 						path[path_length][1] = temp_path[i][1];
 2732              		.loc 1 512 0
 2733 0442 B7F85431 		ldrh	r3, [r7, #340]
 2734 0446 5B00     		lsls	r3, r3, #1
 2735 0448 07F10802 		add	r2, r7, #8
 2736 044c 1268     		ldr	r2, [r2]
 2737 044e 1A44     		add	r2, r2, r3
 2738 0450 B7F84C31 		ldrh	r3, [r7, #332]
 2739 0454 D7F83811 		ldr	r1, [r7, #312]
 2740 0458 5B00     		lsls	r3, r3, #1
 2741 045a 0B44     		add	r3, r3, r1
 2742 045c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2743 045e 5370     		strb	r3, [r2, #1]
 513:.\main.c      **** 						path_length++;
 2744              		.loc 1 513 0
 2745 0460 B7F85431 		ldrh	r3, [r7, #340]
 2746 0464 0133     		adds	r3, r3, #1
 2747 0466 A7F85431 		strh	r3, [r7, #340]	@ movhi
 514:.\main.c      ****                         i++;
 2748              		.loc 1 514 0
 2749 046a B7F84C31 		ldrh	r3, [r7, #332]
 2750 046e 0133     		adds	r3, r3, #1
 2751 0470 A7F84C31 		strh	r3, [r7, #332]	@ movhi
 2752              	.L104:
 510:.\main.c      **** 						path[path_length][0] = temp_path[i][0];
 2753              		.loc 1 510 0
 2754 0474 B7F84C21 		ldrh	r2, [r7, #332]
 2755 0478 B7F84E31 		ldrh	r3, [r7, #334]
 2756 047c 9A42     		cmp	r2, r3
 2757 047e D2D3     		bcc	.L105
 515:.\main.c      ****                     }
 516:.\main.c      **** 					
 517:.\main.c      **** 					// reset path, pos and dir
 518:.\main.c      **** 					pos[0] = des[0];
 2758              		.loc 1 518 0
 2759 0480 07F11403 		add	r3, r7, #20
 2760 0484 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2761 0486 07F10C03 		add	r3, r7, #12
 2762 048a 1B68     		ldr	r3, [r3]
 2763 048c 1A70     		strb	r2, [r3]
 519:.\main.c      **** 					pos[1] = des[1];
 2764              		.loc 1 519 0
 2765 048e 07F10C03 		add	r3, r7, #12
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 59


 2766 0492 1B68     		ldr	r3, [r3]
 2767 0494 0133     		adds	r3, r3, #1
 2768 0496 07F11402 		add	r2, r7, #20
 2769 049a 5278     		ldrb	r2, [r2, #1]	@ zero_extendqisi2
 2770 049c 1A70     		strb	r2, [r3]
 520:.\main.c      ****                     traversed_map[pos[0]][pos[1]] = -1;
 2771              		.loc 1 520 0
 2772 049e 07F10C03 		add	r3, r7, #12
 2773 04a2 1B68     		ldr	r3, [r3]
 2774 04a4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2775 04a6 1A46     		mov	r2, r3
 2776 04a8 07F10C03 		add	r3, r7, #12
 2777 04ac 1B68     		ldr	r3, [r3]
 2778 04ae 0133     		adds	r3, r3, #1
 2779 04b0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2780 04b2 1846     		mov	r0, r3
 2781 04b4 07F11801 		add	r1, r7, #24
 2782 04b8 1346     		mov	r3, r2
 2783 04ba DB00     		lsls	r3, r3, #3
 2784 04bc 1344     		add	r3, r3, r2
 2785 04be 5B00     		lsls	r3, r3, #1
 2786 04c0 1344     		add	r3, r3, r2
 2787 04c2 0344     		add	r3, r3, r0
 2788 04c4 0B44     		add	r3, r3, r1
 2789 04c6 FF22     		movs	r2, #255
 2790 04c8 1A70     		strb	r2, [r3]
 521:.\main.c      ****                     
 522:.\main.c      ****                     // reset orientation
 523:.\main.c      **** 					current_orientation = UP;
 2791              		.loc 1 523 0
 2792 04ca 0023     		movs	r3, #0
 2793 04cc 87F85D31 		strb	r3, [r7, #349]
 524:.\main.c      **** 					traverse_orientation = &orientation[current_orientation][0];
 2794              		.loc 1 524 0
 2795 04d0 97F85D31 		ldrb	r3, [r7, #349]	@ zero_extendqisi2
 2796 04d4 5B00     		lsls	r3, r3, #1
 2797 04d6 104A     		ldr	r2, .L111+4
 2798 04d8 1344     		add	r3, r3, r2
 2799 04da C7F85831 		str	r3, [r7, #344]
 525:.\main.c      **** 					original_orientation = UNKNOWN;
 2800              		.loc 1 525 0
 2801 04de 0A23     		movs	r3, #10
 2802 04e0 87F85731 		strb	r3, [r7, #343]
 2803 04e4 B546     		mov	sp, r6
 2804              	.LBE10:
 2805 04e6 02E0     		b	.L90
 2806              	.L103:
 526:.\main.c      **** 				}
 527:.\main.c      **** 				else {
 528:.\main.c      **** 					return path_length;
 2807              		.loc 1 528 0
 2808 04e8 B7F85431 		ldrh	r3, [r7, #340]
 2809 04ec 0BE0     		b	.L108
 2810              	.L90:
 2811              	.LBE8:
 529:.\main.c      **** 				}
 530:.\main.c      **** 			}
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 60


 531:.\main.c      **** 		}
 532:.\main.c      **** 		safety++;
 2812              		.loc 1 532 0
 2813 04ee B7F85231 		ldrh	r3, [r7, #338]
 2814 04f2 0133     		adds	r3, r3, #1
 2815 04f4 A7F85231 		strh	r3, [r7, #338]	@ movhi
 2816              	.L88:
 439:.\main.c      **** 		// if next node in current orientation is empty and not traversed
 2817              		.loc 1 439 0
 2818 04f8 B7F85231 		ldrh	r3, [r7, #338]
 2819 04fc B3F5FA7F 		cmp	r3, #500
 2820 0500 FFF4EBAD 		bcc	.L107
 533:.\main.c      **** 	}
 534:.\main.c      ****     return 0;
 2821              		.loc 1 534 0
 2822 0504 0023     		movs	r3, #0
 2823              	.L108:
 535:.\main.c      **** }
 2824              		.loc 1 535 0 discriminator 2
 2825 0506 1846     		mov	r0, r3
 2826 0508 07F5B277 		add	r7, r7, #356
 2827              		.cfi_def_cfa_offset 36
 2828 050c BD46     		mov	sp, r7
 2829              		.cfi_def_cfa_register 13
 2830              		@ sp needed
 2831 050e BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 2832              	.L112:
 2833 0512 00BF     		.align	2
 2834              	.L111:
 2835 0514 00000000 		.word	num_map_nodes
 2836 0518 00000000 		.word	orientation
 2837              		.cfi_endproc
 2838              	.LFE71:
 2839              		.size	find_traverse_path, .-find_traverse_path
 2840              		.section	.text.get_num_map_nodes,"ax",%progbits
 2841              		.align	2
 2842              		.global	get_num_map_nodes
 2843              		.thumb
 2844              		.thumb_func
 2845              		.type	get_num_map_nodes, %function
 2846              	get_num_map_nodes:
 2847              	.LFB72:
 536:.\main.c      **** //* ========================================
 537:.\main.c      **** //* Path Assistant Functions */
 538:.\main.c      **** //* ========================================
 539:.\main.c      **** /*
 540:.\main.c      **** Return number of traverseable nodes in the given map
 541:.\main.c      **** */
 542:.\main.c      **** void get_num_map_nodes()
 543:.\main.c      **** {
 2848              		.loc 1 543 0
 2849              		.cfi_startproc
 2850              		@ args = 0, pretend = 0, frame = 8
 2851              		@ frame_needed = 1, uses_anonymous_args = 0
 2852              		@ link register save eliminated.
 2853 0000 80B4     		push	{r7}
 2854              		.cfi_def_cfa_offset 4
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 61


 2855              		.cfi_offset 7, -4
 2856 0002 83B0     		sub	sp, sp, #12
 2857              		.cfi_def_cfa_offset 16
 2858 0004 00AF     		add	r7, sp, #0
 2859              		.cfi_def_cfa_register 7
 544:.\main.c      **** 	int r, c;
 545:.\main.c      ****     for (r = 0; r < ROW; r++) {
 2860              		.loc 1 545 0
 2861 0006 0023     		movs	r3, #0
 2862 0008 7B60     		str	r3, [r7, #4]
 2863 000a 1EE0     		b	.L114
 2864              	.L118:
 546:.\main.c      **** 		for (c = 0; c < COL; c++) {
 2865              		.loc 1 546 0
 2866 000c 0023     		movs	r3, #0
 2867 000e 3B60     		str	r3, [r7]
 2868 0010 15E0     		b	.L115
 2869              	.L117:
 547:.\main.c      **** 			if (!map[r][c])
 2870              		.loc 1 547 0
 2871 0012 1249     		ldr	r1, .L119
 2872 0014 7A68     		ldr	r2, [r7, #4]
 2873 0016 1346     		mov	r3, r2
 2874 0018 DB00     		lsls	r3, r3, #3
 2875 001a 1344     		add	r3, r3, r2
 2876 001c 5B00     		lsls	r3, r3, #1
 2877 001e 1344     		add	r3, r3, r2
 2878 0020 3A68     		ldr	r2, [r7]
 2879 0022 1344     		add	r3, r3, r2
 2880 0024 51F82330 		ldr	r3, [r1, r3, lsl #2]
 2881 0028 002B     		cmp	r3, #0
 2882 002a 05D1     		bne	.L116
 548:.\main.c      **** 				num_map_nodes++;
 2883              		.loc 1 548 0
 2884 002c 0C4B     		ldr	r3, .L119+4
 2885 002e 1B88     		ldrh	r3, [r3]
 2886 0030 0133     		adds	r3, r3, #1
 2887 0032 9AB2     		uxth	r2, r3
 2888 0034 0A4B     		ldr	r3, .L119+4
 2889 0036 1A80     		strh	r2, [r3]	@ movhi
 2890              	.L116:
 546:.\main.c      **** 		for (c = 0; c < COL; c++) {
 2891              		.loc 1 546 0 discriminator 2
 2892 0038 3B68     		ldr	r3, [r7]
 2893 003a 0133     		adds	r3, r3, #1
 2894 003c 3B60     		str	r3, [r7]
 2895              	.L115:
 546:.\main.c      **** 		for (c = 0; c < COL; c++) {
 2896              		.loc 1 546 0 is_stmt 0 discriminator 1
 2897 003e 3B68     		ldr	r3, [r7]
 2898 0040 122B     		cmp	r3, #18
 2899 0042 E6DD     		ble	.L117
 545:.\main.c      **** 		for (c = 0; c < COL; c++) {
 2900              		.loc 1 545 0 is_stmt 1 discriminator 2
 2901 0044 7B68     		ldr	r3, [r7, #4]
 2902 0046 0133     		adds	r3, r3, #1
 2903 0048 7B60     		str	r3, [r7, #4]
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 62


 2904              	.L114:
 545:.\main.c      **** 		for (c = 0; c < COL; c++) {
 2905              		.loc 1 545 0 is_stmt 0 discriminator 1
 2906 004a 7B68     		ldr	r3, [r7, #4]
 2907 004c 0E2B     		cmp	r3, #14
 2908 004e DDDD     		ble	.L118
 549:.\main.c      ****         }
 550:.\main.c      ****     }
 551:.\main.c      **** }
 2909              		.loc 1 551 0 is_stmt 1
 2910 0050 0C37     		adds	r7, r7, #12
 2911              		.cfi_def_cfa_offset 4
 2912 0052 BD46     		mov	sp, r7
 2913              		.cfi_def_cfa_register 13
 2914              		@ sp needed
 2915 0054 5DF8047B 		ldr	r7, [sp], #4
 2916              		.cfi_restore 7
 2917              		.cfi_def_cfa_offset 0
 2918 0058 7047     		bx	lr
 2919              	.L120:
 2920 005a 00BF     		.align	2
 2921              	.L119:
 2922 005c 00000000 		.word	map
 2923 0060 00000000 		.word	num_map_nodes
 2924              		.cfi_endproc
 2925              	.LFE72:
 2926              		.size	get_num_map_nodes, .-get_num_map_nodes
 2927              		.section	.text.init_path,"ax",%progbits
 2928              		.align	2
 2929              		.global	init_path
 2930              		.thumb
 2931              		.thumb_func
 2932              		.type	init_path, %function
 2933              	init_path:
 2934              	.LFB73:
 552:.\main.c      **** //* ========================================
 553:.\main.c      **** /*
 554:.\main.c      **** Set each value of path to -1
 555:.\main.c      **** */
 556:.\main.c      **** void init_path(int8 path[][2], uint16 path_length)
 557:.\main.c      **** {
 2935              		.loc 1 557 0
 2936              		.cfi_startproc
 2937              		@ args = 0, pretend = 0, frame = 16
 2938              		@ frame_needed = 1, uses_anonymous_args = 0
 2939              		@ link register save eliminated.
 2940 0000 80B4     		push	{r7}
 2941              		.cfi_def_cfa_offset 4
 2942              		.cfi_offset 7, -4
 2943 0002 85B0     		sub	sp, sp, #20
 2944              		.cfi_def_cfa_offset 24
 2945 0004 00AF     		add	r7, sp, #0
 2946              		.cfi_def_cfa_register 7
 2947 0006 7860     		str	r0, [r7, #4]
 2948 0008 0B46     		mov	r3, r1
 2949 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 558:.\main.c      ****     uint16 i = 0;
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 63


 2950              		.loc 1 558 0
 2951 000c 0023     		movs	r3, #0
 2952 000e FB81     		strh	r3, [r7, #14]	@ movhi
 559:.\main.c      **** 	while (i < path_length) {
 2953              		.loc 1 559 0
 2954 0010 0EE0     		b	.L122
 2955              	.L123:
 560:.\main.c      **** 		path[i][0] = -1;
 2956              		.loc 1 560 0
 2957 0012 FB89     		ldrh	r3, [r7, #14]
 2958 0014 5B00     		lsls	r3, r3, #1
 2959 0016 7A68     		ldr	r2, [r7, #4]
 2960 0018 1344     		add	r3, r3, r2
 2961 001a FF22     		movs	r2, #255
 2962 001c 1A70     		strb	r2, [r3]
 561:.\main.c      **** 		path[i][1] = -1;
 2963              		.loc 1 561 0
 2964 001e FB89     		ldrh	r3, [r7, #14]
 2965 0020 5B00     		lsls	r3, r3, #1
 2966 0022 7A68     		ldr	r2, [r7, #4]
 2967 0024 1344     		add	r3, r3, r2
 2968 0026 FF22     		movs	r2, #255
 2969 0028 5A70     		strb	r2, [r3, #1]
 562:.\main.c      ****         i++;
 2970              		.loc 1 562 0
 2971 002a FB89     		ldrh	r3, [r7, #14]
 2972 002c 0133     		adds	r3, r3, #1
 2973 002e FB81     		strh	r3, [r7, #14]	@ movhi
 2974              	.L122:
 559:.\main.c      **** 		path[i][0] = -1;
 2975              		.loc 1 559 0
 2976 0030 FA89     		ldrh	r2, [r7, #14]
 2977 0032 7B88     		ldrh	r3, [r7, #2]
 2978 0034 9A42     		cmp	r2, r3
 2979 0036 ECD3     		bcc	.L123
 563:.\main.c      **** 	}
 564:.\main.c      **** }
 2980              		.loc 1 564 0
 2981 0038 1437     		adds	r7, r7, #20
 2982              		.cfi_def_cfa_offset 4
 2983 003a BD46     		mov	sp, r7
 2984              		.cfi_def_cfa_register 13
 2985              		@ sp needed
 2986 003c 5DF8047B 		ldr	r7, [sp], #4
 2987              		.cfi_restore 7
 2988              		.cfi_def_cfa_offset 0
 2989 0040 7047     		bx	lr
 2990              		.cfi_endproc
 2991              	.LFE73:
 2992              		.size	init_path, .-init_path
 2993 0042 00BF     		.section	.text.get_node_index,"ax",%progbits
 2994              		.align	2
 2995              		.global	get_node_index
 2996              		.thumb
 2997              		.thumb_func
 2998              		.type	get_node_index, %function
 2999              	get_node_index:
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 64


 3000              	.LFB74:
 565:.\main.c      **** //* ========================================
 566:.\main.c      **** /*
 567:.\main.c      **** Return index of specified node in array of nodes.
 568:.\main.c      **** If node does not exist return -1.
 569:.\main.c      **** */
 570:.\main.c      **** int32 get_node_index(uint8 node[2], uint8 nodes[][2])
 571:.\main.c      **** {
 3001              		.loc 1 571 0
 3002              		.cfi_startproc
 3003              		@ args = 0, pretend = 0, frame = 16
 3004              		@ frame_needed = 1, uses_anonymous_args = 0
 3005              		@ link register save eliminated.
 3006 0000 80B4     		push	{r7}
 3007              		.cfi_def_cfa_offset 4
 3008              		.cfi_offset 7, -4
 3009 0002 85B0     		sub	sp, sp, #20
 3010              		.cfi_def_cfa_offset 24
 3011 0004 00AF     		add	r7, sp, #0
 3012              		.cfi_def_cfa_register 7
 3013 0006 7860     		str	r0, [r7, #4]
 3014 0008 3960     		str	r1, [r7]
 572:.\main.c      ****     int32 i = 0;
 3015              		.loc 1 572 0
 3016 000a 0023     		movs	r3, #0
 3017 000c FB60     		str	r3, [r7, #12]
 573:.\main.c      **** 	while (i < num_map_nodes) {
 3018              		.loc 1 573 0
 3019 000e 17E0     		b	.L125
 3020              	.L128:
 574:.\main.c      **** 		if (node[0] == nodes[i][0] && node[1] == nodes[i][1])
 3021              		.loc 1 574 0
 3022 0010 7B68     		ldr	r3, [r7, #4]
 3023 0012 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 3024 0014 FB68     		ldr	r3, [r7, #12]
 3025 0016 5B00     		lsls	r3, r3, #1
 3026 0018 3968     		ldr	r1, [r7]
 3027 001a 0B44     		add	r3, r3, r1
 3028 001c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3029 001e 9A42     		cmp	r2, r3
 3030 0020 0BD1     		bne	.L126
 3031              		.loc 1 574 0 is_stmt 0 discriminator 1
 3032 0022 7B68     		ldr	r3, [r7, #4]
 3033 0024 0133     		adds	r3, r3, #1
 3034 0026 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 3035 0028 FB68     		ldr	r3, [r7, #12]
 3036 002a 5B00     		lsls	r3, r3, #1
 3037 002c 3968     		ldr	r1, [r7]
 3038 002e 0B44     		add	r3, r3, r1
 3039 0030 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 3040 0032 9A42     		cmp	r2, r3
 3041 0034 01D1     		bne	.L126
 575:.\main.c      **** 			return i;
 3042              		.loc 1 575 0 is_stmt 1
 3043 0036 FB68     		ldr	r3, [r7, #12]
 3044 0038 0AE0     		b	.L127
 3045              	.L126:
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 65


 576:.\main.c      ****         i++;
 3046              		.loc 1 576 0
 3047 003a FB68     		ldr	r3, [r7, #12]
 3048 003c 0133     		adds	r3, r3, #1
 3049 003e FB60     		str	r3, [r7, #12]
 3050              	.L125:
 573:.\main.c      **** 		if (node[0] == nodes[i][0] && node[1] == nodes[i][1])
 3051              		.loc 1 573 0
 3052 0040 064B     		ldr	r3, .L129
 3053 0042 1B88     		ldrh	r3, [r3]
 3054 0044 1A46     		mov	r2, r3
 3055 0046 FB68     		ldr	r3, [r7, #12]
 3056 0048 9A42     		cmp	r2, r3
 3057 004a E1DC     		bgt	.L128
 577:.\main.c      **** 	}
 578:.\main.c      **** 	return -1;
 3058              		.loc 1 578 0
 3059 004c 4FF0FF33 		mov	r3, #-1
 3060              	.L127:
 579:.\main.c      **** }
 3061              		.loc 1 579 0
 3062 0050 1846     		mov	r0, r3
 3063 0052 1437     		adds	r7, r7, #20
 3064              		.cfi_def_cfa_offset 4
 3065 0054 BD46     		mov	sp, r7
 3066              		.cfi_def_cfa_register 13
 3067              		@ sp needed
 3068 0056 5DF8047B 		ldr	r7, [sp], #4
 3069              		.cfi_restore 7
 3070              		.cfi_def_cfa_offset 0
 3071 005a 7047     		bx	lr
 3072              	.L130:
 3073              		.align	2
 3074              	.L129:
 3075 005c 00000000 		.word	num_map_nodes
 3076              		.cfi_endproc
 3077              	.LFE74:
 3078              		.size	get_node_index, .-get_node_index
 3079              		.global	__aeabi_fcmplt
 3080              		.section	.text.get_array_min_index,"ax",%progbits
 3081              		.align	2
 3082              		.global	get_array_min_index
 3083              		.thumb
 3084              		.thumb_func
 3085              		.type	get_array_min_index, %function
 3086              	get_array_min_index:
 3087              	.LFB75:
 580:.\main.c      **** //* ========================================
 581:.\main.c      **** /*
 582:.\main.c      **** Find non-considered node with minimum value.
 583:.\main.c      **** If all nodes have been considered return -1.
 584:.\main.c      **** */
 585:.\main.c      **** int32 get_array_min_index(float array[], uint8 cons[])
 586:.\main.c      **** {
 3088              		.loc 1 586 0
 3089              		.cfi_startproc
 3090              		@ args = 0, pretend = 0, frame = 16
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 66


 3091              		@ frame_needed = 1, uses_anonymous_args = 0
 3092 0000 80B5     		push	{r7, lr}
 3093              		.cfi_def_cfa_offset 8
 3094              		.cfi_offset 7, -8
 3095              		.cfi_offset 14, -4
 3096 0002 84B0     		sub	sp, sp, #16
 3097              		.cfi_def_cfa_offset 24
 3098 0004 00AF     		add	r7, sp, #0
 3099              		.cfi_def_cfa_register 7
 3100 0006 7860     		str	r0, [r7, #4]
 3101 0008 3960     		str	r1, [r7]
 587:.\main.c      **** 	// find first non considered element in array
 588:.\main.c      ****     int32 min = -1;
 3102              		.loc 1 588 0
 3103 000a 4FF0FF33 		mov	r3, #-1
 3104 000e FB60     		str	r3, [r7, #12]
 589:.\main.c      ****     uint16 i = 0;
 3105              		.loc 1 589 0
 3106 0010 0023     		movs	r3, #0
 3107 0012 7B81     		strh	r3, [r7, #10]	@ movhi
 590:.\main.c      ****     while (i < num_map_nodes) {
 3108              		.loc 1 590 0
 3109 0014 0BE0     		b	.L132
 3110              	.L135:
 591:.\main.c      ****         if (!cons[i]) {
 3111              		.loc 1 591 0
 3112 0016 7B89     		ldrh	r3, [r7, #10]
 3113 0018 3A68     		ldr	r2, [r7]
 3114 001a 1344     		add	r3, r3, r2
 3115 001c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3116 001e 002B     		cmp	r3, #0
 3117 0020 02D1     		bne	.L133
 592:.\main.c      ****             min = i;
 3118              		.loc 1 592 0
 3119 0022 7B89     		ldrh	r3, [r7, #10]
 3120 0024 FB60     		str	r3, [r7, #12]
 593:.\main.c      ****             break;
 3121              		.loc 1 593 0
 3122 0026 07E0     		b	.L134
 3123              	.L133:
 594:.\main.c      ****         }
 595:.\main.c      ****         i++;
 3124              		.loc 1 595 0
 3125 0028 7B89     		ldrh	r3, [r7, #10]
 3126 002a 0133     		adds	r3, r3, #1
 3127 002c 7B81     		strh	r3, [r7, #10]	@ movhi
 3128              	.L132:
 590:.\main.c      ****         if (!cons[i]) {
 3129              		.loc 1 590 0
 3130 002e 1A4B     		ldr	r3, .L143
 3131 0030 1B88     		ldrh	r3, [r3]
 3132 0032 7A89     		ldrh	r2, [r7, #10]
 3133 0034 9A42     		cmp	r2, r3
 3134 0036 EED3     		bcc	.L135
 3135              	.L134:
 596:.\main.c      ****     }
 597:.\main.c      **** 	// return if all elements have been considered
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 67


 598:.\main.c      ****     if (min == -1)
 3136              		.loc 1 598 0
 3137 0038 FB68     		ldr	r3, [r7, #12]
 3138 003a B3F1FF3F 		cmp	r3, #-1
 3139 003e 02D1     		bne	.L136
 599:.\main.c      ****         return -1;
 3140              		.loc 1 599 0
 3141 0040 4FF0FF33 		mov	r3, #-1
 3142 0044 24E0     		b	.L137
 3143              	.L136:
 600:.\main.c      ****     
 601:.\main.c      **** 	// find min non-considered element in array
 602:.\main.c      ****     i = 0;
 3144              		.loc 1 602 0
 3145 0046 0023     		movs	r3, #0
 3146 0048 7B81     		strh	r3, [r7, #10]	@ movhi
 603:.\main.c      ****     while (i < num_map_nodes) {
 3147              		.loc 1 603 0
 3148 004a 1BE0     		b	.L138
 3149              	.L141:
 604:.\main.c      ****         if (array[i] < array[min] && !cons[i])
 3150              		.loc 1 604 0
 3151 004c 7B89     		ldrh	r3, [r7, #10]
 3152 004e 9B00     		lsls	r3, r3, #2
 3153 0050 7A68     		ldr	r2, [r7, #4]
 3154 0052 1344     		add	r3, r3, r2
 3155 0054 1968     		ldr	r1, [r3]	@ float
 3156 0056 FB68     		ldr	r3, [r7, #12]
 3157 0058 9B00     		lsls	r3, r3, #2
 3158 005a 7A68     		ldr	r2, [r7, #4]
 3159 005c 1344     		add	r3, r3, r2
 3160 005e 1B68     		ldr	r3, [r3]	@ float
 3161 0060 0846     		mov	r0, r1
 3162 0062 1946     		mov	r1, r3
 3163 0064 FFF7FEFF 		bl	__aeabi_fcmplt
 3164 0068 0346     		mov	r3, r0
 3165 006a 002B     		cmp	r3, #0
 3166 006c 07D0     		beq	.L139
 3167              		.loc 1 604 0 is_stmt 0 discriminator 1
 3168 006e 7B89     		ldrh	r3, [r7, #10]
 3169 0070 3A68     		ldr	r2, [r7]
 3170 0072 1344     		add	r3, r3, r2
 3171 0074 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3172 0076 002B     		cmp	r3, #0
 3173 0078 01D1     		bne	.L139
 605:.\main.c      ****             min = i;
 3174              		.loc 1 605 0 is_stmt 1
 3175 007a 7B89     		ldrh	r3, [r7, #10]
 3176 007c FB60     		str	r3, [r7, #12]
 3177              	.L139:
 606:.\main.c      ****         i++;
 3178              		.loc 1 606 0
 3179 007e 7B89     		ldrh	r3, [r7, #10]
 3180 0080 0133     		adds	r3, r3, #1
 3181 0082 7B81     		strh	r3, [r7, #10]	@ movhi
 3182              	.L138:
 603:.\main.c      ****         if (array[i] < array[min] && !cons[i])
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 68


 3183              		.loc 1 603 0
 3184 0084 044B     		ldr	r3, .L143
 3185 0086 1B88     		ldrh	r3, [r3]
 3186 0088 7A89     		ldrh	r2, [r7, #10]
 3187 008a 9A42     		cmp	r2, r3
 3188 008c DED3     		bcc	.L141
 607:.\main.c      ****     }
 608:.\main.c      ****     return min;
 3189              		.loc 1 608 0
 3190 008e FB68     		ldr	r3, [r7, #12]
 3191              	.L137:
 609:.\main.c      **** }
 3192              		.loc 1 609 0
 3193 0090 1846     		mov	r0, r3
 3194 0092 1037     		adds	r7, r7, #16
 3195              		.cfi_def_cfa_offset 8
 3196 0094 BD46     		mov	sp, r7
 3197              		.cfi_def_cfa_register 13
 3198              		@ sp needed
 3199 0096 80BD     		pop	{r7, pc}
 3200              	.L144:
 3201              		.align	2
 3202              	.L143:
 3203 0098 00000000 		.word	num_map_nodes
 3204              		.cfi_endproc
 3205              	.LFE75:
 3206              		.size	get_array_min_index, .-get_array_min_index
 3207              		.section	.text.is_next_to,"ax",%progbits
 3208              		.align	2
 3209              		.global	is_next_to
 3210              		.thumb
 3211              		.thumb_func
 3212              		.type	is_next_to, %function
 3213              	is_next_to:
 3214              	.LFB76:
 610:.\main.c      **** //* ========================================
 611:.\main.c      **** /*
 612:.\main.c      **** Return whether two nodes are adjacent to each other.
 613:.\main.c      **** */
 614:.\main.c      **** uint8 is_next_to(uint8 node_1[2], uint8 node_2[2])
 615:.\main.c      **** {
 3215              		.loc 1 615 0
 3216              		.cfi_startproc
 3217              		@ args = 0, pretend = 0, frame = 8
 3218              		@ frame_needed = 1, uses_anonymous_args = 0
 3219              		@ link register save eliminated.
 3220 0000 80B4     		push	{r7}
 3221              		.cfi_def_cfa_offset 4
 3222              		.cfi_offset 7, -4
 3223 0002 83B0     		sub	sp, sp, #12
 3224              		.cfi_def_cfa_offset 16
 3225 0004 00AF     		add	r7, sp, #0
 3226              		.cfi_def_cfa_register 7
 3227 0006 7860     		str	r0, [r7, #4]
 3228 0008 3960     		str	r1, [r7]
 616:.\main.c      ****     if (((node_1[0]==node_2[0]-1 || node_1[0]==node_2[0]+1) && node_1[1]==node_2[1]) ||
 3229              		.loc 1 616 0
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 69


 3230 000a 7B68     		ldr	r3, [r7, #4]
 3231 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3232 000e 1A46     		mov	r2, r3
 3233 0010 3B68     		ldr	r3, [r7]
 3234 0012 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3235 0014 013B     		subs	r3, r3, #1
 3236 0016 9A42     		cmp	r2, r3
 3237 0018 07D0     		beq	.L146
 3238              		.loc 1 616 0 is_stmt 0 discriminator 2
 3239 001a 7B68     		ldr	r3, [r7, #4]
 3240 001c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3241 001e 1A46     		mov	r2, r3
 3242 0020 3B68     		ldr	r3, [r7]
 3243 0022 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3244 0024 0133     		adds	r3, r3, #1
 3245 0026 9A42     		cmp	r2, r3
 3246 0028 07D1     		bne	.L147
 3247              	.L146:
 3248              		.loc 1 616 0 discriminator 3
 3249 002a 7B68     		ldr	r3, [r7, #4]
 3250 002c 0133     		adds	r3, r3, #1
 3251 002e 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 3252 0030 3B68     		ldr	r3, [r7]
 3253 0032 0133     		adds	r3, r3, #1
 3254 0034 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3255 0036 9A42     		cmp	r2, r3
 3256 0038 19D0     		beq	.L148
 3257              	.L147:
 617:.\main.c      **** 			((node_1[1]==node_2[1]-1 ||  node_1[1]==node_2[1]+1) && node_1[0]==node_2[0]))
 3258              		.loc 1 617 0 is_stmt 1 discriminator 5
 3259 003a 7B68     		ldr	r3, [r7, #4]
 3260 003c 0133     		adds	r3, r3, #1
 3261 003e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3262 0040 1A46     		mov	r2, r3
 3263 0042 3B68     		ldr	r3, [r7]
 3264 0044 0133     		adds	r3, r3, #1
 3265 0046 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3266 0048 013B     		subs	r3, r3, #1
 616:.\main.c      ****     if (((node_1[0]==node_2[0]-1 || node_1[0]==node_2[0]+1) && node_1[1]==node_2[1]) ||
 3267              		.loc 1 616 0 discriminator 5
 3268 004a 9A42     		cmp	r2, r3
 3269 004c 09D0     		beq	.L149
 3270              		.loc 1 617 0
 3271 004e 7B68     		ldr	r3, [r7, #4]
 3272 0050 0133     		adds	r3, r3, #1
 3273 0052 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3274 0054 1A46     		mov	r2, r3
 3275 0056 3B68     		ldr	r3, [r7]
 3276 0058 0133     		adds	r3, r3, #1
 3277 005a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3278 005c 0133     		adds	r3, r3, #1
 3279 005e 9A42     		cmp	r2, r3
 3280 0060 07D1     		bne	.L150
 3281              	.L149:
 3282              		.loc 1 617 0 is_stmt 0 discriminator 1
 3283 0062 7B68     		ldr	r3, [r7, #4]
 3284 0064 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 70


 3285 0066 3B68     		ldr	r3, [r7]
 3286 0068 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3287 006a 9A42     		cmp	r2, r3
 3288 006c 01D1     		bne	.L150
 3289              	.L148:
 618:.\main.c      ****         return 1;
 3290              		.loc 1 618 0 is_stmt 1
 3291 006e 0123     		movs	r3, #1
 3292 0070 00E0     		b	.L151
 3293              	.L150:
 619:.\main.c      ****     return 0;
 3294              		.loc 1 619 0
 3295 0072 0023     		movs	r3, #0
 3296              	.L151:
 620:.\main.c      **** }
 3297              		.loc 1 620 0
 3298 0074 1846     		mov	r0, r3
 3299 0076 0C37     		adds	r7, r7, #12
 3300              		.cfi_def_cfa_offset 4
 3301 0078 BD46     		mov	sp, r7
 3302              		.cfi_def_cfa_register 13
 3303              		@ sp needed
 3304 007a 5DF8047B 		ldr	r7, [sp], #4
 3305              		.cfi_restore 7
 3306              		.cfi_def_cfa_offset 0
 3307 007e 7047     		bx	lr
 3308              		.cfi_endproc
 3309              	.LFE76:
 3310              		.size	is_next_to, .-is_next_to
 3311              		.section	.text.follow_path,"ax",%progbits
 3312              		.align	2
 3313              		.global	follow_path
 3314              		.thumb
 3315              		.thumb_func
 3316              		.type	follow_path, %function
 3317              	follow_path:
 3318              	.LFB77:
 621:.\main.c      **** //* ========================================
 622:.\main.c      **** //* TACHO */
 623:.\main.c      **** //* ========================================
 624:.\main.c      **** //* Robot Path Follower Logic */
 625:.\main.c      **** //* ========================================
 626:.\main.c      **** /*
 627:.\main.c      **** Use robot sensors and logic to follow along the given path.
 628:.\main.c      **** This is done by determining what the next event will be that
 629:.\main.c      **** is reached by the robot; intersection, deadend, or u-turn in
 630:.\main.c      **** middle of straight line.
 631:.\main.c      **** Intersection light sensors are used to detect intersection.
 632:.\main.c      **** Centre light sensor is used to detect dead end.
 633:.\main.c      **** Quadrature is used to determine if u-turn point is reached.
 634:.\main.c      **** When even is reached robot decides whether to turn or continue
 635:.\main.c      **** straight and then finds next event.
 636:.\main.c      **** Return 0 if end of path is rechead otherwise return 1.
 637:.\main.c      **** */
 638:.\main.c      **** uint8 follow_path(int8 path[][2], uint16 path_length)
 639:.\main.c      **** {
 3319              		.loc 1 639 0
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 71


 3320              		.cfi_startproc
 3321              		@ args = 0, pretend = 0, frame = 8
 3322              		@ frame_needed = 1, uses_anonymous_args = 0
 3323 0000 80B5     		push	{r7, lr}
 3324              		.cfi_def_cfa_offset 8
 3325              		.cfi_offset 7, -8
 3326              		.cfi_offset 14, -4
 3327 0002 82B0     		sub	sp, sp, #8
 3328              		.cfi_def_cfa_offset 16
 3329 0004 00AF     		add	r7, sp, #0
 3330              		.cfi_def_cfa_register 7
 3331 0006 7860     		str	r0, [r7, #4]
 3332 0008 0B46     		mov	r3, r1
 3333 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 640:.\main.c      ****     // determine whether path event has changed path orienatation and turn accordingly
 641:.\main.c      **** 	if (flag_new_path_index) {
 3334              		.loc 1 641 0
 3335 000c 794B     		ldr	r3, .L172
 3336 000e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3337 0010 002B     		cmp	r3, #0
 3338 0012 3CD0     		beq	.L153
 642:.\main.c      ****         // return 0 if end of path is reached
 643:.\main.c      ****         if (path_index == path_length-1)
 3339              		.loc 1 643 0
 3340 0014 784B     		ldr	r3, .L172+4
 3341 0016 1B88     		ldrh	r3, [r3]
 3342 0018 1A46     		mov	r2, r3
 3343 001a 7B88     		ldrh	r3, [r7, #2]
 3344 001c 013B     		subs	r3, r3, #1
 3345 001e 9A42     		cmp	r2, r3
 3346 0020 01D1     		bne	.L154
 644:.\main.c      ****             return 0;
 3347              		.loc 1 644 0
 3348 0022 0023     		movs	r3, #0
 3349 0024 E2E0     		b	.L155
 3350              	.L154:
 645:.\main.c      **** 		// otherwise determine whether current orientation follows path
 646:.\main.c      **** 		else if (NEXT_ROW(path_index) != path[path_index+1][0] || NEXT_COL(path_index) != path[path_index
 3351              		.loc 1 646 0
 3352 0026 744B     		ldr	r3, .L172+4
 3353 0028 1B88     		ldrh	r3, [r3]
 3354 002a 5B00     		lsls	r3, r3, #1
 3355 002c 7A68     		ldr	r2, [r7, #4]
 3356 002e 1344     		add	r3, r3, r2
 3357 0030 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3358 0032 5AB2     		sxtb	r2, r3
 3359 0034 714B     		ldr	r3, .L172+8
 3360 0036 1B68     		ldr	r3, [r3]
 3361 0038 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3362 003a 5BB2     		sxtb	r3, r3
 3363 003c 1A44     		add	r2, r2, r3
 3364 003e 6E4B     		ldr	r3, .L172+4
 3365 0040 1B88     		ldrh	r3, [r3]
 3366 0042 0133     		adds	r3, r3, #1
 3367 0044 5B00     		lsls	r3, r3, #1
 3368 0046 7968     		ldr	r1, [r7, #4]
 3369 0048 0B44     		add	r3, r3, r1
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 72


 3370 004a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3371 004c 5BB2     		sxtb	r3, r3
 3372 004e 9A42     		cmp	r2, r3
 3373 0050 16D1     		bne	.L156
 3374              		.loc 1 646 0 is_stmt 0 discriminator 1
 3375 0052 694B     		ldr	r3, .L172+4
 3376 0054 1B88     		ldrh	r3, [r3]
 3377 0056 5B00     		lsls	r3, r3, #1
 3378 0058 7A68     		ldr	r2, [r7, #4]
 3379 005a 1344     		add	r3, r3, r2
 3380 005c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 3381 005e 5AB2     		sxtb	r2, r3
 3382 0060 664B     		ldr	r3, .L172+8
 3383 0062 1B68     		ldr	r3, [r3]
 3384 0064 0133     		adds	r3, r3, #1
 3385 0066 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3386 0068 5BB2     		sxtb	r3, r3
 3387 006a 1A44     		add	r2, r2, r3
 3388 006c 624B     		ldr	r3, .L172+4
 3389 006e 1B88     		ldrh	r3, [r3]
 3390 0070 0133     		adds	r3, r3, #1
 3391 0072 5B00     		lsls	r3, r3, #1
 3392 0074 7968     		ldr	r1, [r7, #4]
 3393 0076 0B44     		add	r3, r3, r1
 3394 0078 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 3395 007a 5BB2     		sxtb	r3, r3
 3396 007c 9A42     		cmp	r2, r3
 3397 007e 02D0     		beq	.L157
 3398              	.L156:
 647:.\main.c      ****             // turn robot and reset quadrature if path does not continue straight ahead
 648:.\main.c      ****             turn_robot(path);
 3399              		.loc 1 648 0 is_stmt 1
 3400 0080 7868     		ldr	r0, [r7, #4]
 3401 0082 FFF7FEFF 		bl	turn_robot
 3402              	.L157:
 649:.\main.c      ****             //flag_turning = 1;
 650:.\main.c      ****         }
 651:.\main.c      ****         // reset flag
 652:.\main.c      **** 		flag_new_path_index = 0;
 3403              		.loc 1 652 0
 3404 0086 5B4B     		ldr	r3, .L172
 3405 0088 0022     		movs	r2, #0
 3406 008a 1A70     		strb	r2, [r3]
 3407 008c ADE0     		b	.L158
 3408              	.L153:
 653:.\main.c      **** 	}
 654:.\main.c      **** 	// find next intersection, dead end or pellet in line event on path
 655:.\main.c      **** 	else if (next_event_index == path_index) {
 3409              		.loc 1 655 0
 3410 008e 5C4B     		ldr	r3, .L172+12
 3411 0090 1A88     		ldrh	r2, [r3]
 3412 0092 594B     		ldr	r3, .L172+4
 3413 0094 1B88     		ldrh	r3, [r3]
 3414 0096 9A42     		cmp	r2, r3
 3415 0098 05D1     		bne	.L159
 656:.\main.c      ****         get_next_event_index(path, path_length);
 3416              		.loc 1 656 0
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 73


 3417 009a 7B88     		ldrh	r3, [r7, #2]
 3418 009c 7868     		ldr	r0, [r7, #4]
 3419 009e 1946     		mov	r1, r3
 3420 00a0 FFF7FEFF 		bl	get_next_event_index
 3421 00a4 A1E0     		b	.L158
 3422              	.L159:
 657:.\main.c      ****     }
 658:.\main.c      ****     // poll quadrature to determine robot position if next event is pellet in line
 659:.\main.c      ****     else if (flag_next_event_u_turn) {
 3423              		.loc 1 659 0
 3424 00a6 574B     		ldr	r3, .L172+16
 3425 00a8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3426 00aa 002B     		cmp	r3, #0
 3427 00ac 18D0     		beq	.L160
 660:.\main.c      ****         if (robot_position_index == next_event_index) {
 3428              		.loc 1 660 0
 3429 00ae 564B     		ldr	r3, .L172+20
 3430 00b0 1A88     		ldrh	r2, [r3]
 3431 00b2 534B     		ldr	r3, .L172+12
 3432 00b4 1B88     		ldrh	r3, [r3]
 3433 00b6 9A42     		cmp	r2, r3
 3434 00b8 0AD1     		bne	.L161
 661:.\main.c      ****             // update path index
 662:.\main.c      ****             path_index = next_event_index;
 3435              		.loc 1 662 0
 3436 00ba 514B     		ldr	r3, .L172+12
 3437 00bc 1A88     		ldrh	r2, [r3]
 3438 00be 4E4B     		ldr	r3, .L172+4
 3439 00c0 1A80     		strh	r2, [r3]	@ movhi
 663:.\main.c      ****             
 664:.\main.c      ****             // set flags
 665:.\main.c      ****     		flag_new_path_index = 1;
 3440              		.loc 1 665 0
 3441 00c2 4C4B     		ldr	r3, .L172
 3442 00c4 0122     		movs	r2, #1
 3443 00c6 1A70     		strb	r2, [r3]
 666:.\main.c      ****             flag_next_event_u_turn = 0;
 3444              		.loc 1 666 0
 3445 00c8 4E4B     		ldr	r3, .L172+16
 3446 00ca 0022     		movs	r2, #0
 3447 00cc 1A70     		strb	r2, [r3]
 3448 00ce 8CE0     		b	.L158
 3449              	.L161:
 667:.\main.c      ****         }
 668:.\main.c      ****         else {
 669:.\main.c      ****             follow_line();
 3450              		.loc 1 669 0
 3451 00d0 FFF7FEFF 		bl	follow_line
 670:.\main.c      ****             update_robot_position(path, path_length);
 3452              		.loc 1 670 0
 3453 00d4 7B88     		ldrh	r3, [r7, #2]
 3454 00d6 7868     		ldr	r0, [r7, #4]
 3455 00d8 1946     		mov	r1, r3
 3456 00da FFF7FEFF 		bl	update_robot_position
 3457 00de 84E0     		b	.L158
 3458              	.L160:
 671:.\main.c      ****         }
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 74


 672:.\main.c      ****     }
 673:.\main.c      ****     // ensure centre sensor is back on line before polling for dead ends after turn
 674:.\main.c      ****     else if (flag_next_event_deadend) {
 3459              		.loc 1 674 0
 3460 00e0 4A4B     		ldr	r3, .L172+24
 3461 00e2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3462 00e4 002B     		cmp	r3, #0
 3463 00e6 3BD0     		beq	.L163
 675:.\main.c      ****         // poll centre sensor for dead ends if next event is dead end
 676:.\main.c      ****         if (flag_centre_on_line_after_turn && !line_sensor_centre) {
 3464              		.loc 1 676 0
 3465 00e8 494B     		ldr	r3, .L172+28
 3466 00ea 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3467 00ec 002B     		cmp	r3, #0
 3468 00ee 27D0     		beq	.L164
 3469              		.loc 1 676 0 is_stmt 0 discriminator 1
 3470 00f0 484B     		ldr	r3, .L172+32
 3471 00f2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3472 00f4 002B     		cmp	r3, #0
 3473 00f6 23D1     		bne	.L164
 677:.\main.c      ****             // update path index
 678:.\main.c      ****     		path_index = next_event_index;
 3474              		.loc 1 678 0 is_stmt 1
 3475 00f8 414B     		ldr	r3, .L172+12
 3476 00fa 1A88     		ldrh	r2, [r3]
 3477 00fc 3E4B     		ldr	r3, .L172+4
 3478 00fe 1A80     		strh	r2, [r3]	@ movhi
 679:.\main.c      ****             flag_new_path_index = 1;
 3479              		.loc 1 679 0
 3480 0100 3C4B     		ldr	r3, .L172
 3481 0102 0122     		movs	r2, #1
 3482 0104 1A70     		strb	r2, [r3]
 680:.\main.c      ****             
 681:.\main.c      ****             // set robot position as light sensor events take priority over quadrature measures
 682:.\main.c      ****             robot_y_pos = path[path_index][0];
 3483              		.loc 1 682 0
 3484 0106 3C4B     		ldr	r3, .L172+4
 3485 0108 1B88     		ldrh	r3, [r3]
 3486 010a 5B00     		lsls	r3, r3, #1
 3487 010c 7A68     		ldr	r2, [r7, #4]
 3488 010e 1344     		add	r3, r3, r2
 3489 0110 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3490 0112 DAB2     		uxtb	r2, r3
 3491 0114 404B     		ldr	r3, .L172+36
 3492 0116 1A70     		strb	r2, [r3]
 683:.\main.c      ****             robot_x_pos = path[path_index][1];
 3493              		.loc 1 683 0
 3494 0118 374B     		ldr	r3, .L172+4
 3495 011a 1B88     		ldrh	r3, [r3]
 3496 011c 5B00     		lsls	r3, r3, #1
 3497 011e 7A68     		ldr	r2, [r7, #4]
 3498 0120 1344     		add	r3, r3, r2
 3499 0122 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 3500 0124 DAB2     		uxtb	r2, r3
 3501 0126 3D4B     		ldr	r3, .L172+40
 3502 0128 1A70     		strb	r2, [r3]
 684:.\main.c      ****             robot_position_index = path_index;
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 75


 3503              		.loc 1 684 0
 3504 012a 334B     		ldr	r3, .L172+4
 3505 012c 1A88     		ldrh	r2, [r3]
 3506 012e 364B     		ldr	r3, .L172+20
 3507 0130 1A80     		strh	r2, [r3]	@ movhi
 685:.\main.c      ****             
 686:.\main.c      ****             // reset flag
 687:.\main.c      ****             flag_next_event_deadend = 0;
 3508              		.loc 1 687 0
 3509 0132 364B     		ldr	r3, .L172+24
 3510 0134 0022     		movs	r2, #0
 3511 0136 1A70     		strb	r2, [r3]
 688:.\main.c      ****             flag_centre_on_line_after_turn = 0;
 3512              		.loc 1 688 0
 3513 0138 354B     		ldr	r3, .L172+28
 3514 013a 0022     		movs	r2, #0
 3515 013c 1A70     		strb	r2, [r3]
 3516 013e 0EE0     		b	.L165
 3517              	.L164:
 689:.\main.c      ****         }
 690:.\main.c      ****         else if (!flag_centre_on_line_after_turn && line_sensor_centre)
 3518              		.loc 1 690 0
 3519 0140 334B     		ldr	r3, .L172+28
 3520 0142 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3521 0144 002B     		cmp	r3, #0
 3522 0146 07D1     		bne	.L166
 3523              		.loc 1 690 0 is_stmt 0 discriminator 1
 3524 0148 324B     		ldr	r3, .L172+32
 3525 014a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3526 014c 002B     		cmp	r3, #0
 3527 014e 03D0     		beq	.L166
 691:.\main.c      ****             flag_centre_on_line_after_turn = 1;
 3528              		.loc 1 691 0 is_stmt 1
 3529 0150 2F4B     		ldr	r3, .L172+28
 3530 0152 0122     		movs	r2, #1
 3531 0154 1A70     		strb	r2, [r3]
 3532 0156 02E0     		b	.L165
 3533              	.L166:
 692:.\main.c      ****         else
 693:.\main.c      ****     		follow_line();
 3534              		.loc 1 693 0
 3535 0158 FFF7FEFF 		bl	follow_line
 3536 015c 45E0     		b	.L158
 3537              	.L165:
 3538 015e 44E0     		b	.L158
 3539              	.L163:
 694:.\main.c      ****     }
 695:.\main.c      ****     // poll intersection sensors for intersection events
 696:.\main.c      **** 	else if (flag_next_event_intersection) {
 3540              		.loc 1 696 0
 3541 0160 2F4B     		ldr	r3, .L172+44
 3542 0162 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3543 0164 002B     		cmp	r3, #0
 3544 0166 40D0     		beq	.L158
 697:.\main.c      ****         // move past intersection before updating position and path index
 698:.\main.c      ****         if (flag_passing_next_int) {
 3545              		.loc 1 698 0
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 76


 3546 0168 2E4B     		ldr	r3, .L172+48
 3547 016a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3548 016c 002B     		cmp	r3, #0
 3549 016e 2ED0     		beq	.L167
 699:.\main.c      ****             // once past intersection so robot centre is on intersection
 700:.\main.c      ****     		if (!int_sensor_left && !int_sensor_right) {
 3550              		.loc 1 700 0
 3551 0170 2D4B     		ldr	r3, .L172+52
 3552 0172 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3553 0174 002B     		cmp	r3, #0
 3554 0176 27D1     		bne	.L168
 3555              		.loc 1 700 0 is_stmt 0 discriminator 1
 3556 0178 2C4B     		ldr	r3, .L172+56
 3557 017a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3558 017c 002B     		cmp	r3, #0
 3559 017e 23D1     		bne	.L168
 701:.\main.c      ****                 // update path index
 702:.\main.c      ****     			path_index = next_event_index;
 3560              		.loc 1 702 0 is_stmt 1
 3561 0180 1F4B     		ldr	r3, .L172+12
 3562 0182 1A88     		ldrh	r2, [r3]
 3563 0184 1C4B     		ldr	r3, .L172+4
 3564 0186 1A80     		strh	r2, [r3]	@ movhi
 703:.\main.c      ****     			flag_new_path_index = 1;
 3565              		.loc 1 703 0
 3566 0188 1A4B     		ldr	r3, .L172
 3567 018a 0122     		movs	r2, #1
 3568 018c 1A70     		strb	r2, [r3]
 704:.\main.c      ****                 
 705:.\main.c      ****                 // set robot position as light sensor events take priority over quadrature measures
 706:.\main.c      ****                 robot_y_pos = path[path_index][0];
 3569              		.loc 1 706 0
 3570 018e 1A4B     		ldr	r3, .L172+4
 3571 0190 1B88     		ldrh	r3, [r3]
 3572 0192 5B00     		lsls	r3, r3, #1
 3573 0194 7A68     		ldr	r2, [r7, #4]
 3574 0196 1344     		add	r3, r3, r2
 3575 0198 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3576 019a DAB2     		uxtb	r2, r3
 3577 019c 1E4B     		ldr	r3, .L172+36
 3578 019e 1A70     		strb	r2, [r3]
 707:.\main.c      ****                 robot_x_pos = path[path_index][1];
 3579              		.loc 1 707 0
 3580 01a0 154B     		ldr	r3, .L172+4
 3581 01a2 1B88     		ldrh	r3, [r3]
 3582 01a4 5B00     		lsls	r3, r3, #1
 3583 01a6 7A68     		ldr	r2, [r7, #4]
 3584 01a8 1344     		add	r3, r3, r2
 3585 01aa 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 3586 01ac DAB2     		uxtb	r2, r3
 3587 01ae 1B4B     		ldr	r3, .L172+40
 3588 01b0 1A70     		strb	r2, [r3]
 708:.\main.c      ****                 robot_position_index = path_index;
 3589              		.loc 1 708 0
 3590 01b2 114B     		ldr	r3, .L172+4
 3591 01b4 1A88     		ldrh	r2, [r3]
 3592 01b6 144B     		ldr	r3, .L172+20
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 77


 3593 01b8 1A80     		strh	r2, [r3]	@ movhi
 709:.\main.c      ****                 
 710:.\main.c      ****                 // reset flags
 711:.\main.c      ****                 flag_passing_next_int = 0;
 3594              		.loc 1 711 0
 3595 01ba 1A4B     		ldr	r3, .L172+48
 3596 01bc 0022     		movs	r2, #0
 3597 01be 1A70     		strb	r2, [r3]
 712:.\main.c      ****                 flag_next_event_intersection = 0;
 3598              		.loc 1 712 0
 3599 01c0 174B     		ldr	r3, .L172+44
 3600 01c2 0022     		movs	r2, #0
 3601 01c4 1A70     		strb	r2, [r3]
 3602 01c6 10E0     		b	.L158
 3603              	.L168:
 713:.\main.c      ****     		}
 714:.\main.c      ****     		else
 715:.\main.c      ****     			follow_line();
 3604              		.loc 1 715 0
 3605 01c8 FFF7FEFF 		bl	follow_line
 3606 01cc 0DE0     		b	.L158
 3607              	.L167:
 716:.\main.c      ****         }
 717:.\main.c      ****         else if (int_sensor_left || int_sensor_right)
 3608              		.loc 1 717 0
 3609 01ce 164B     		ldr	r3, .L172+52
 3610 01d0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3611 01d2 002B     		cmp	r3, #0
 3612 01d4 03D1     		bne	.L170
 3613              		.loc 1 717 0 is_stmt 0 discriminator 1
 3614 01d6 154B     		ldr	r3, .L172+56
 3615 01d8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3616 01da 002B     		cmp	r3, #0
 3617 01dc 03D0     		beq	.L171
 3618              	.L170:
 718:.\main.c      **** 		    flag_passing_next_int = 1;
 3619              		.loc 1 718 0 is_stmt 1
 3620 01de 114B     		ldr	r3, .L172+48
 3621 01e0 0122     		movs	r2, #1
 3622 01e2 1A70     		strb	r2, [r3]
 3623 01e4 01E0     		b	.L158
 3624              	.L171:
 719:.\main.c      ****         else
 720:.\main.c      ****     		follow_line();
 3625              		.loc 1 720 0
 3626 01e6 FFF7FEFF 		bl	follow_line
 3627              	.L158:
 721:.\main.c      ****     }
 722:.\main.c      **** 	return 1;
 3628              		.loc 1 722 0
 3629 01ea 0123     		movs	r3, #1
 3630              	.L155:
 723:.\main.c      **** }
 3631              		.loc 1 723 0
 3632 01ec 1846     		mov	r0, r3
 3633 01ee 0837     		adds	r7, r7, #8
 3634              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 78


 3635 01f0 BD46     		mov	sp, r7
 3636              		.cfi_def_cfa_register 13
 3637              		@ sp needed
 3638 01f2 80BD     		pop	{r7, pc}
 3639              	.L173:
 3640              		.align	2
 3641              	.L172:
 3642 01f4 00000000 		.word	flag_new_path_index
 3643 01f8 00000000 		.word	path_index
 3644 01fc 00000000 		.word	path_orientation
 3645 0200 00000000 		.word	next_event_index
 3646 0204 00000000 		.word	flag_next_event_u_turn
 3647 0208 00000000 		.word	robot_position_index
 3648 020c 00000000 		.word	flag_next_event_deadend
 3649 0210 00000000 		.word	flag_centre_on_line_after_turn
 3650 0214 00000000 		.word	line_sensor_centre
 3651 0218 00000000 		.word	robot_y_pos
 3652 021c 00000000 		.word	robot_x_pos
 3653 0220 00000000 		.word	flag_next_event_intersection
 3654 0224 00000000 		.word	flag_passing_next_int
 3655 0228 00000000 		.word	int_sensor_left
 3656 022c 00000000 		.word	int_sensor_right
 3657              		.cfi_endproc
 3658              	.LFE77:
 3659              		.size	follow_path, .-follow_path
 3660              		.section	.text.follow_line,"ax",%progbits
 3661              		.align	2
 3662              		.global	follow_line
 3663              		.thumb
 3664              		.thumb_func
 3665              		.type	follow_line, %function
 3666              	follow_line:
 3667              	.LFB78:
 724:.\main.c      **** //* ========================================
 725:.\main.c      **** /*
 726:.\main.c      **** Uses light sensors to follow along a straight line, ignoring intersections.
 727:.\main.c      **** */
 728:.\main.c      **** void follow_line()
 729:.\main.c      **** {
 3668              		.loc 1 729 0
 3669              		.cfi_startproc
 3670              		@ args = 0, pretend = 0, frame = 0
 3671              		@ frame_needed = 1, uses_anonymous_args = 0
 3672 0000 80B5     		push	{r7, lr}
 3673              		.cfi_def_cfa_offset 8
 3674              		.cfi_offset 7, -8
 3675              		.cfi_offset 14, -4
 3676 0002 00AF     		add	r7, sp, #0
 3677              		.cfi_def_cfa_register 7
 730:.\main.c      ****     // both line sensors off line and veering -> move straight
 731:.\main.c      ****     if (!line_sensor_left && !line_sensor_right && flag_veering) {
 3678              		.loc 1 731 0
 3679 0004 4E4B     		ldr	r3, .L184
 3680 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3681 0008 002B     		cmp	r3, #0
 3682 000a 10D1     		bne	.L175
 3683              		.loc 1 731 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 79


 3684 000c 4D4B     		ldr	r3, .L184+4
 3685 000e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3686 0010 002B     		cmp	r3, #0
 3687 0012 0CD1     		bne	.L175
 3688              		.loc 1 731 0 discriminator 2
 3689 0014 4C4B     		ldr	r3, .L184+8
 3690 0016 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3691 0018 002B     		cmp	r3, #0
 3692 001a 08D0     		beq	.L175
 732:.\main.c      ****         PWM_2_WriteCompare(pwm_cmp_right);
 3693              		.loc 1 732 0 is_stmt 1
 3694 001c 4B4B     		ldr	r3, .L184+12
 3695 001e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3696 0020 1846     		mov	r0, r3
 3697 0022 FFF7FEFF 		bl	PWM_2_WriteCompare
 733:.\main.c      ****         flag_veering = 0;
 3698              		.loc 1 733 0
 3699 0026 484B     		ldr	r3, .L184+8
 3700 0028 0022     		movs	r2, #0
 3701 002a 1A70     		strb	r2, [r3]
 3702 002c 86E0     		b	.L174
 3703              	.L175:
 734:.\main.c      ****     }
 735:.\main.c      ****     // left line and int on line -> ignore intersection
 736:.\main.c      ****     else if (line_sensor_left && int_sensor_left) {
 3704              		.loc 1 736 0
 3705 002e 444B     		ldr	r3, .L184
 3706 0030 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3707 0032 002B     		cmp	r3, #0
 3708 0034 28D0     		beq	.L177
 3709              		.loc 1 736 0 is_stmt 0 discriminator 1
 3710 0036 464B     		ldr	r3, .L184+16
 3711 0038 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3712 003a 002B     		cmp	r3, #0
 3713 003c 24D0     		beq	.L177
 737:.\main.c      ****         // use line right to keep straight
 738:.\main.c      ****         if (line_sensor_right && !flag_veering) {
 3714              		.loc 1 738 0 is_stmt 1
 3715 003e 414B     		ldr	r3, .L184+4
 3716 0040 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3717 0042 002B     		cmp	r3, #0
 3718 0044 0ED0     		beq	.L178
 3719              		.loc 1 738 0 is_stmt 0 discriminator 1
 3720 0046 404B     		ldr	r3, .L184+8
 3721 0048 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3722 004a 002B     		cmp	r3, #0
 3723 004c 0AD1     		bne	.L178
 739:.\main.c      ****             PWM_2_WriteCompare(pwm_cmp_right - PWM_VEER_ADJUST);
 3724              		.loc 1 739 0 is_stmt 1
 3725 004e 3F4B     		ldr	r3, .L184+12
 3726 0050 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3727 0052 0F3B     		subs	r3, r3, #15
 3728 0054 DBB2     		uxtb	r3, r3
 3729 0056 1846     		mov	r0, r3
 3730 0058 FFF7FEFF 		bl	PWM_2_WriteCompare
 740:.\main.c      ****             flag_veering = 1;
 3731              		.loc 1 740 0
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 80


 3732 005c 3A4B     		ldr	r3, .L184+8
 3733 005e 0122     		movs	r2, #1
 3734 0060 1A70     		strb	r2, [r3]
 3735 0062 10E0     		b	.L179
 3736              	.L178:
 741:.\main.c      ****         }
 742:.\main.c      ****         else if (!line_sensor_right && flag_veering) {
 3737              		.loc 1 742 0
 3738 0064 374B     		ldr	r3, .L184+4
 3739 0066 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3740 0068 002B     		cmp	r3, #0
 3741 006a 0CD1     		bne	.L179
 3742              		.loc 1 742 0 is_stmt 0 discriminator 1
 3743 006c 364B     		ldr	r3, .L184+8
 3744 006e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3745 0070 002B     		cmp	r3, #0
 3746 0072 08D0     		beq	.L179
 743:.\main.c      ****             PWM_2_WriteCompare(pwm_cmp_right);
 3747              		.loc 1 743 0 is_stmt 1
 3748 0074 354B     		ldr	r3, .L184+12
 3749 0076 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3750 0078 1846     		mov	r0, r3
 3751 007a FFF7FEFF 		bl	PWM_2_WriteCompare
 744:.\main.c      ****             flag_veering = 0;
 3752              		.loc 1 744 0
 3753 007e 324B     		ldr	r3, .L184+8
 3754 0080 0022     		movs	r2, #0
 3755 0082 1A70     		strb	r2, [r3]
 738:.\main.c      ****             PWM_2_WriteCompare(pwm_cmp_right - PWM_VEER_ADJUST);
 3756              		.loc 1 738 0
 3757 0084 5AE0     		b	.L174
 3758              	.L179:
 3759 0086 59E0     		b	.L174
 3760              	.L177:
 745:.\main.c      ****         }
 746:.\main.c      ****     }
 747:.\main.c      ****     // right line and int on line -> ignore intersection
 748:.\main.c      ****     else if (line_sensor_right && int_sensor_right) {
 3761              		.loc 1 748 0
 3762 0088 2E4B     		ldr	r3, .L184+4
 3763 008a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3764 008c 002B     		cmp	r3, #0
 3765 008e 28D0     		beq	.L180
 3766              		.loc 1 748 0 is_stmt 0 discriminator 1
 3767 0090 304B     		ldr	r3, .L184+20
 3768 0092 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3769 0094 002B     		cmp	r3, #0
 3770 0096 24D0     		beq	.L180
 749:.\main.c      ****         // use line left to keep straight
 750:.\main.c      ****         if (line_sensor_left && !flag_veering) {
 3771              		.loc 1 750 0 is_stmt 1
 3772 0098 294B     		ldr	r3, .L184
 3773 009a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3774 009c 002B     		cmp	r3, #0
 3775 009e 0ED0     		beq	.L181
 3776              		.loc 1 750 0 is_stmt 0 discriminator 1
 3777 00a0 294B     		ldr	r3, .L184+8
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 81


 3778 00a2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3779 00a4 002B     		cmp	r3, #0
 3780 00a6 0AD1     		bne	.L181
 751:.\main.c      ****             PWM_2_WriteCompare(pwm_cmp_right + PWM_VEER_ADJUST);
 3781              		.loc 1 751 0 is_stmt 1
 3782 00a8 284B     		ldr	r3, .L184+12
 3783 00aa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3784 00ac 0F33     		adds	r3, r3, #15
 3785 00ae DBB2     		uxtb	r3, r3
 3786 00b0 1846     		mov	r0, r3
 3787 00b2 FFF7FEFF 		bl	PWM_2_WriteCompare
 752:.\main.c      ****             flag_veering = 1;
 3788              		.loc 1 752 0
 3789 00b6 244B     		ldr	r3, .L184+8
 3790 00b8 0122     		movs	r2, #1
 3791 00ba 1A70     		strb	r2, [r3]
 3792 00bc 10E0     		b	.L182
 3793              	.L181:
 753:.\main.c      ****         }
 754:.\main.c      ****         else if (!line_sensor_left && flag_veering) {
 3794              		.loc 1 754 0
 3795 00be 204B     		ldr	r3, .L184
 3796 00c0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3797 00c2 002B     		cmp	r3, #0
 3798 00c4 0CD1     		bne	.L182
 3799              		.loc 1 754 0 is_stmt 0 discriminator 1
 3800 00c6 204B     		ldr	r3, .L184+8
 3801 00c8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3802 00ca 002B     		cmp	r3, #0
 3803 00cc 08D0     		beq	.L182
 755:.\main.c      ****             PWM_2_WriteCompare(pwm_cmp_right);
 3804              		.loc 1 755 0 is_stmt 1
 3805 00ce 1F4B     		ldr	r3, .L184+12
 3806 00d0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3807 00d2 1846     		mov	r0, r3
 3808 00d4 FFF7FEFF 		bl	PWM_2_WriteCompare
 756:.\main.c      ****             flag_veering = 0;
 3809              		.loc 1 756 0
 3810 00d8 1B4B     		ldr	r3, .L184+8
 3811 00da 0022     		movs	r2, #0
 3812 00dc 1A70     		strb	r2, [r3]
 750:.\main.c      ****             PWM_2_WriteCompare(pwm_cmp_right + PWM_VEER_ADJUST);
 3813              		.loc 1 750 0
 3814 00de 2DE0     		b	.L174
 3815              	.L182:
 3816 00e0 2CE0     		b	.L174
 3817              	.L180:
 757:.\main.c      ****         }
 758:.\main.c      ****     }
 759:.\main.c      ****     // follow line -> no intersection
 760:.\main.c      ****     else if (line_sensor_left && !int_sensor_left && !flag_veering) {
 3818              		.loc 1 760 0
 3819 00e2 174B     		ldr	r3, .L184
 3820 00e4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3821 00e6 002B     		cmp	r3, #0
 3822 00e8 12D0     		beq	.L183
 3823              		.loc 1 760 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 82


 3824 00ea 194B     		ldr	r3, .L184+16
 3825 00ec 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3826 00ee 002B     		cmp	r3, #0
 3827 00f0 0ED1     		bne	.L183
 3828              		.loc 1 760 0 discriminator 2
 3829 00f2 154B     		ldr	r3, .L184+8
 3830 00f4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3831 00f6 002B     		cmp	r3, #0
 3832 00f8 0AD1     		bne	.L183
 761:.\main.c      ****         PWM_2_WriteCompare(pwm_cmp_right + PWM_VEER_ADJUST);
 3833              		.loc 1 761 0 is_stmt 1
 3834 00fa 144B     		ldr	r3, .L184+12
 3835 00fc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3836 00fe 0F33     		adds	r3, r3, #15
 3837 0100 DBB2     		uxtb	r3, r3
 3838 0102 1846     		mov	r0, r3
 3839 0104 FFF7FEFF 		bl	PWM_2_WriteCompare
 762:.\main.c      ****         flag_veering = 1;
 3840              		.loc 1 762 0
 3841 0108 0F4B     		ldr	r3, .L184+8
 3842 010a 0122     		movs	r2, #1
 3843 010c 1A70     		strb	r2, [r3]
 3844 010e 15E0     		b	.L174
 3845              	.L183:
 763:.\main.c      ****     }
 764:.\main.c      ****     else if (line_sensor_right && !int_sensor_right && robot_direction != TURNING_RIGHT) {
 3846              		.loc 1 764 0
 3847 0110 0C4B     		ldr	r3, .L184+4
 3848 0112 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3849 0114 002B     		cmp	r3, #0
 3850 0116 11D0     		beq	.L174
 3851              		.loc 1 764 0 is_stmt 0 discriminator 1
 3852 0118 0E4B     		ldr	r3, .L184+20
 3853 011a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3854 011c 002B     		cmp	r3, #0
 3855 011e 0DD1     		bne	.L174
 3856              		.loc 1 764 0 discriminator 2
 3857 0120 0D4B     		ldr	r3, .L184+24
 3858 0122 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3859 0124 012B     		cmp	r3, #1
 3860 0126 09D0     		beq	.L174
 765:.\main.c      ****         PWM_2_WriteCompare(pwm_cmp_right - PWM_VEER_ADJUST);
 3861              		.loc 1 765 0 is_stmt 1
 3862 0128 084B     		ldr	r3, .L184+12
 3863 012a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3864 012c 0F3B     		subs	r3, r3, #15
 3865 012e DBB2     		uxtb	r3, r3
 3866 0130 1846     		mov	r0, r3
 3867 0132 FFF7FEFF 		bl	PWM_2_WriteCompare
 766:.\main.c      ****         flag_veering = 1;
 3868              		.loc 1 766 0
 3869 0136 044B     		ldr	r3, .L184+8
 3870 0138 0122     		movs	r2, #1
 3871 013a 1A70     		strb	r2, [r3]
 3872              	.L174:
 767:.\main.c      ****     }
 768:.\main.c      **** }
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 83


 3873              		.loc 1 768 0
 3874 013c 80BD     		pop	{r7, pc}
 3875              	.L185:
 3876 013e 00BF     		.align	2
 3877              	.L184:
 3878 0140 00000000 		.word	line_sensor_left
 3879 0144 00000000 		.word	line_sensor_right
 3880 0148 00000000 		.word	flag_veering
 3881 014c 00000000 		.word	pwm_cmp_right
 3882 0150 00000000 		.word	int_sensor_left
 3883 0154 00000000 		.word	int_sensor_right
 3884 0158 00000000 		.word	robot_direction
 3885              		.cfi_endproc
 3886              	.LFE78:
 3887              		.size	follow_line, .-follow_line
 3888              		.section	.text.turn_robot,"ax",%progbits
 3889              		.align	2
 3890              		.global	turn_robot
 3891              		.thumb
 3892              		.thumb_func
 3893              		.type	turn_robot, %function
 3894              	turn_robot:
 3895              	.LFB79:
 769:.\main.c      **** //* ========================================
 770:.\main.c      **** /*
 771:.\main.c      **** Determines whether robot must turn left, right or around to stay on
 772:.\main.c      **** path and turns robot.
 773:.\main.c      **** */
 774:.\main.c      **** void turn_robot(int8 path[][2])
 775:.\main.c      **** {
 3896              		.loc 1 775 0
 3897              		.cfi_startproc
 3898              		@ args = 0, pretend = 0, frame = 16
 3899              		@ frame_needed = 1, uses_anonymous_args = 0
 3900 0000 80B5     		push	{r7, lr}
 3901              		.cfi_def_cfa_offset 8
 3902              		.cfi_offset 7, -8
 3903              		.cfi_offset 14, -4
 3904 0002 84B0     		sub	sp, sp, #16
 3905              		.cfi_def_cfa_offset 24
 3906 0004 00AF     		add	r7, sp, #0
 3907              		.cfi_def_cfa_register 7
 3908 0006 7860     		str	r0, [r7, #4]
 776:.\main.c      ****     // stop robot
 777:.\main.c      ****     CyDelay(80);
 3909              		.loc 1 777 0
 3910 0008 5020     		movs	r0, #80
 3911 000a FFF7FEFF 		bl	CyDelay
 778:.\main.c      ****     COAST_OFF
 3912              		.loc 1 778 0
 3913 000e 0020     		movs	r0, #0
 3914 0010 FFF7FEFF 		bl	H_BRIDGE_CONTROL_Write
 779:.\main.c      ****     CyDelay(200);
 3915              		.loc 1 779 0
 3916 0014 C820     		movs	r0, #200
 3917 0016 FFF7FEFF 		bl	CyDelay
 780:.\main.c      ****     
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 84


 781:.\main.c      ****     // ensure pwm values not for veering so they are equal
 782:.\main.c      ****     PWM_2_WriteCompare(pwm_cmp_right);
 3918              		.loc 1 782 0
 3919 001a 774B     		ldr	r3, .L202
 3920 001c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3921 001e 1846     		mov	r0, r3
 3922 0020 FFF7FEFF 		bl	PWM_2_WriteCompare
 783:.\main.c      ****     flag_veering = 0;
 3923              		.loc 1 783 0
 3924 0024 754B     		ldr	r3, .L202+4
 3925 0026 0022     		movs	r2, #0
 3926 0028 1A70     		strb	r2, [r3]
 784:.\main.c      ****     
 785:.\main.c      ****     uint8 new_orient;
 786:.\main.c      ****     // check if robot needs to turn left to follow path
 787:.\main.c      ****     (robot_orientation == UP) ? (new_orient = LEFT) : (new_orient = robot_orientation - 1);
 3927              		.loc 1 787 0
 3928 002a 754B     		ldr	r3, .L202+8
 3929 002c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3930 002e 002B     		cmp	r3, #0
 3931 0030 02D1     		bne	.L187
 3932              		.loc 1 787 0 is_stmt 0 discriminator 1
 3933 0032 0323     		movs	r3, #3
 3934 0034 FB73     		strb	r3, [r7, #15]
 3935 0036 03E0     		b	.L188
 3936              	.L187:
 3937              		.loc 1 787 0 discriminator 2
 3938 0038 714B     		ldr	r3, .L202+8
 3939 003a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3940 003c 013B     		subs	r3, r3, #1
 3941 003e FB73     		strb	r3, [r7, #15]
 3942              	.L188:
 788:.\main.c      ****     if (PATH_CHANGED_TO(new_orient)) {
 3943              		.loc 1 788 0 is_stmt 1
 3944 0040 704B     		ldr	r3, .L202+12
 3945 0042 1B88     		ldrh	r3, [r3]
 3946 0044 5B00     		lsls	r3, r3, #1
 3947 0046 7A68     		ldr	r2, [r7, #4]
 3948 0048 1344     		add	r3, r3, r2
 3949 004a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3950 004c 5AB2     		sxtb	r2, r3
 3951 004e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 3952 0050 6D49     		ldr	r1, .L202+16
 3953 0052 11F81330 		ldrb	r3, [r1, r3, lsl #1]	@ zero_extendqisi2
 3954 0056 5BB2     		sxtb	r3, r3
 3955 0058 1A44     		add	r2, r2, r3
 3956 005a 6A4B     		ldr	r3, .L202+12
 3957 005c 1B88     		ldrh	r3, [r3]
 3958 005e 0133     		adds	r3, r3, #1
 3959 0060 5B00     		lsls	r3, r3, #1
 3960 0062 7968     		ldr	r1, [r7, #4]
 3961 0064 0B44     		add	r3, r3, r1
 3962 0066 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3963 0068 5BB2     		sxtb	r3, r3
 3964 006a 9A42     		cmp	r2, r3
 3965 006c 27D1     		bne	.L189
 3966              		.loc 1 788 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 85


 3967 006e 654B     		ldr	r3, .L202+12
 3968 0070 1B88     		ldrh	r3, [r3]
 3969 0072 5B00     		lsls	r3, r3, #1
 3970 0074 7A68     		ldr	r2, [r7, #4]
 3971 0076 1344     		add	r3, r3, r2
 3972 0078 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 3973 007a 5AB2     		sxtb	r2, r3
 3974 007c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 3975 007e 6249     		ldr	r1, .L202+16
 3976 0080 5B00     		lsls	r3, r3, #1
 3977 0082 0B44     		add	r3, r3, r1
 3978 0084 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 3979 0086 5BB2     		sxtb	r3, r3
 3980 0088 1A44     		add	r2, r2, r3
 3981 008a 5E4B     		ldr	r3, .L202+12
 3982 008c 1B88     		ldrh	r3, [r3]
 3983 008e 0133     		adds	r3, r3, #1
 3984 0090 5B00     		lsls	r3, r3, #1
 3985 0092 7968     		ldr	r1, [r7, #4]
 3986 0094 0B44     		add	r3, r3, r1
 3987 0096 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 3988 0098 5BB2     		sxtb	r3, r3
 3989 009a 9A42     		cmp	r2, r3
 3990 009c 0FD1     		bne	.L189
 789:.\main.c      ****         // turn robot left
 790:.\main.c      ****         robot_orientation = new_orient;
 3991              		.loc 1 790 0 is_stmt 1
 3992 009e 584A     		ldr	r2, .L202+8
 3993 00a0 FB7B     		ldrb	r3, [r7, #15]
 3994 00a2 1370     		strb	r3, [r2]
 791:.\main.c      ****         path_orientation = &orientation[robot_orientation][0];
 3995              		.loc 1 791 0
 3996 00a4 564B     		ldr	r3, .L202+8
 3997 00a6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3998 00a8 5B00     		lsls	r3, r3, #1
 3999 00aa 574A     		ldr	r2, .L202+16
 4000 00ac 1344     		add	r3, r3, r2
 4001 00ae 574A     		ldr	r2, .L202+20
 4002 00b0 1360     		str	r3, [r2]
 792:.\main.c      ****         TURN_LEFT
 4003              		.loc 1 792 0
 4004 00b2 0120     		movs	r0, #1
 4005 00b4 FFF7FEFF 		bl	PWM_CONTROL_Write
 793:.\main.c      ****         robot_direction = TURNING_LEFT;
 4006              		.loc 1 793 0
 4007 00b8 554B     		ldr	r3, .L202+24
 4008 00ba 0322     		movs	r2, #3
 4009 00bc 1A70     		strb	r2, [r3]
 4010              	.L189:
 794:.\main.c      ****     }
 795:.\main.c      ****     
 796:.\main.c      ****     // check if robot needs to turn right or around to follow path
 797:.\main.c      ****     if (robot_direction != TURNING_LEFT) {
 4011              		.loc 1 797 0
 4012 00be 544B     		ldr	r3, .L202+24
 4013 00c0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4014 00c2 032B     		cmp	r3, #3
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 86


 4015 00c4 59D0     		beq	.L190
 798:.\main.c      ****         // if robot does not need to turn right it needs to turn around
 799:.\main.c      ****         (robot_orientation == LEFT) ? (new_orient = UP) : (new_orient = robot_orientation + 1);
 4016              		.loc 1 799 0
 4017 00c6 4E4B     		ldr	r3, .L202+8
 4018 00c8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4019 00ca 032B     		cmp	r3, #3
 4020 00cc 02D1     		bne	.L191
 4021              		.loc 1 799 0 is_stmt 0 discriminator 1
 4022 00ce 0023     		movs	r3, #0
 4023 00d0 FB73     		strb	r3, [r7, #15]
 4024 00d2 03E0     		b	.L192
 4025              	.L191:
 4026              		.loc 1 799 0 discriminator 2
 4027 00d4 4A4B     		ldr	r3, .L202+8
 4028 00d6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4029 00d8 0133     		adds	r3, r3, #1
 4030 00da FB73     		strb	r3, [r7, #15]
 4031              	.L192:
 800:.\main.c      ****         if (!PATH_CHANGED_TO(new_orient)) {
 4032              		.loc 1 800 0 is_stmt 1
 4033 00dc 494B     		ldr	r3, .L202+12
 4034 00de 1B88     		ldrh	r3, [r3]
 4035 00e0 5B00     		lsls	r3, r3, #1
 4036 00e2 7A68     		ldr	r2, [r7, #4]
 4037 00e4 1344     		add	r3, r3, r2
 4038 00e6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4039 00e8 5AB2     		sxtb	r2, r3
 4040 00ea FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 4041 00ec 4649     		ldr	r1, .L202+16
 4042 00ee 11F81330 		ldrb	r3, [r1, r3, lsl #1]	@ zero_extendqisi2
 4043 00f2 5BB2     		sxtb	r3, r3
 4044 00f4 1A44     		add	r2, r2, r3
 4045 00f6 434B     		ldr	r3, .L202+12
 4046 00f8 1B88     		ldrh	r3, [r3]
 4047 00fa 0133     		adds	r3, r3, #1
 4048 00fc 5B00     		lsls	r3, r3, #1
 4049 00fe 7968     		ldr	r1, [r7, #4]
 4050 0100 0B44     		add	r3, r3, r1
 4051 0102 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4052 0104 5BB2     		sxtb	r3, r3
 4053 0106 9A42     		cmp	r2, r3
 4054 0108 17D1     		bne	.L193
 4055              		.loc 1 800 0 is_stmt 0 discriminator 1
 4056 010a 3E4B     		ldr	r3, .L202+12
 4057 010c 1B88     		ldrh	r3, [r3]
 4058 010e 5B00     		lsls	r3, r3, #1
 4059 0110 7A68     		ldr	r2, [r7, #4]
 4060 0112 1344     		add	r3, r3, r2
 4061 0114 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 4062 0116 5AB2     		sxtb	r2, r3
 4063 0118 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 4064 011a 3B49     		ldr	r1, .L202+16
 4065 011c 5B00     		lsls	r3, r3, #1
 4066 011e 0B44     		add	r3, r3, r1
 4067 0120 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 4068 0122 5BB2     		sxtb	r3, r3
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 87


 4069 0124 1A44     		add	r2, r2, r3
 4070 0126 374B     		ldr	r3, .L202+12
 4071 0128 1B88     		ldrh	r3, [r3]
 4072 012a 0133     		adds	r3, r3, #1
 4073 012c 5B00     		lsls	r3, r3, #1
 4074 012e 7968     		ldr	r1, [r7, #4]
 4075 0130 0B44     		add	r3, r3, r1
 4076 0132 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 4077 0134 5BB2     		sxtb	r3, r3
 4078 0136 9A42     		cmp	r2, r3
 4079 0138 0FD0     		beq	.L194
 4080              	.L193:
 801:.\main.c      ****             flag_turn_around = 1;
 4081              		.loc 1 801 0 is_stmt 1
 4082 013a 364B     		ldr	r3, .L202+28
 4083 013c 0122     		movs	r2, #1
 4084 013e 1A70     		strb	r2, [r3]
 802:.\main.c      ****             // set new orienattion to 180 degrees
 803:.\main.c      ****             (new_orient == LEFT) ? (robot_orientation = UP) : (robot_orientation = new_orient + 1);
 4085              		.loc 1 803 0
 4086 0140 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 4087 0142 032B     		cmp	r3, #3
 4088 0144 03D1     		bne	.L195
 4089              		.loc 1 803 0 is_stmt 0 discriminator 1
 4090 0146 2E4B     		ldr	r3, .L202+8
 4091 0148 0022     		movs	r2, #0
 4092 014a 1A70     		strb	r2, [r3]
 4093 014c 08E0     		b	.L197
 4094              	.L195:
 4095              		.loc 1 803 0 discriminator 2
 4096 014e FB7B     		ldrb	r3, [r7, #15]
 4097 0150 0133     		adds	r3, r3, #1
 4098 0152 DAB2     		uxtb	r2, r3
 4099 0154 2A4B     		ldr	r3, .L202+8
 4100 0156 1A70     		strb	r2, [r3]
 4101 0158 02E0     		b	.L197
 4102              	.L194:
 804:.\main.c      ****         }
 805:.\main.c      ****         else
 806:.\main.c      ****             robot_orientation = new_orient;
 4103              		.loc 1 806 0 is_stmt 1
 4104 015a 294A     		ldr	r2, .L202+8
 4105 015c FB7B     		ldrb	r3, [r7, #15]
 4106 015e 1370     		strb	r3, [r2]
 4107              	.L197:
 807:.\main.c      ****         // turn robot
 808:.\main.c      ****         path_orientation = &orientation[robot_orientation][0];
 4108              		.loc 1 808 0
 4109 0160 274B     		ldr	r3, .L202+8
 4110 0162 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4111 0164 5B00     		lsls	r3, r3, #1
 4112 0166 284A     		ldr	r2, .L202+16
 4113 0168 1344     		add	r3, r3, r2
 4114 016a 284A     		ldr	r2, .L202+20
 4115 016c 1360     		str	r3, [r2]
 809:.\main.c      ****         TURN_RIGHT
 4116              		.loc 1 809 0
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 88


 4117 016e 0220     		movs	r0, #2
 4118 0170 FFF7FEFF 		bl	PWM_CONTROL_Write
 810:.\main.c      ****         robot_direction = TURNING_RIGHT;
 4119              		.loc 1 810 0
 4120 0174 264B     		ldr	r3, .L202+24
 4121 0176 0122     		movs	r2, #1
 4122 0178 1A70     		strb	r2, [r3]
 4123              	.L190:
 811:.\main.c      ****     }
 812:.\main.c      ****     
 813:.\main.c      ****     // reset quadrature and start robot so it starts turning
 814:.\main.c      ****     QuadDec_M1_SetCounter(0);
 4124              		.loc 1 814 0
 4125 017a 0020     		movs	r0, #0
 4126 017c FFF7FEFF 		bl	QuadDec_M1_SetCounter
 815:.\main.c      ****     QuadDec_M2_SetCounter(0);
 4127              		.loc 1 815 0
 4128 0180 0020     		movs	r0, #0
 4129 0182 FFF7FEFF 		bl	QuadDec_M2_SetCounter
 816:.\main.c      ****     COAST_ON
 4130              		.loc 1 816 0
 4131 0186 0120     		movs	r0, #1
 4132 0188 FFF7FEFF 		bl	H_BRIDGE_CONTROL_Write
 817:.\main.c      ****     
 818:.\main.c      ****     // measure quadrature to turm either 90 or 180 degrees
 819:.\main.c      ****     uint8 turn_quad;
 820:.\main.c      ****     (flag_turn_around) ? (turn_quad = 195) : (turn_quad = 93);
 4133              		.loc 1 820 0
 4134 018c 214B     		ldr	r3, .L202+28
 4135 018e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4136 0190 002B     		cmp	r3, #0
 4137 0192 02D0     		beq	.L198
 4138              		.loc 1 820 0 is_stmt 0 discriminator 1
 4139 0194 C323     		movs	r3, #195
 4140 0196 BB73     		strb	r3, [r7, #14]
 4141 0198 01E0     		b	.L199
 4142              	.L198:
 4143              		.loc 1 820 0 discriminator 2
 4144 019a 5D23     		movs	r3, #93
 4145 019c BB73     		strb	r3, [r7, #14]
 4146              	.L199:
 821:.\main.c      ****     do {
 822:.\main.c      ****         get_wheel_quadrature();
 4147              		.loc 1 822 0 is_stmt 1
 4148 019e FFF7FEFF 		bl	get_wheel_quadrature
 823:.\main.c      ****         // once partial turn complete use line sensor to ensure not over turning
 824:.\main.c      ****         if (quad_cnt_left > 120 && line_sensor_left) {
 4149              		.loc 1 824 0
 4150 01a2 1D4B     		ldr	r3, .L202+32
 4151 01a4 1B88     		ldrh	r3, [r3]
 4152 01a6 1BB2     		sxth	r3, r3
 4153 01a8 782B     		cmp	r3, #120
 4154 01aa 04DD     		ble	.L200
 4155              		.loc 1 824 0 is_stmt 0 discriminator 1
 4156 01ac 1B4B     		ldr	r3, .L202+36
 4157 01ae 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4158 01b0 002B     		cmp	r3, #0
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 89


 4159 01b2 00D0     		beq	.L200
 825:.\main.c      ****             break;
 4160              		.loc 1 825 0 is_stmt 1
 4161 01b4 05E0     		b	.L201
 4162              	.L200:
 826:.\main.c      ****         }
 827:.\main.c      ****     } while (quad_cnt_left < turn_quad);
 4163              		.loc 1 827 0
 4164 01b6 184B     		ldr	r3, .L202+32
 4165 01b8 1B88     		ldrh	r3, [r3]
 4166 01ba 1AB2     		sxth	r2, r3
 4167 01bc BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 4168 01be 9A42     		cmp	r2, r3
 4169 01c0 EDDB     		blt	.L199
 4170              	.L201:
 828:.\main.c      ****     
 829:.\main.c      ****     // stop robot
 830:.\main.c      ****     COAST_OFF
 4171              		.loc 1 830 0
 4172 01c2 0020     		movs	r0, #0
 4173 01c4 FFF7FEFF 		bl	H_BRIDGE_CONTROL_Write
 831:.\main.c      ****     CyDelay(200);
 4174              		.loc 1 831 0
 4175 01c8 C820     		movs	r0, #200
 4176 01ca FFF7FEFF 		bl	CyDelay
 832:.\main.c      ****     flag_turn_around = 0;
 4177              		.loc 1 832 0
 4178 01ce 114B     		ldr	r3, .L202+28
 4179 01d0 0022     		movs	r2, #0
 4180 01d2 1A70     		strb	r2, [r3]
 833:.\main.c      ****     
 834:.\main.c      ****     // reset quadrature and start moving robot forward after turn
 835:.\main.c      ****     MOVE_FORWARD
 4181              		.loc 1 835 0
 4182 01d4 0020     		movs	r0, #0
 4183 01d6 FFF7FEFF 		bl	PWM_CONTROL_Write
 836:.\main.c      ****     robot_direction = FORWARD;
 4184              		.loc 1 836 0
 4185 01da 0D4B     		ldr	r3, .L202+24
 4186 01dc 0022     		movs	r2, #0
 4187 01de 1A70     		strb	r2, [r3]
 837:.\main.c      ****     QuadDec_M1_SetCounter(0);
 4188              		.loc 1 837 0
 4189 01e0 0020     		movs	r0, #0
 4190 01e2 FFF7FEFF 		bl	QuadDec_M1_SetCounter
 838:.\main.c      ****     QuadDec_M2_SetCounter(0);
 4191              		.loc 1 838 0
 4192 01e6 0020     		movs	r0, #0
 4193 01e8 FFF7FEFF 		bl	QuadDec_M2_SetCounter
 839:.\main.c      ****     COAST_ON
 4194              		.loc 1 839 0
 4195 01ec 0120     		movs	r0, #1
 4196 01ee FFF7FEFF 		bl	H_BRIDGE_CONTROL_Write
 840:.\main.c      **** }
 4197              		.loc 1 840 0
 4198 01f2 1037     		adds	r7, r7, #16
 4199              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 90


 4200 01f4 BD46     		mov	sp, r7
 4201              		.cfi_def_cfa_register 13
 4202              		@ sp needed
 4203 01f6 80BD     		pop	{r7, pc}
 4204              	.L203:
 4205              		.align	2
 4206              	.L202:
 4207 01f8 00000000 		.word	pwm_cmp_right
 4208 01fc 00000000 		.word	flag_veering
 4209 0200 00000000 		.word	robot_orientation
 4210 0204 00000000 		.word	path_index
 4211 0208 00000000 		.word	orientation
 4212 020c 00000000 		.word	path_orientation
 4213 0210 00000000 		.word	robot_direction
 4214 0214 00000000 		.word	flag_turn_around
 4215 0218 00000000 		.word	quad_cnt_left
 4216 021c 00000000 		.word	line_sensor_left
 4217              		.cfi_endproc
 4218              	.LFE79:
 4219              		.size	turn_robot, .-turn_robot
 4220              		.section	.text.get_light_sensors,"ax",%progbits
 4221              		.align	2
 4222              		.global	get_light_sensors
 4223              		.thumb
 4224              		.thumb_func
 4225              		.type	get_light_sensors, %function
 4226              	get_light_sensors:
 4227              	.LFB80:
 841:.\main.c      **** //* ========================================
 842:.\main.c      **** //* Robot Sensors */
 843:.\main.c      **** //* ========================================
 844:.\main.c      **** void get_light_sensors()
 845:.\main.c      **** {
 4228              		.loc 1 845 0
 4229              		.cfi_startproc
 4230              		@ args = 0, pretend = 0, frame = 0
 4231              		@ frame_needed = 1, uses_anonymous_args = 0
 4232 0000 80B5     		push	{r7, lr}
 4233              		.cfi_def_cfa_offset 8
 4234              		.cfi_offset 7, -8
 4235              		.cfi_offset 14, -4
 4236 0002 00AF     		add	r7, sp, #0
 4237              		.cfi_def_cfa_register 7
 846:.\main.c      ****     // read light sensors
 847:.\main.c      ****     int_sensor_left = INT_SENSOR_LEFT_Read();
 4238              		.loc 1 847 0
 4239 0004 FFF7FEFF 		bl	INT_SENSOR_LEFT_Read
 4240 0008 0346     		mov	r3, r0
 4241 000a 1A46     		mov	r2, r3
 4242 000c 0D4B     		ldr	r3, .L205
 4243 000e 1A70     		strb	r2, [r3]
 848:.\main.c      ****     int_sensor_right = INT_SENSOR_RIGHT_Read();
 4244              		.loc 1 848 0
 4245 0010 FFF7FEFF 		bl	INT_SENSOR_RIGHT_Read
 4246 0014 0346     		mov	r3, r0
 4247 0016 1A46     		mov	r2, r3
 4248 0018 0B4B     		ldr	r3, .L205+4
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 91


 4249 001a 1A70     		strb	r2, [r3]
 849:.\main.c      ****     line_sensor_centre = LINE_SENSOR_CENTRE_Read();
 4250              		.loc 1 849 0
 4251 001c FFF7FEFF 		bl	LINE_SENSOR_CENTRE_Read
 4252 0020 0346     		mov	r3, r0
 4253 0022 1A46     		mov	r2, r3
 4254 0024 094B     		ldr	r3, .L205+8
 4255 0026 1A70     		strb	r2, [r3]
 850:.\main.c      ****     line_sensor_left = LINE_SENSOR_LEFT_Read();
 4256              		.loc 1 850 0
 4257 0028 FFF7FEFF 		bl	LINE_SENSOR_LEFT_Read
 4258 002c 0346     		mov	r3, r0
 4259 002e 1A46     		mov	r2, r3
 4260 0030 074B     		ldr	r3, .L205+12
 4261 0032 1A70     		strb	r2, [r3]
 851:.\main.c      ****     line_sensor_right = LINE_SENSOR_RIGHT_Read();
 4262              		.loc 1 851 0
 4263 0034 FFF7FEFF 		bl	LINE_SENSOR_RIGHT_Read
 4264 0038 0346     		mov	r3, r0
 4265 003a 1A46     		mov	r2, r3
 4266 003c 054B     		ldr	r3, .L205+16
 4267 003e 1A70     		strb	r2, [r3]
 852:.\main.c      **** }
 4268              		.loc 1 852 0
 4269 0040 80BD     		pop	{r7, pc}
 4270              	.L206:
 4271 0042 00BF     		.align	2
 4272              	.L205:
 4273 0044 00000000 		.word	int_sensor_left
 4274 0048 00000000 		.word	int_sensor_right
 4275 004c 00000000 		.word	line_sensor_centre
 4276 0050 00000000 		.word	line_sensor_left
 4277 0054 00000000 		.word	line_sensor_right
 4278              		.cfi_endproc
 4279              	.LFE80:
 4280              		.size	get_light_sensors, .-get_light_sensors
 4281              		.section	.text.get_wheel_quadrature,"ax",%progbits
 4282              		.align	2
 4283              		.global	get_wheel_quadrature
 4284              		.thumb
 4285              		.thumb_func
 4286              		.type	get_wheel_quadrature, %function
 4287              	get_wheel_quadrature:
 4288              	.LFB81:
 853:.\main.c      **** //* ========================================
 854:.\main.c      **** /*
 855:.\main.c      **** Get the absolute values of the motor quadrature decoders.
 856:.\main.c      **** */
 857:.\main.c      **** void get_wheel_quadrature()
 858:.\main.c      **** {
 4289              		.loc 1 858 0
 4290              		.cfi_startproc
 4291              		@ args = 0, pretend = 0, frame = 0
 4292              		@ frame_needed = 1, uses_anonymous_args = 0
 4293 0000 80B5     		push	{r7, lr}
 4294              		.cfi_def_cfa_offset 8
 4295              		.cfi_offset 7, -8
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 92


 4296              		.cfi_offset 14, -4
 4297 0002 00AF     		add	r7, sp, #0
 4298              		.cfi_def_cfa_register 7
 859:.\main.c      ****     // get the quadrature counts
 860:.\main.c      ****     quad_cnt_left = QuadDec_M1_GetCounter();
 4299              		.loc 1 860 0
 4300 0004 FFF7FEFF 		bl	QuadDec_M1_GetCounter
 4301 0008 0346     		mov	r3, r0
 4302 000a 1A46     		mov	r2, r3
 4303 000c 114B     		ldr	r3, .L210
 4304 000e 1A80     		strh	r2, [r3]	@ movhi
 861:.\main.c      ****     quad_cnt_right = QuadDec_M2_GetCounter();
 4305              		.loc 1 861 0
 4306 0010 FFF7FEFF 		bl	QuadDec_M2_GetCounter
 4307 0014 0346     		mov	r3, r0
 4308 0016 1A46     		mov	r2, r3
 4309 0018 0F4B     		ldr	r3, .L210+4
 4310 001a 1A80     		strh	r2, [r3]	@ movhi
 862:.\main.c      ****     
 863:.\main.c      ****     // take the absolute of the quadrature counts
 864:.\main.c      ****     if (quad_cnt_left < 0)
 4311              		.loc 1 864 0
 4312 001c 0D4B     		ldr	r3, .L210
 4313 001e 1B88     		ldrh	r3, [r3]
 4314 0020 1BB2     		sxth	r3, r3
 4315 0022 002B     		cmp	r3, #0
 4316 0024 07DA     		bge	.L208
 865:.\main.c      ****         quad_cnt_left = quad_cnt_left * -1;
 4317              		.loc 1 865 0
 4318 0026 0B4B     		ldr	r3, .L210
 4319 0028 1B88     		ldrh	r3, [r3]
 4320 002a 9BB2     		uxth	r3, r3
 4321 002c 5B42     		negs	r3, r3
 4322 002e 9BB2     		uxth	r3, r3
 4323 0030 9AB2     		uxth	r2, r3
 4324 0032 084B     		ldr	r3, .L210
 4325 0034 1A80     		strh	r2, [r3]	@ movhi
 4326              	.L208:
 866:.\main.c      ****     if (quad_cnt_right < 0)
 4327              		.loc 1 866 0
 4328 0036 084B     		ldr	r3, .L210+4
 4329 0038 1B88     		ldrh	r3, [r3]
 4330 003a 1BB2     		sxth	r3, r3
 4331 003c 002B     		cmp	r3, #0
 4332 003e 07DA     		bge	.L207
 867:.\main.c      ****         quad_cnt_right = quad_cnt_right * -1;
 4333              		.loc 1 867 0
 4334 0040 054B     		ldr	r3, .L210+4
 4335 0042 1B88     		ldrh	r3, [r3]
 4336 0044 9BB2     		uxth	r3, r3
 4337 0046 5B42     		negs	r3, r3
 4338 0048 9BB2     		uxth	r3, r3
 4339 004a 9AB2     		uxth	r2, r3
 4340 004c 024B     		ldr	r3, .L210+4
 4341 004e 1A80     		strh	r2, [r3]	@ movhi
 4342              	.L207:
 868:.\main.c      **** }
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 93


 4343              		.loc 1 868 0
 4344 0050 80BD     		pop	{r7, pc}
 4345              	.L211:
 4346 0052 00BF     		.align	2
 4347              	.L210:
 4348 0054 00000000 		.word	quad_cnt_left
 4349 0058 00000000 		.word	quad_cnt_right
 4350              		.cfi_endproc
 4351              	.LFE81:
 4352              		.size	get_wheel_quadrature, .-get_wheel_quadrature
 4353              		.section	.text.get_distance,"ax",%progbits
 4354              		.align	2
 4355              		.global	get_distance
 4356              		.thumb
 4357              		.thumb_func
 4358              		.type	get_distance, %function
 4359              	get_distance:
 4360              	.LFB82:
 869:.\main.c      **** //* ========================================
 870:.\main.c      **** /*
 871:.\main.c      **** Get the distance travelled along a straight line using motor quadrature.
 872:.\main.c      **** Update distance every quarter wheel rotation.
 873:.\main.c      **** */
 874:.\main.c      **** void get_distance()
 875:.\main.c      **** {
 4361              		.loc 1 875 0
 4362              		.cfi_startproc
 4363              		@ args = 0, pretend = 0, frame = 0
 4364              		@ frame_needed = 1, uses_anonymous_args = 0
 4365 0000 80B5     		push	{r7, lr}
 4366              		.cfi_def_cfa_offset 8
 4367              		.cfi_offset 7, -8
 4368              		.cfi_offset 14, -4
 4369 0002 00AF     		add	r7, sp, #0
 4370              		.cfi_def_cfa_register 7
 876:.\main.c      ****     get_wheel_quadrature();
 4371              		.loc 1 876 0
 4372 0004 FFF7FEFF 		bl	get_wheel_quadrature
 877:.\main.c      ****     
 878:.\main.c      ****     // reset prev value if quadrature has been reset
 879:.\main.c      ****     if (quad_cnt_left < quad_cnt_prev) {
 4373              		.loc 1 879 0
 4374 0008 114B     		ldr	r3, .L215
 4375 000a 1A88     		ldrh	r2, [r3]
 4376 000c 114B     		ldr	r3, .L215+4
 4377 000e 1B88     		ldrh	r3, [r3]
 4378 0010 12B2     		sxth	r2, r2
 4379 0012 1BB2     		sxth	r3, r3
 4380 0014 9A42     		cmp	r2, r3
 4381 0016 06DA     		bge	.L213
 880:.\main.c      ****         quad_cnt_prev = quad_cnt_left;
 4382              		.loc 1 880 0
 4383 0018 0D4B     		ldr	r3, .L215
 4384 001a 1A88     		ldrh	r2, [r3]
 4385 001c 0D4B     		ldr	r3, .L215+4
 4386 001e 1A80     		strh	r2, [r3]	@ movhi
 881:.\main.c      ****         straight_line_distance = 4;
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 94


 4387              		.loc 1 881 0
 4388 0020 0D4B     		ldr	r3, .L215+8
 4389 0022 0422     		movs	r2, #4
 4390 0024 1A70     		strb	r2, [r3]
 4391              	.L213:
 882:.\main.c      ****     }
 883:.\main.c      ****     
 884:.\main.c      ****     // if difference between prev value and quad cnt is a quarter turn
 885:.\main.c      ****     // update distance and update prev
 886:.\main.c      ****     if (quad_cnt_left - quad_cnt_prev >= QUARTER_ROT) {
 4392              		.loc 1 886 0
 4393 0026 0A4B     		ldr	r3, .L215
 4394 0028 1B88     		ldrh	r3, [r3]
 4395 002a 1AB2     		sxth	r2, r3
 4396 002c 094B     		ldr	r3, .L215+4
 4397 002e 1B88     		ldrh	r3, [r3]
 4398 0030 1BB2     		sxth	r3, r3
 4399 0032 D31A     		subs	r3, r2, r3
 4400 0034 382B     		cmp	r3, #56
 4401 0036 09DD     		ble	.L212
 887:.\main.c      ****         straight_line_distance += QUARTER_CIRC;
 4402              		.loc 1 887 0
 4403 0038 074B     		ldr	r3, .L215+8
 4404 003a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4405 003c 0533     		adds	r3, r3, #5
 4406 003e DAB2     		uxtb	r2, r3
 4407 0040 054B     		ldr	r3, .L215+8
 4408 0042 1A70     		strb	r2, [r3]
 888:.\main.c      ****         quad_cnt_prev = quad_cnt_left;
 4409              		.loc 1 888 0
 4410 0044 024B     		ldr	r3, .L215
 4411 0046 1A88     		ldrh	r2, [r3]
 4412 0048 024B     		ldr	r3, .L215+4
 4413 004a 1A80     		strh	r2, [r3]	@ movhi
 4414              	.L212:
 889:.\main.c      ****     }
 890:.\main.c      **** }
 4415              		.loc 1 890 0
 4416 004c 80BD     		pop	{r7, pc}
 4417              	.L216:
 4418 004e 00BF     		.align	2
 4419              	.L215:
 4420 0050 00000000 		.word	quad_cnt_left
 4421 0054 00000000 		.word	quad_cnt_prev
 4422 0058 00000000 		.word	straight_line_distance
 4423              		.cfi_endproc
 4424              	.LFE82:
 4425              		.size	get_distance, .-get_distance
 4426              		.section	.text.get_next_event_index,"ax",%progbits
 4427              		.align	2
 4428              		.global	get_next_event_index
 4429              		.thumb
 4430              		.thumb_func
 4431              		.type	get_next_event_index, %function
 4432              	get_next_event_index:
 4433              	.LFB83:
 891:.\main.c      **** //* ========================================
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 95


 892:.\main.c      **** /*
 893:.\main.c      **** Finds what the next map event is along the given path,
 894:.\main.c      **** update index flag of next event and set appropriate event flag.
 895:.\main.c      **** Events include intersections, deadends and the path changing
 896:.\main.c      **** orientation by 180 degrees in the middle of a straight line (u-turn).
 897:.\main.c      **** */
 898:.\main.c      **** void get_next_event_index(int8 path[][2], uint16 path_length)
 899:.\main.c      **** {
 4434              		.loc 1 899 0
 4435              		.cfi_startproc
 4436              		@ args = 0, pretend = 0, frame = 16
 4437              		@ frame_needed = 1, uses_anonymous_args = 0
 4438              		@ link register save eliminated.
 4439 0000 80B4     		push	{r7}
 4440              		.cfi_def_cfa_offset 4
 4441              		.cfi_offset 7, -4
 4442 0002 85B0     		sub	sp, sp, #20
 4443              		.cfi_def_cfa_offset 24
 4444 0004 00AF     		add	r7, sp, #0
 4445              		.cfi_def_cfa_register 7
 4446 0006 7860     		str	r0, [r7, #4]
 4447 0008 0B46     		mov	r3, r1
 4448 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 900:.\main.c      ****     // loop through remainder of path from path index and look for next event
 901:.\main.c      ****     uint16 i;
 902:.\main.c      ****     (!path_index) ? (i = 0) : (i = path_index + 1);
 4449              		.loc 1 902 0
 4450 000c 7E4B     		ldr	r3, .L234
 4451 000e 1B88     		ldrh	r3, [r3]
 4452 0010 002B     		cmp	r3, #0
 4453 0012 02D1     		bne	.L218
 4454              		.loc 1 902 0 is_stmt 0 discriminator 1
 4455 0014 0023     		movs	r3, #0
 4456 0016 FB81     		strh	r3, [r7, #14]	@ movhi
 4457 0018 03E0     		b	.L219
 4458              	.L218:
 4459              		.loc 1 902 0 discriminator 2
 4460 001a 7B4B     		ldr	r3, .L234
 4461 001c 1B88     		ldrh	r3, [r3]
 4462 001e 0133     		adds	r3, r3, #1
 4463 0020 FB81     		strh	r3, [r7, #14]	@ movhi
 4464              	.L219:
 903:.\main.c      **** 	while (i < path_length) {
 4465              		.loc 1 903 0 is_stmt 1
 4466 0022 E6E0     		b	.L220
 4467              	.L233:
 904:.\main.c      ****         // look for intersections
 905:.\main.c      **** 		if (robot_orientation == UP || robot_orientation == DOWN) {
 4468              		.loc 1 905 0
 4469 0024 794B     		ldr	r3, .L234+4
 4470 0026 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4471 0028 002B     		cmp	r3, #0
 4472 002a 03D0     		beq	.L221
 4473              		.loc 1 905 0 is_stmt 0 discriminator 1
 4474 002c 774B     		ldr	r3, .L234+4
 4475 002e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4476 0030 022B     		cmp	r3, #2
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 96


 4477 0032 37D1     		bne	.L222
 4478              	.L221:
 906:.\main.c      **** 			// look left and right for intersection
 907:.\main.c      **** 			if (!map[path[i][0]][path[i][1]-1] || !map[path[i][0]][path[i][1]+1]) {
 4479              		.loc 1 907 0 is_stmt 1
 4480 0034 FB89     		ldrh	r3, [r7, #14]
 4481 0036 5B00     		lsls	r3, r3, #1
 4482 0038 7A68     		ldr	r2, [r7, #4]
 4483 003a 1344     		add	r3, r3, r2
 4484 003c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4485 003e 5AB2     		sxtb	r2, r3
 4486 0040 FB89     		ldrh	r3, [r7, #14]
 4487 0042 5B00     		lsls	r3, r3, #1
 4488 0044 7968     		ldr	r1, [r7, #4]
 4489 0046 0B44     		add	r3, r3, r1
 4490 0048 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 4491 004a 5BB2     		sxtb	r3, r3
 4492 004c 591E     		subs	r1, r3, #1
 4493 004e 7048     		ldr	r0, .L234+8
 4494 0050 1346     		mov	r3, r2
 4495 0052 DB00     		lsls	r3, r3, #3
 4496 0054 1344     		add	r3, r3, r2
 4497 0056 5B00     		lsls	r3, r3, #1
 4498 0058 1344     		add	r3, r3, r2
 4499 005a 0B44     		add	r3, r3, r1
 4500 005c 50F82330 		ldr	r3, [r0, r3, lsl #2]
 4501 0060 002B     		cmp	r3, #0
 4502 0062 17D0     		beq	.L223
 4503              		.loc 1 907 0 is_stmt 0 discriminator 1
 4504 0064 FB89     		ldrh	r3, [r7, #14]
 4505 0066 5B00     		lsls	r3, r3, #1
 4506 0068 7A68     		ldr	r2, [r7, #4]
 4507 006a 1344     		add	r3, r3, r2
 4508 006c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4509 006e 5AB2     		sxtb	r2, r3
 4510 0070 FB89     		ldrh	r3, [r7, #14]
 4511 0072 5B00     		lsls	r3, r3, #1
 4512 0074 7968     		ldr	r1, [r7, #4]
 4513 0076 0B44     		add	r3, r3, r1
 4514 0078 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 4515 007a 5BB2     		sxtb	r3, r3
 4516 007c 591C     		adds	r1, r3, #1
 4517 007e 6448     		ldr	r0, .L234+8
 4518 0080 1346     		mov	r3, r2
 4519 0082 DB00     		lsls	r3, r3, #3
 4520 0084 1344     		add	r3, r3, r2
 4521 0086 5B00     		lsls	r3, r3, #1
 4522 0088 1344     		add	r3, r3, r2
 4523 008a 0B44     		add	r3, r3, r1
 4524 008c 50F82330 		ldr	r3, [r0, r3, lsl #2]
 4525 0090 002B     		cmp	r3, #0
 4526 0092 06D1     		bne	.L224
 4527              	.L223:
 908:.\main.c      **** 				next_event_index = i;
 4528              		.loc 1 908 0 is_stmt 1
 4529 0094 5F4A     		ldr	r2, .L234+12
 4530 0096 FB89     		ldrh	r3, [r7, #14]	@ movhi
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 97


 4531 0098 1380     		strh	r3, [r2]	@ movhi
 909:.\main.c      ****                 flag_next_event_intersection = 1;
 4532              		.loc 1 909 0
 4533 009a 5F4B     		ldr	r3, .L234+16
 4534 009c 0122     		movs	r2, #1
 4535 009e 1A70     		strb	r2, [r3]
 910:.\main.c      **** 				break;
 4536              		.loc 1 910 0
 4537 00a0 ACE0     		b	.L217
 4538              	.L224:
 907:.\main.c      **** 				next_event_index = i;
 4539              		.loc 1 907 0
 4540 00a2 3EE0     		b	.L226
 4541              	.L222:
 911:.\main.c      **** 			}
 912:.\main.c      ****         }
 913:.\main.c      ****         else if (robot_orientation == LEFT || robot_orientation == RIGHT) {
 4542              		.loc 1 913 0
 4543 00a4 594B     		ldr	r3, .L234+4
 4544 00a6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4545 00a8 032B     		cmp	r3, #3
 4546 00aa 03D0     		beq	.L227
 4547              		.loc 1 913 0 is_stmt 0 discriminator 1
 4548 00ac 574B     		ldr	r3, .L234+4
 4549 00ae 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4550 00b0 012B     		cmp	r3, #1
 4551 00b2 36D1     		bne	.L226
 4552              	.L227:
 914:.\main.c      **** 			// look up and down for intersection
 915:.\main.c      **** 			if (!map[path[i][0]-1][path[i][1]] || !map[path[i][0]+1][path[i][1]]) {
 4553              		.loc 1 915 0 is_stmt 1
 4554 00b4 FB89     		ldrh	r3, [r7, #14]
 4555 00b6 5B00     		lsls	r3, r3, #1
 4556 00b8 7A68     		ldr	r2, [r7, #4]
 4557 00ba 1344     		add	r3, r3, r2
 4558 00bc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4559 00be 5BB2     		sxtb	r3, r3
 4560 00c0 5A1E     		subs	r2, r3, #1
 4561 00c2 FB89     		ldrh	r3, [r7, #14]
 4562 00c4 5B00     		lsls	r3, r3, #1
 4563 00c6 7968     		ldr	r1, [r7, #4]
 4564 00c8 0B44     		add	r3, r3, r1
 4565 00ca 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 4566 00cc 59B2     		sxtb	r1, r3
 4567 00ce 5048     		ldr	r0, .L234+8
 4568 00d0 1346     		mov	r3, r2
 4569 00d2 DB00     		lsls	r3, r3, #3
 4570 00d4 1344     		add	r3, r3, r2
 4571 00d6 5B00     		lsls	r3, r3, #1
 4572 00d8 1344     		add	r3, r3, r2
 4573 00da 0B44     		add	r3, r3, r1
 4574 00dc 50F82330 		ldr	r3, [r0, r3, lsl #2]
 4575 00e0 002B     		cmp	r3, #0
 4576 00e2 17D0     		beq	.L228
 4577              		.loc 1 915 0 is_stmt 0 discriminator 1
 4578 00e4 FB89     		ldrh	r3, [r7, #14]
 4579 00e6 5B00     		lsls	r3, r3, #1
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 98


 4580 00e8 7A68     		ldr	r2, [r7, #4]
 4581 00ea 1344     		add	r3, r3, r2
 4582 00ec 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4583 00ee 5BB2     		sxtb	r3, r3
 4584 00f0 5A1C     		adds	r2, r3, #1
 4585 00f2 FB89     		ldrh	r3, [r7, #14]
 4586 00f4 5B00     		lsls	r3, r3, #1
 4587 00f6 7968     		ldr	r1, [r7, #4]
 4588 00f8 0B44     		add	r3, r3, r1
 4589 00fa 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 4590 00fc 59B2     		sxtb	r1, r3
 4591 00fe 4448     		ldr	r0, .L234+8
 4592 0100 1346     		mov	r3, r2
 4593 0102 DB00     		lsls	r3, r3, #3
 4594 0104 1344     		add	r3, r3, r2
 4595 0106 5B00     		lsls	r3, r3, #1
 4596 0108 1344     		add	r3, r3, r2
 4597 010a 0B44     		add	r3, r3, r1
 4598 010c 50F82330 		ldr	r3, [r0, r3, lsl #2]
 4599 0110 002B     		cmp	r3, #0
 4600 0112 06D1     		bne	.L226
 4601              	.L228:
 916:.\main.c      **** 				next_event_index = i;
 4602              		.loc 1 916 0 is_stmt 1
 4603 0114 3F4A     		ldr	r2, .L234+12
 4604 0116 FB89     		ldrh	r3, [r7, #14]	@ movhi
 4605 0118 1380     		strh	r3, [r2]	@ movhi
 917:.\main.c      ****                 flag_next_event_intersection = 1;
 4606              		.loc 1 917 0
 4607 011a 3F4B     		ldr	r3, .L234+16
 4608 011c 0122     		movs	r2, #1
 4609 011e 1A70     		strb	r2, [r3]
 918:.\main.c      **** 				break;
 4610              		.loc 1 918 0
 4611 0120 6CE0     		b	.L217
 4612              	.L226:
 919:.\main.c      **** 			}
 920:.\main.c      ****         }
 921:.\main.c      ****         // look ahead for dead end
 922:.\main.c      ****         if (map[NEXT_ROW(i)][NEXT_COL(i)]) {
 4613              		.loc 1 922 0
 4614 0122 FB89     		ldrh	r3, [r7, #14]
 4615 0124 5B00     		lsls	r3, r3, #1
 4616 0126 7A68     		ldr	r2, [r7, #4]
 4617 0128 1344     		add	r3, r3, r2
 4618 012a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4619 012c 5AB2     		sxtb	r2, r3
 4620 012e 3B4B     		ldr	r3, .L234+20
 4621 0130 1B68     		ldr	r3, [r3]
 4622 0132 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4623 0134 5BB2     		sxtb	r3, r3
 4624 0136 1A44     		add	r2, r2, r3
 4625 0138 FB89     		ldrh	r3, [r7, #14]
 4626 013a 5B00     		lsls	r3, r3, #1
 4627 013c 7968     		ldr	r1, [r7, #4]
 4628 013e 0B44     		add	r3, r3, r1
 4629 0140 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 99


 4630 0142 59B2     		sxtb	r1, r3
 4631 0144 354B     		ldr	r3, .L234+20
 4632 0146 1B68     		ldr	r3, [r3]
 4633 0148 0133     		adds	r3, r3, #1
 4634 014a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4635 014c 5BB2     		sxtb	r3, r3
 4636 014e 1944     		add	r1, r1, r3
 4637 0150 2F48     		ldr	r0, .L234+8
 4638 0152 1346     		mov	r3, r2
 4639 0154 DB00     		lsls	r3, r3, #3
 4640 0156 1344     		add	r3, r3, r2
 4641 0158 5B00     		lsls	r3, r3, #1
 4642 015a 1344     		add	r3, r3, r2
 4643 015c 0B44     		add	r3, r3, r1
 4644 015e 50F82330 		ldr	r3, [r0, r3, lsl #2]
 4645 0162 002B     		cmp	r3, #0
 4646 0164 06D0     		beq	.L229
 923:.\main.c      ****             next_event_index = i;
 4647              		.loc 1 923 0
 4648 0166 2B4A     		ldr	r2, .L234+12
 4649 0168 FB89     		ldrh	r3, [r7, #14]	@ movhi
 4650 016a 1380     		strh	r3, [r2]	@ movhi
 924:.\main.c      ****             flag_next_event_deadend = 1;
 4651              		.loc 1 924 0
 4652 016c 2C4B     		ldr	r3, .L234+24
 4653 016e 0122     		movs	r2, #1
 4654 0170 1A70     		strb	r2, [r3]
 925:.\main.c      **** 			break;
 4655              		.loc 1 925 0
 4656 0172 43E0     		b	.L217
 4657              	.L229:
 926:.\main.c      ****         }
 927:.\main.c      ****         // if final path node is not intersection or dead end it must be pellet in line
 928:.\main.c      ****         else if (i == path_length - 1) {
 4658              		.loc 1 928 0
 4659 0174 FA89     		ldrh	r2, [r7, #14]
 4660 0176 7B88     		ldrh	r3, [r7, #2]
 4661 0178 013B     		subs	r3, r3, #1
 4662 017a 9A42     		cmp	r2, r3
 4663 017c 06D1     		bne	.L230
 929:.\main.c      ****             next_event_index = i;
 4664              		.loc 1 929 0
 4665 017e 254A     		ldr	r2, .L234+12
 4666 0180 FB89     		ldrh	r3, [r7, #14]	@ movhi
 4667 0182 1380     		strh	r3, [r2]	@ movhi
 930:.\main.c      ****             flag_next_event_u_turn = 1;
 4668              		.loc 1 930 0
 4669 0184 274B     		ldr	r3, .L234+28
 4670 0186 0122     		movs	r2, #1
 4671 0188 1A70     		strb	r2, [r3]
 931:.\main.c      **** 			break;
 4672              		.loc 1 931 0
 4673 018a 37E0     		b	.L217
 4674              	.L230:
 932:.\main.c      ****         }
 933:.\main.c      ****         // if no intersections or dead ends found and not end of end of path look u-turn in path
 934:.\main.c      ****         else {
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 100


 935:.\main.c      ****             // if path does not follow straight ahead it must be a u-turn as no intersections or
 936:.\main.c      ****             // dead ends were found
 937:.\main.c      ****             if (NEXT_ROW(i) != path[i+1][0] || NEXT_COL(i) != path[i+1][1]) {
 4675              		.loc 1 937 0
 4676 018c FB89     		ldrh	r3, [r7, #14]
 4677 018e 5B00     		lsls	r3, r3, #1
 4678 0190 7A68     		ldr	r2, [r7, #4]
 4679 0192 1344     		add	r3, r3, r2
 4680 0194 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4681 0196 5AB2     		sxtb	r2, r3
 4682 0198 204B     		ldr	r3, .L234+20
 4683 019a 1B68     		ldr	r3, [r3]
 4684 019c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4685 019e 5BB2     		sxtb	r3, r3
 4686 01a0 1A44     		add	r2, r2, r3
 4687 01a2 FB89     		ldrh	r3, [r7, #14]
 4688 01a4 0133     		adds	r3, r3, #1
 4689 01a6 5B00     		lsls	r3, r3, #1
 4690 01a8 7968     		ldr	r1, [r7, #4]
 4691 01aa 0B44     		add	r3, r3, r1
 4692 01ac 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4693 01ae 5BB2     		sxtb	r3, r3
 4694 01b0 9A42     		cmp	r2, r3
 4695 01b2 14D1     		bne	.L231
 4696              		.loc 1 937 0 is_stmt 0 discriminator 1
 4697 01b4 FB89     		ldrh	r3, [r7, #14]
 4698 01b6 5B00     		lsls	r3, r3, #1
 4699 01b8 7A68     		ldr	r2, [r7, #4]
 4700 01ba 1344     		add	r3, r3, r2
 4701 01bc 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 4702 01be 5AB2     		sxtb	r2, r3
 4703 01c0 164B     		ldr	r3, .L234+20
 4704 01c2 1B68     		ldr	r3, [r3]
 4705 01c4 0133     		adds	r3, r3, #1
 4706 01c6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4707 01c8 5BB2     		sxtb	r3, r3
 4708 01ca 1A44     		add	r2, r2, r3
 4709 01cc FB89     		ldrh	r3, [r7, #14]
 4710 01ce 0133     		adds	r3, r3, #1
 4711 01d0 5B00     		lsls	r3, r3, #1
 4712 01d2 7968     		ldr	r1, [r7, #4]
 4713 01d4 0B44     		add	r3, r3, r1
 4714 01d6 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 4715 01d8 5BB2     		sxtb	r3, r3
 4716 01da 9A42     		cmp	r2, r3
 4717 01dc 06D0     		beq	.L232
 4718              	.L231:
 938:.\main.c      ****                 next_event_index = i;
 4719              		.loc 1 938 0 is_stmt 1
 4720 01de 0D4A     		ldr	r2, .L234+12
 4721 01e0 FB89     		ldrh	r3, [r7, #14]	@ movhi
 4722 01e2 1380     		strh	r3, [r2]	@ movhi
 939:.\main.c      ****                 flag_next_event_u_turn = 1;
 4723              		.loc 1 939 0
 4724 01e4 0F4B     		ldr	r3, .L234+28
 4725 01e6 0122     		movs	r2, #1
 4726 01e8 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 101


 940:.\main.c      ****     			break;
 4727              		.loc 1 940 0
 4728 01ea 07E0     		b	.L217
 4729              	.L232:
 941:.\main.c      ****             }
 942:.\main.c      ****         }
 943:.\main.c      ****         i++;
 4730              		.loc 1 943 0
 4731 01ec FB89     		ldrh	r3, [r7, #14]
 4732 01ee 0133     		adds	r3, r3, #1
 4733 01f0 FB81     		strh	r3, [r7, #14]	@ movhi
 4734              	.L220:
 903:.\main.c      ****         // look for intersections
 4735              		.loc 1 903 0
 4736 01f2 FA89     		ldrh	r2, [r7, #14]
 4737 01f4 7B88     		ldrh	r3, [r7, #2]
 4738 01f6 9A42     		cmp	r2, r3
 4739 01f8 FFF414AF 		bcc	.L233
 4740              	.L217:
 944:.\main.c      **** 	}
 945:.\main.c      **** }
 4741              		.loc 1 945 0
 4742 01fc 1437     		adds	r7, r7, #20
 4743              		.cfi_def_cfa_offset 4
 4744 01fe BD46     		mov	sp, r7
 4745              		.cfi_def_cfa_register 13
 4746              		@ sp needed
 4747 0200 5DF8047B 		ldr	r7, [sp], #4
 4748              		.cfi_restore 7
 4749              		.cfi_def_cfa_offset 0
 4750 0204 7047     		bx	lr
 4751              	.L235:
 4752 0206 00BF     		.align	2
 4753              	.L234:
 4754 0208 00000000 		.word	path_index
 4755 020c 00000000 		.word	robot_orientation
 4756 0210 00000000 		.word	map
 4757 0214 00000000 		.word	next_event_index
 4758 0218 00000000 		.word	flag_next_event_intersection
 4759 021c 00000000 		.word	path_orientation
 4760 0220 00000000 		.word	flag_next_event_deadend
 4761 0224 00000000 		.word	flag_next_event_u_turn
 4762              		.cfi_endproc
 4763              	.LFE83:
 4764              		.size	get_next_event_index, .-get_next_event_index
 4765              		.section	.text.update_robot_position,"ax",%progbits
 4766              		.align	2
 4767              		.global	update_robot_position
 4768              		.thumb
 4769              		.thumb_func
 4770              		.type	update_robot_position, %function
 4771              	update_robot_position:
 4772              	.LFB84:
 946:.\main.c      **** //* ========================================
 947:.\main.c      **** /*
 948:.\main.c      **** Update robot position based on the distance travelled along a straight line.
 949:.\main.c      **** */
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 102


 950:.\main.c      **** void update_robot_position(int8 path[][2], uint16 path_length)
 951:.\main.c      **** {
 4773              		.loc 1 951 0
 4774              		.cfi_startproc
 4775              		@ args = 0, pretend = 0, frame = 8
 4776              		@ frame_needed = 1, uses_anonymous_args = 0
 4777 0000 80B5     		push	{r7, lr}
 4778              		.cfi_def_cfa_offset 8
 4779              		.cfi_offset 7, -8
 4780              		.cfi_offset 14, -4
 4781 0002 82B0     		sub	sp, sp, #8
 4782              		.cfi_def_cfa_offset 16
 4783 0004 00AF     		add	r7, sp, #0
 4784              		.cfi_def_cfa_register 7
 4785 0006 7860     		str	r0, [r7, #4]
 4786 0008 0B46     		mov	r3, r1
 4787 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 952:.\main.c      ****     get_distance();
 4788              		.loc 1 952 0
 4789 000c FFF7FEFF 		bl	get_distance
 953:.\main.c      ****     
 954:.\main.c      ****     // reset prev value if distance has been reset
 955:.\main.c      ****     if (straight_line_distance < distance_prev)
 4790              		.loc 1 955 0
 4791 0010 1A4B     		ldr	r3, .L240
 4792 0012 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 4793 0014 1A4B     		ldr	r3, .L240+4
 4794 0016 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4795 0018 9A42     		cmp	r2, r3
 4796 001a 02D2     		bcs	.L237
 956:.\main.c      ****         distance_prev = 0;
 4797              		.loc 1 956 0
 4798 001c 184B     		ldr	r3, .L240+4
 4799 001e 0022     		movs	r2, #0
 4800 0020 1A70     		strb	r2, [r3]
 4801              	.L237:
 957:.\main.c      ****     
 958:.\main.c      ****     // if difference between prev value and distance is a physical
 959:.\main.c      ****     // projected map block distance update robot position and prev
 960:.\main.c      ****     if (straight_line_distance - distance_prev >= BLOCK_DIST) {
 4802              		.loc 1 960 0
 4803 0022 164B     		ldr	r3, .L240
 4804 0024 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4805 0026 1A46     		mov	r2, r3
 4806 0028 154B     		ldr	r3, .L240+4
 4807 002a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4808 002c D31A     		subs	r3, r2, r3
 4809 002e 0C2B     		cmp	r3, #12
 4810 0030 20DD     		ble	.L236
 961:.\main.c      ****         robot_position_index++;
 4811              		.loc 1 961 0
 4812 0032 144B     		ldr	r3, .L240+8
 4813 0034 1B88     		ldrh	r3, [r3]
 4814 0036 0133     		adds	r3, r3, #1
 4815 0038 9AB2     		uxth	r2, r3
 4816 003a 124B     		ldr	r3, .L240+8
 4817 003c 1A80     		strh	r2, [r3]	@ movhi
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 103


 962:.\main.c      ****         if (robot_position_index < path_length) {
 4818              		.loc 1 962 0
 4819 003e 114B     		ldr	r3, .L240+8
 4820 0040 1B88     		ldrh	r3, [r3]
 4821 0042 7A88     		ldrh	r2, [r7, #2]
 4822 0044 9A42     		cmp	r2, r3
 4823 0046 11D9     		bls	.L239
 963:.\main.c      ****             // set robot position
 964:.\main.c      ****             robot_y_pos = path[robot_position_index][0];
 4824              		.loc 1 964 0
 4825 0048 0E4B     		ldr	r3, .L240+8
 4826 004a 1B88     		ldrh	r3, [r3]
 4827 004c 5B00     		lsls	r3, r3, #1
 4828 004e 7A68     		ldr	r2, [r7, #4]
 4829 0050 1344     		add	r3, r3, r2
 4830 0052 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4831 0054 DAB2     		uxtb	r2, r3
 4832 0056 0C4B     		ldr	r3, .L240+12
 4833 0058 1A70     		strb	r2, [r3]
 965:.\main.c      ****             robot_x_pos = path[robot_position_index][1];
 4834              		.loc 1 965 0
 4835 005a 0A4B     		ldr	r3, .L240+8
 4836 005c 1B88     		ldrh	r3, [r3]
 4837 005e 5B00     		lsls	r3, r3, #1
 4838 0060 7A68     		ldr	r2, [r7, #4]
 4839 0062 1344     		add	r3, r3, r2
 4840 0064 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 4841 0066 DAB2     		uxtb	r2, r3
 4842 0068 084B     		ldr	r3, .L240+16
 4843 006a 1A70     		strb	r2, [r3]
 4844              	.L239:
 966:.\main.c      ****         }
 967:.\main.c      ****         distance_prev = straight_line_distance;
 4845              		.loc 1 967 0
 4846 006c 034B     		ldr	r3, .L240
 4847 006e 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 4848 0070 034B     		ldr	r3, .L240+4
 4849 0072 1A70     		strb	r2, [r3]
 4850              	.L236:
 968:.\main.c      ****     }
 969:.\main.c      **** }
 4851              		.loc 1 969 0
 4852 0074 0837     		adds	r7, r7, #8
 4853              		.cfi_def_cfa_offset 8
 4854 0076 BD46     		mov	sp, r7
 4855              		.cfi_def_cfa_register 13
 4856              		@ sp needed
 4857 0078 80BD     		pop	{r7, pc}
 4858              	.L241:
 4859 007a 00BF     		.align	2
 4860              	.L240:
 4861 007c 00000000 		.word	straight_line_distance
 4862 0080 00000000 		.word	distance_prev
 4863 0084 00000000 		.word	robot_position_index
 4864 0088 00000000 		.word	robot_y_pos
 4865 008c 00000000 		.word	robot_x_pos
 4866              		.cfi_endproc
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 104


 4867              	.LFE84:
 4868              		.size	update_robot_position, .-update_robot_position
 4869              		.section	.text.usbPutString,"ax",%progbits
 4870              		.align	2
 4871              		.global	usbPutString
 4872              		.thumb
 4873              		.thumb_func
 4874              		.type	usbPutString, %function
 4875              	usbPutString:
 4876              	.LFB85:
 970:.\main.c      **** //* ========================================
 971:.\main.c      **** //* USBUART */
 972:.\main.c      **** //* ========================================
 973:.\main.c      **** void usbPutString(char *s)
 974:.\main.c      **** {
 4877              		.loc 1 974 0
 4878              		.cfi_startproc
 4879              		@ args = 0, pretend = 0, frame = 8
 4880              		@ frame_needed = 1, uses_anonymous_args = 0
 4881 0000 80B5     		push	{r7, lr}
 4882              		.cfi_def_cfa_offset 8
 4883              		.cfi_offset 7, -8
 4884              		.cfi_offset 14, -4
 4885 0002 82B0     		sub	sp, sp, #8
 4886              		.cfi_def_cfa_offset 16
 4887 0004 00AF     		add	r7, sp, #0
 4888              		.cfi_def_cfa_register 7
 4889 0006 7860     		str	r0, [r7, #4]
 975:.\main.c      **** // !! Assumes that *s is a string with allocated space >=64 chars     
 976:.\main.c      **** //  Since USB implementation retricts data packets to 64 chars, this function truncates the
 977:.\main.c      **** //  length to 62 char (63rd char is a '!')
 978:.\main.c      **** 
 979:.\main.c      **** #ifdef USE_USB     
 980:.\main.c      ****     while (USBUART_CDCIsReady() == 0);
 4890              		.loc 1 980 0
 4891 0008 00BF     		nop
 4892              	.L243:
 4893              		.loc 1 980 0 is_stmt 0 discriminator 1
 4894 000a FFF7FEFF 		bl	USBUART_CDCIsReady
 4895 000e 0346     		mov	r3, r0
 4896 0010 002B     		cmp	r3, #0
 4897 0012 FAD0     		beq	.L243
 981:.\main.c      ****     s[63]='\0';
 4898              		.loc 1 981 0 is_stmt 1
 4899 0014 7B68     		ldr	r3, [r7, #4]
 4900 0016 3F33     		adds	r3, r3, #63
 4901 0018 0022     		movs	r2, #0
 4902 001a 1A70     		strb	r2, [r3]
 982:.\main.c      ****     s[62]='!';
 4903              		.loc 1 982 0
 4904 001c 7B68     		ldr	r3, [r7, #4]
 4905 001e 3E33     		adds	r3, r3, #62
 4906 0020 2122     		movs	r2, #33
 4907 0022 1A70     		strb	r2, [r3]
 983:.\main.c      ****     USBUART_PutData((uint8*)s,strlen(s));
 4908              		.loc 1 983 0
 4909 0024 7868     		ldr	r0, [r7, #4]
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 105


 4910 0026 FFF7FEFF 		bl	strlen
 4911 002a 0346     		mov	r3, r0
 4912 002c 9BB2     		uxth	r3, r3
 4913 002e 7868     		ldr	r0, [r7, #4]
 4914 0030 1946     		mov	r1, r3
 4915 0032 FFF7FEFF 		bl	USBUART_PutData
 984:.\main.c      **** #endif
 985:.\main.c      **** }
 4916              		.loc 1 985 0
 4917 0036 0837     		adds	r7, r7, #8
 4918              		.cfi_def_cfa_offset 8
 4919 0038 BD46     		mov	sp, r7
 4920              		.cfi_def_cfa_register 13
 4921              		@ sp needed
 4922 003a 80BD     		pop	{r7, pc}
 4923              		.cfi_endproc
 4924              	.LFE85:
 4925              		.size	usbPutString, .-usbPutString
 4926              		.section	.text.usbPutChar,"ax",%progbits
 4927              		.align	2
 4928              		.global	usbPutChar
 4929              		.thumb
 4930              		.thumb_func
 4931              		.type	usbPutChar, %function
 4932              	usbPutChar:
 4933              	.LFB86:
 986:.\main.c      **** //* ========================================
 987:.\main.c      **** void usbPutChar(char c)
 988:.\main.c      **** {
 4934              		.loc 1 988 0
 4935              		.cfi_startproc
 4936              		@ args = 0, pretend = 0, frame = 8
 4937              		@ frame_needed = 1, uses_anonymous_args = 0
 4938 0000 80B5     		push	{r7, lr}
 4939              		.cfi_def_cfa_offset 8
 4940              		.cfi_offset 7, -8
 4941              		.cfi_offset 14, -4
 4942 0002 82B0     		sub	sp, sp, #8
 4943              		.cfi_def_cfa_offset 16
 4944 0004 00AF     		add	r7, sp, #0
 4945              		.cfi_def_cfa_register 7
 4946 0006 0346     		mov	r3, r0
 4947 0008 FB71     		strb	r3, [r7, #7]
 989:.\main.c      **** #ifdef USE_USB     
 990:.\main.c      ****     while (USBUART_CDCIsReady() == 0);
 4948              		.loc 1 990 0
 4949 000a 00BF     		nop
 4950              	.L245:
 4951              		.loc 1 990 0 is_stmt 0 discriminator 1
 4952 000c FFF7FEFF 		bl	USBUART_CDCIsReady
 4953 0010 0346     		mov	r3, r0
 4954 0012 002B     		cmp	r3, #0
 4955 0014 FAD0     		beq	.L245
 991:.\main.c      ****     USBUART_PutChar(c);
 4956              		.loc 1 991 0 is_stmt 1
 4957 0016 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4958 0018 1846     		mov	r0, r3
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 106


 4959 001a FFF7FEFF 		bl	USBUART_PutChar
 992:.\main.c      **** #endif    
 993:.\main.c      **** }
 4960              		.loc 1 993 0
 4961 001e 0837     		adds	r7, r7, #8
 4962              		.cfi_def_cfa_offset 8
 4963 0020 BD46     		mov	sp, r7
 4964              		.cfi_def_cfa_register 13
 4965              		@ sp needed
 4966 0022 80BD     		pop	{r7, pc}
 4967              		.cfi_endproc
 4968              	.LFE86:
 4969              		.size	usbPutChar, .-usbPutChar
 4970              		.text
 4971              	.Letext0:
 4972              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\3.3\\psoc creator\\import\\gnu\\arm\\4.9.
 4973              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\3.3\\psoc creator\\import\\gnu\\arm\\4.9.
 4974              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 4975              		.file 5 ".\\vars.h"
 4976              		.file 6 "Generated_Source\\PSoC5/core_cm3.h"
 4977              		.file 7 ".\\map.h"
 4978              		.section	.debug_info,"",%progbits
 4979              	.Ldebug_info0:
 4980 0000 170D0000 		.4byte	0xd17
 4981 0004 0400     		.2byte	0x4
 4982 0006 00000000 		.4byte	.Ldebug_abbrev0
 4983 000a 04       		.byte	0x4
 4984 000b 01       		.uleb128 0x1
 4985 000c 59030000 		.4byte	.LASF118
 4986 0010 01       		.byte	0x1
 4987 0011 E6060000 		.4byte	.LASF119
 4988 0015 7D040000 		.4byte	.LASF120
 4989 0019 00000000 		.4byte	.Ldebug_ranges0+0
 4990 001d 00000000 		.4byte	0
 4991 0021 00000000 		.4byte	.Ldebug_line0
 4992 0025 02       		.uleb128 0x2
 4993 0026 01       		.byte	0x1
 4994 0027 06       		.byte	0x6
 4995 0028 5D060000 		.4byte	.LASF0
 4996 002c 02       		.uleb128 0x2
 4997 002d 01       		.byte	0x1
 4998 002e 08       		.byte	0x8
 4999 002f 02060000 		.4byte	.LASF1
 5000 0033 02       		.uleb128 0x2
 5001 0034 02       		.byte	0x2
 5002 0035 05       		.byte	0x5
 5003 0036 FA040000 		.4byte	.LASF2
 5004 003a 02       		.uleb128 0x2
 5005 003b 02       		.byte	0x2
 5006 003c 07       		.byte	0x7
 5007 003d 73060000 		.4byte	.LASF3
 5008 0041 03       		.uleb128 0x3
 5009 0042 97000000 		.4byte	.LASF14
 5010 0046 02       		.byte	0x2
 5011 0047 3F       		.byte	0x3f
 5012 0048 4C000000 		.4byte	0x4c
 5013 004c 02       		.uleb128 0x2
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 107


 5014 004d 04       		.byte	0x4
 5015 004e 05       		.byte	0x5
 5016 004f 04050000 		.4byte	.LASF4
 5017 0053 02       		.uleb128 0x2
 5018 0054 04       		.byte	0x4
 5019 0055 07       		.byte	0x7
 5020 0056 72050000 		.4byte	.LASF5
 5021 005a 02       		.uleb128 0x2
 5022 005b 08       		.byte	0x8
 5023 005c 05       		.byte	0x5
 5024 005d 26030000 		.4byte	.LASF6
 5025 0061 02       		.uleb128 0x2
 5026 0062 08       		.byte	0x8
 5027 0063 07       		.byte	0x7
 5028 0064 DC010000 		.4byte	.LASF7
 5029 0068 04       		.uleb128 0x4
 5030 0069 04       		.byte	0x4
 5031 006a 05       		.byte	0x5
 5032 006b 696E7400 		.ascii	"int\000"
 5033 006f 02       		.uleb128 0x2
 5034 0070 04       		.byte	0x4
 5035 0071 07       		.byte	0x7
 5036 0072 72000000 		.4byte	.LASF8
 5037 0076 02       		.uleb128 0x2
 5038 0077 04       		.byte	0x4
 5039 0078 07       		.byte	0x7
 5040 0079 69050000 		.4byte	.LASF9
 5041 007d 05       		.uleb128 0x5
 5042 007e 04       		.byte	0x4
 5043 007f 83000000 		.4byte	0x83
 5044 0083 02       		.uleb128 0x2
 5045 0084 01       		.byte	0x1
 5046 0085 08       		.byte	0x8
 5047 0086 C2020000 		.4byte	.LASF10
 5048 008a 02       		.uleb128 0x2
 5049 008b 08       		.byte	0x8
 5050 008c 04       		.byte	0x4
 5051 008d B6060000 		.4byte	.LASF11
 5052 0091 02       		.uleb128 0x2
 5053 0092 04       		.byte	0x4
 5054 0093 04       		.byte	0x4
 5055 0094 BD010000 		.4byte	.LASF12
 5056 0098 02       		.uleb128 0x2
 5057 0099 08       		.byte	0x8
 5058 009a 04       		.byte	0x4
 5059 009b 71040000 		.4byte	.LASF13
 5060 009f 03       		.uleb128 0x3
 5061 00a0 BE050000 		.4byte	.LASF15
 5062 00a4 03       		.byte	0x3
 5063 00a5 2C       		.byte	0x2c
 5064 00a6 41000000 		.4byte	0x41
 5065 00aa 06       		.uleb128 0x6
 5066 00ab B0060000 		.4byte	.LASF16
 5067 00af 04       		.byte	0x4
 5068 00b0 9201     		.2byte	0x192
 5069 00b2 2C000000 		.4byte	0x2c
 5070 00b6 06       		.uleb128 0x6
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 108


 5071 00b7 D8020000 		.4byte	.LASF17
 5072 00bb 04       		.byte	0x4
 5073 00bc 9301     		.2byte	0x193
 5074 00be 3A000000 		.4byte	0x3a
 5075 00c2 06       		.uleb128 0x6
 5076 00c3 DF020000 		.4byte	.LASF18
 5077 00c7 04       		.byte	0x4
 5078 00c8 9501     		.2byte	0x195
 5079 00ca 25000000 		.4byte	0x25
 5080 00ce 06       		.uleb128 0x6
 5081 00cf A1000000 		.4byte	.LASF19
 5082 00d3 04       		.byte	0x4
 5083 00d4 9601     		.2byte	0x196
 5084 00d6 33000000 		.4byte	0x33
 5085 00da 06       		.uleb128 0x6
 5086 00db C3010000 		.4byte	.LASF20
 5087 00df 04       		.byte	0x4
 5088 00e0 9701     		.2byte	0x197
 5089 00e2 4C000000 		.4byte	0x4c
 5090 00e6 07       		.uleb128 0x7
 5091 00e7 5F010000 		.4byte	.LASF25
 5092 00eb 01       		.byte	0x1
 5093 00ec 05       		.byte	0x5
 5094 00ed 1C       		.byte	0x1c
 5095 00ee 0B010000 		.4byte	0x10b
 5096 00f2 08       		.uleb128 0x8
 5097 00f3 6A010000 		.4byte	.LASF21
 5098 00f7 00       		.sleb128 0
 5099 00f8 08       		.uleb128 0x8
 5100 00f9 37040000 		.4byte	.LASF22
 5101 00fd 03       		.sleb128 3
 5102 00fe 08       		.uleb128 0x8
 5103 00ff A2060000 		.4byte	.LASF23
 5104 0103 01       		.sleb128 1
 5105 0104 08       		.uleb128 0x8
 5106 0105 A7000000 		.4byte	.LASF24
 5107 0109 02       		.sleb128 2
 5108 010a 00       		.byte	0
 5109 010b 07       		.uleb128 0x7
 5110 010c 43000000 		.4byte	.LASF26
 5111 0110 01       		.byte	0x1
 5112 0111 05       		.byte	0x5
 5113 0112 2D       		.byte	0x2d
 5114 0113 2F010000 		.4byte	0x12f
 5115 0117 09       		.uleb128 0x9
 5116 0118 555000   		.ascii	"UP\000"
 5117 011b 00       		.sleb128 0
 5118 011c 08       		.uleb128 0x8
 5119 011d FA020000 		.4byte	.LASF27
 5120 0121 01       		.sleb128 1
 5121 0122 08       		.uleb128 0x8
 5122 0123 86060000 		.4byte	.LASF28
 5123 0127 02       		.sleb128 2
 5124 0128 08       		.uleb128 0x8
 5125 0129 F5020000 		.4byte	.LASF29
 5126 012d 03       		.sleb128 3
 5127 012e 00       		.byte	0
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 109


 5128 012f 0A       		.uleb128 0xa
 5129 0130 61040000 		.4byte	.LASF30
 5130 0134 01       		.byte	0x1
 5131 0135 24       		.byte	0x24
 5132 0136 00000000 		.4byte	.LFB63
 5133 013a 58000000 		.4byte	.LFE63-.LFB63
 5134 013e 01       		.uleb128 0x1
 5135 013f 9C       		.byte	0x9c
 5136 0140 0B       		.uleb128 0xb
 5137 0141 C6050000 		.4byte	.LASF31
 5138 0145 01       		.byte	0x1
 5139 0146 31       		.byte	0x31
 5140 0147 00000000 		.4byte	.LFB64
 5141 014b 18000000 		.4byte	.LFE64-.LFB64
 5142 014f 01       		.uleb128 0x1
 5143 0150 9C       		.byte	0x9c
 5144 0151 0C       		.uleb128 0xc
 5145 0152 9D060000 		.4byte	.LASF36
 5146 0156 01       		.byte	0x1
 5147 0157 36       		.byte	0x36
 5148 0158 68000000 		.4byte	0x68
 5149 015c 00000000 		.4byte	.LFB65
 5150 0160 54020000 		.4byte	.LFE65-.LFB65
 5151 0164 01       		.uleb128 0x1
 5152 0165 9C       		.byte	0x9c
 5153 0166 AE010000 		.4byte	0x1ae
 5154 016a 0D       		.uleb128 0xd
 5155 016b CC000000 		.4byte	.LASF32
 5156 016f 01       		.byte	0x1
 5157 0170 46       		.byte	0x46
 5158 0171 AA000000 		.4byte	0xaa
 5159 0175 02       		.uleb128 0x2
 5160 0176 91       		.byte	0x91
 5161 0177 5D       		.sleb128 -35
 5162 0178 0D       		.uleb128 0xd
 5163 0179 C0040000 		.4byte	.LASF33
 5164 017d 01       		.byte	0x1
 5165 017e 4F       		.byte	0x4f
 5166 017f B6000000 		.4byte	0xb6
 5167 0183 02       		.uleb128 0x2
 5168 0184 91       		.byte	0x91
 5169 0185 5E       		.sleb128 -34
 5170 0186 0D       		.uleb128 0xd
 5171 0187 61020000 		.4byte	.LASF34
 5172 018b 01       		.byte	0x1
 5173 018c 5C       		.byte	0x5c
 5174 018d AE010000 		.4byte	0x1ae
 5175 0191 03       		.uleb128 0x3
 5176 0192 91       		.byte	0x91
 5177 0193 54       		.sleb128 -44
 5178 0194 06       		.byte	0x6
 5179 0195 0E       		.uleb128 0xe
 5180 0196 98010000 		.4byte	.LBB2
 5181 019a 84000000 		.4byte	.LBE2-.LBB2
 5182 019e 0D       		.uleb128 0xd
 5183 019f B0050000 		.4byte	.LASF35
 5184 01a3 01       		.byte	0x1
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 110


 5185 01a4 9F       		.byte	0x9f
 5186 01a5 CE000000 		.4byte	0xce
 5187 01a9 02       		.uleb128 0x2
 5188 01aa 91       		.byte	0x91
 5189 01ab 52       		.sleb128 -46
 5190 01ac 00       		.byte	0
 5191 01ad 00       		.byte	0
 5192 01ae 0F       		.uleb128 0xf
 5193 01af C2000000 		.4byte	0xc2
 5194 01b3 C7010000 		.4byte	0x1c7
 5195 01b7 10       		.uleb128 0x10
 5196 01b8 76000000 		.4byte	0x76
 5197 01bc 03       		.uleb128 0x3
 5198 01bd 91       		.byte	0x91
 5199 01be 58       		.sleb128 -40
 5200 01bf 06       		.byte	0x6
 5201 01c0 11       		.uleb128 0x11
 5202 01c1 76000000 		.4byte	0x76
 5203 01c5 01       		.byte	0x1
 5204 01c6 00       		.byte	0
 5205 01c7 0C       		.uleb128 0xc
 5206 01c8 0C030000 		.4byte	.LASF37
 5207 01cc 01       		.byte	0x1
 5208 01cd C1       		.byte	0xc1
 5209 01ce B6000000 		.4byte	0xb6
 5210 01d2 00000000 		.4byte	.LFB66
 5211 01d6 E4000000 		.4byte	.LFE66-.LFB66
 5212 01da 01       		.uleb128 0x1
 5213 01db 9C       		.byte	0x9c
 5214 01dc 3E020000 		.4byte	0x23e
 5215 01e0 12       		.uleb128 0x12
 5216 01e1 706F7300 		.ascii	"pos\000"
 5217 01e5 01       		.byte	0x1
 5218 01e6 C4       		.byte	0xc4
 5219 01e7 3E020000 		.4byte	0x23e
 5220 01eb 02       		.uleb128 0x2
 5221 01ec 91       		.byte	0x91
 5222 01ed 54       		.sleb128 -44
 5223 01ee 12       		.uleb128 0x12
 5224 01ef 64657300 		.ascii	"des\000"
 5225 01f3 01       		.byte	0x1
 5226 01f4 C5       		.byte	0xc5
 5227 01f5 3E020000 		.4byte	0x23e
 5228 01f9 02       		.uleb128 0x2
 5229 01fa 91       		.byte	0x91
 5230 01fb 50       		.sleb128 -48
 5231 01fc 0D       		.uleb128 0xd
 5232 01fd 41020000 		.4byte	.LASF38
 5233 0201 01       		.byte	0x1
 5234 0202 C6       		.byte	0xc6
 5235 0203 4E020000 		.4byte	0x24e
 5236 0207 03       		.uleb128 0x3
 5237 0208 91       		.byte	0x91
 5238 0209 58       		.sleb128 -40
 5239 020a 06       		.byte	0x6
 5240 020b 0D       		.uleb128 0xd
 5241 020c C0040000 		.4byte	.LASF33
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 111


 5242 0210 01       		.byte	0x1
 5243 0211 C8       		.byte	0xc8
 5244 0212 B6000000 		.4byte	0xb6
 5245 0216 02       		.uleb128 0x2
 5246 0217 91       		.byte	0x91
 5247 0218 66       		.sleb128 -26
 5248 0219 12       		.uleb128 0x12
 5249 021a 6900     		.ascii	"i\000"
 5250 021c 01       		.byte	0x1
 5251 021d CB       		.byte	0xcb
 5252 021e 68000000 		.4byte	0x68
 5253 0222 02       		.uleb128 0x2
 5254 0223 91       		.byte	0x91
 5255 0224 60       		.sleb128 -32
 5256 0225 0E       		.uleb128 0xe
 5257 0226 6A000000 		.4byte	.LBB3
 5258 022a 4E000000 		.4byte	.LBE3-.LBB3
 5259 022e 0D       		.uleb128 0xd
 5260 022f 2B040000 		.4byte	.LASF39
 5261 0233 01       		.byte	0x1
 5262 0234 D1       		.byte	0xd1
 5263 0235 B6000000 		.4byte	0xb6
 5264 0239 02       		.uleb128 0x2
 5265 023a 91       		.byte	0x91
 5266 023b 56       		.sleb128 -42
 5267 023c 00       		.byte	0
 5268 023d 00       		.byte	0
 5269 023e 0F       		.uleb128 0xf
 5270 023f AA000000 		.4byte	0xaa
 5271 0243 4E020000 		.4byte	0x24e
 5272 0247 11       		.uleb128 0x11
 5273 0248 76000000 		.4byte	0x76
 5274 024c 01       		.byte	0x1
 5275 024d 00       		.byte	0
 5276 024e 0F       		.uleb128 0xf
 5277 024f C2000000 		.4byte	0xc2
 5278 0253 67020000 		.4byte	0x267
 5279 0257 10       		.uleb128 0x10
 5280 0258 76000000 		.4byte	0x76
 5281 025c 03       		.uleb128 0x3
 5282 025d 91       		.byte	0x91
 5283 025e 5C       		.sleb128 -36
 5284 025f 06       		.byte	0x6
 5285 0260 11       		.uleb128 0x11
 5286 0261 76000000 		.4byte	0x76
 5287 0265 01       		.byte	0x1
 5288 0266 00       		.byte	0
 5289 0267 0C       		.uleb128 0xc
 5290 0268 97020000 		.4byte	.LASF40
 5291 026c 01       		.byte	0x1
 5292 026d E2       		.byte	0xe2
 5293 026e B6000000 		.4byte	0xb6
 5294 0272 00000000 		.4byte	.LFB67
 5295 0276 84000000 		.4byte	.LFE67-.LFB67
 5296 027a 01       		.uleb128 0x1
 5297 027b 9C       		.byte	0x9c
 5298 027c AC020000 		.4byte	0x2ac
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 112


 5299 0280 12       		.uleb128 0x12
 5300 0281 706F7300 		.ascii	"pos\000"
 5301 0285 01       		.byte	0x1
 5302 0286 E5       		.byte	0xe5
 5303 0287 3E020000 		.4byte	0x23e
 5304 028b 02       		.uleb128 0x2
 5305 028c 91       		.byte	0x91
 5306 028d 58       		.sleb128 -40
 5307 028e 0D       		.uleb128 0xd
 5308 028f 1D060000 		.4byte	.LASF41
 5309 0293 01       		.byte	0x1
 5310 0294 E6       		.byte	0xe6
 5311 0295 B6000000 		.4byte	0xb6
 5312 0299 02       		.uleb128 0x2
 5313 029a 91       		.byte	0x91
 5314 029b 66       		.sleb128 -26
 5315 029c 0D       		.uleb128 0xd
 5316 029d 41020000 		.4byte	.LASF38
 5317 02a1 01       		.byte	0x1
 5318 02a2 E7       		.byte	0xe7
 5319 02a3 AC020000 		.4byte	0x2ac
 5320 02a7 03       		.uleb128 0x3
 5321 02a8 91       		.byte	0x91
 5322 02a9 5C       		.sleb128 -36
 5323 02aa 06       		.byte	0x6
 5324 02ab 00       		.byte	0
 5325 02ac 0F       		.uleb128 0xf
 5326 02ad C2000000 		.4byte	0xc2
 5327 02b1 C5020000 		.4byte	0x2c5
 5328 02b5 10       		.uleb128 0x10
 5329 02b6 76000000 		.4byte	0x76
 5330 02ba 03       		.uleb128 0x3
 5331 02bb 91       		.byte	0x91
 5332 02bc 60       		.sleb128 -32
 5333 02bd 06       		.byte	0x6
 5334 02be 11       		.uleb128 0x11
 5335 02bf 76000000 		.4byte	0x76
 5336 02c3 01       		.byte	0x1
 5337 02c4 00       		.byte	0
 5338 02c5 13       		.uleb128 0x13
 5339 02c6 E7030000 		.4byte	.LASF42
 5340 02ca 01       		.byte	0x1
 5341 02cb F1       		.byte	0xf1
 5342 02cc 00000000 		.4byte	.LFB68
 5343 02d0 1C010000 		.4byte	.LFE68-.LFB68
 5344 02d4 01       		.uleb128 0x1
 5345 02d5 9C       		.byte	0x9c
 5346 02d6 60030000 		.4byte	0x360
 5347 02da 14       		.uleb128 0x14
 5348 02db 61020000 		.4byte	.LASF34
 5349 02df 01       		.byte	0x1
 5350 02e0 F1       		.byte	0xf1
 5351 02e1 70030000 		.4byte	0x370
 5352 02e5 02       		.uleb128 0x2
 5353 02e6 91       		.byte	0x91
 5354 02e7 44       		.sleb128 -60
 5355 02e8 14       		.uleb128 0x14
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 113


 5356 02e9 C0040000 		.4byte	.LASF33
 5357 02ed 01       		.byte	0x1
 5358 02ee F1       		.byte	0xf1
 5359 02ef B6000000 		.4byte	0xb6
 5360 02f3 02       		.uleb128 0x2
 5361 02f4 91       		.byte	0x91
 5362 02f5 42       		.sleb128 -62
 5363 02f6 12       		.uleb128 0x12
 5364 02f7 706F7300 		.ascii	"pos\000"
 5365 02fb 01       		.byte	0x1
 5366 02fc F4       		.byte	0xf4
 5367 02fd 3E020000 		.4byte	0x23e
 5368 0301 02       		.uleb128 0x2
 5369 0302 91       		.byte	0x91
 5370 0303 4C       		.sleb128 -52
 5371 0304 12       		.uleb128 0x12
 5372 0305 64657300 		.ascii	"des\000"
 5373 0309 01       		.byte	0x1
 5374 030a F5       		.byte	0xf5
 5375 030b 3E020000 		.4byte	0x23e
 5376 030f 02       		.uleb128 0x2
 5377 0310 91       		.byte	0x91
 5378 0311 48       		.sleb128 -56
 5379 0312 0D       		.uleb128 0xd
 5380 0313 41020000 		.4byte	.LASF38
 5381 0317 01       		.byte	0x1
 5382 0318 F6       		.byte	0xf6
 5383 0319 76030000 		.4byte	0x376
 5384 031d 03       		.uleb128 0x3
 5385 031e 91       		.byte	0x91
 5386 031f 50       		.sleb128 -48
 5387 0320 06       		.byte	0x6
 5388 0321 0D       		.uleb128 0xd
 5389 0322 2D020000 		.4byte	.LASF43
 5390 0326 01       		.byte	0x1
 5391 0327 F8       		.byte	0xf8
 5392 0328 B6000000 		.4byte	0xb6
 5393 032c 02       		.uleb128 0x2
 5394 032d 91       		.byte	0x91
 5395 032e 66       		.sleb128 -26
 5396 032f 12       		.uleb128 0x12
 5397 0330 6900     		.ascii	"i\000"
 5398 0332 01       		.byte	0x1
 5399 0333 FA       		.byte	0xfa
 5400 0334 68000000 		.4byte	0x68
 5401 0338 02       		.uleb128 0x2
 5402 0339 91       		.byte	0x91
 5403 033a 60       		.sleb128 -32
 5404 033b 0E       		.uleb128 0xe
 5405 033c 6A000000 		.4byte	.LBB4
 5406 0340 90000000 		.4byte	.LBE4-.LBB4
 5407 0344 15       		.uleb128 0x15
 5408 0345 6A00     		.ascii	"j\000"
 5409 0347 01       		.byte	0x1
 5410 0348 0001     		.2byte	0x100
 5411 034a B6000000 		.4byte	0xb6
 5412 034e 02       		.uleb128 0x2
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 114


 5413 034f 91       		.byte	0x91
 5414 0350 5E       		.sleb128 -34
 5415 0351 15       		.uleb128 0x15
 5416 0352 6B00     		.ascii	"k\000"
 5417 0354 01       		.byte	0x1
 5418 0355 0301     		.2byte	0x103
 5419 0357 68000000 		.4byte	0x68
 5420 035b 02       		.uleb128 0x2
 5421 035c 91       		.byte	0x91
 5422 035d 58       		.sleb128 -40
 5423 035e 00       		.byte	0
 5424 035f 00       		.byte	0
 5425 0360 0F       		.uleb128 0xf
 5426 0361 C2000000 		.4byte	0xc2
 5427 0365 70030000 		.4byte	0x370
 5428 0369 11       		.uleb128 0x11
 5429 036a 76000000 		.4byte	0x76
 5430 036e 01       		.byte	0x1
 5431 036f 00       		.byte	0
 5432 0370 05       		.uleb128 0x5
 5433 0371 04       		.byte	0x4
 5434 0372 60030000 		.4byte	0x360
 5435 0376 0F       		.uleb128 0xf
 5436 0377 C2000000 		.4byte	0xc2
 5437 037b 8F030000 		.4byte	0x38f
 5438 037f 10       		.uleb128 0x10
 5439 0380 76000000 		.4byte	0x76
 5440 0384 03       		.uleb128 0x3
 5441 0385 91       		.byte	0x91
 5442 0386 54       		.sleb128 -44
 5443 0387 06       		.byte	0x6
 5444 0388 11       		.uleb128 0x11
 5445 0389 76000000 		.4byte	0x76
 5446 038d 01       		.byte	0x1
 5447 038e 00       		.byte	0
 5448 038f 16       		.uleb128 0x16
 5449 0390 44040000 		.4byte	.LASF44
 5450 0394 01       		.byte	0x1
 5451 0395 1501     		.2byte	0x115
 5452 0397 00000000 		.4byte	.LFB69
 5453 039b 30000000 		.4byte	.LFE69-.LFB69
 5454 039f 01       		.uleb128 0x1
 5455 03a0 9C       		.byte	0x9c
 5456 03a1 C4030000 		.4byte	0x3c4
 5457 03a5 17       		.uleb128 0x17
 5458 03a6 61020000 		.4byte	.LASF34
 5459 03aa 01       		.byte	0x1
 5460 03ab 1501     		.2byte	0x115
 5461 03ad 70030000 		.4byte	0x370
 5462 03b1 02       		.uleb128 0x2
 5463 03b2 91       		.byte	0x91
 5464 03b3 6C       		.sleb128 -20
 5465 03b4 15       		.uleb128 0x15
 5466 03b5 706F7300 		.ascii	"pos\000"
 5467 03b9 01       		.byte	0x1
 5468 03ba 1801     		.2byte	0x118
 5469 03bc 3E020000 		.4byte	0x23e
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 115


 5470 03c0 02       		.uleb128 0x2
 5471 03c1 91       		.byte	0x91
 5472 03c2 74       		.sleb128 -12
 5473 03c3 00       		.byte	0
 5474 03c4 18       		.uleb128 0x18
 5475 03c5 C9010000 		.4byte	.LASF57
 5476 03c9 01       		.byte	0x1
 5477 03ca 2401     		.2byte	0x124
 5478 03cc B6000000 		.4byte	0xb6
 5479 03d0 00000000 		.4byte	.LFB70
 5480 03d4 E8060000 		.4byte	.LFE70-.LFB70
 5481 03d8 01       		.uleb128 0x1
 5482 03d9 9C       		.byte	0x9c
 5483 03da 6C050000 		.4byte	0x56c
 5484 03de 19       		.uleb128 0x19
 5485 03df 706F7300 		.ascii	"pos\000"
 5486 03e3 01       		.byte	0x1
 5487 03e4 2401     		.2byte	0x124
 5488 03e6 6C050000 		.4byte	0x56c
 5489 03ea 03       		.uleb128 0x3
 5490 03eb 91       		.byte	0x91
 5491 03ec E47E     		.sleb128 -156
 5492 03ee 19       		.uleb128 0x19
 5493 03ef 64657300 		.ascii	"des\000"
 5494 03f3 01       		.byte	0x1
 5495 03f4 2401     		.2byte	0x124
 5496 03f6 6C050000 		.4byte	0x56c
 5497 03fa 03       		.uleb128 0x3
 5498 03fb 91       		.byte	0x91
 5499 03fc E07E     		.sleb128 -160
 5500 03fe 17       		.uleb128 0x17
 5501 03ff 61020000 		.4byte	.LASF34
 5502 0403 01       		.byte	0x1
 5503 0404 2401     		.2byte	0x124
 5504 0406 70030000 		.4byte	0x370
 5505 040a 03       		.uleb128 0x3
 5506 040b 91       		.byte	0x91
 5507 040c DC7E     		.sleb128 -164
 5508 040e 1A       		.uleb128 0x1a
 5509 040f 3D000000 		.4byte	.LASF45
 5510 0413 01       		.byte	0x1
 5511 0414 2701     		.2byte	0x127
 5512 0416 72050000 		.4byte	0x572
 5513 041a 04       		.uleb128 0x4
 5514 041b 91       		.byte	0x91
 5515 041c B87F     		.sleb128 -72
 5516 041e 06       		.byte	0x6
 5517 041f 1A       		.uleb128 0x1a
 5518 0420 38000000 		.4byte	.LASF46
 5519 0424 01       		.byte	0x1
 5520 0425 2801     		.2byte	0x128
 5521 0427 8C050000 		.4byte	0x58c
 5522 042b 04       		.uleb128 0x4
 5523 042c 91       		.byte	0x91
 5524 042d B07F     		.sleb128 -80
 5525 042f 06       		.byte	0x6
 5526 0430 1A       		.uleb128 0x1a
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 116


 5527 0431 30040000 		.4byte	.LASF47
 5528 0435 01       		.byte	0x1
 5529 0436 2901     		.2byte	0x129
 5530 0438 A0050000 		.4byte	0x5a0
 5531 043c 04       		.uleb128 0x4
 5532 043d 91       		.byte	0x91
 5533 043e A87F     		.sleb128 -88
 5534 0440 06       		.byte	0x6
 5535 0441 1A       		.uleb128 0x1a
 5536 0442 2B040000 		.4byte	.LASF39
 5537 0446 01       		.byte	0x1
 5538 0447 2A01     		.2byte	0x12a
 5539 0449 B4050000 		.4byte	0x5b4
 5540 044d 04       		.uleb128 0x4
 5541 044e 91       		.byte	0x91
 5542 044f A07F     		.sleb128 -96
 5543 0451 06       		.byte	0x6
 5544 0452 15       		.uleb128 0x15
 5545 0453 645F6800 		.ascii	"d_h\000"
 5546 0457 01       		.byte	0x1
 5547 0458 2B01     		.2byte	0x12b
 5548 045a C8050000 		.4byte	0x5c8
 5549 045e 04       		.uleb128 0x4
 5550 045f 91       		.byte	0x91
 5551 0460 987F     		.sleb128 -104
 5552 0462 06       		.byte	0x6
 5553 0463 1A       		.uleb128 0x1a
 5554 0464 D1000000 		.4byte	.LASF48
 5555 0468 01       		.byte	0x1
 5556 0469 2C01     		.2byte	0x12c
 5557 046b DC050000 		.4byte	0x5dc
 5558 046f 04       		.uleb128 0x4
 5559 0470 91       		.byte	0x91
 5560 0471 907F     		.sleb128 -112
 5561 0473 06       		.byte	0x6
 5562 0474 15       		.uleb128 0x15
 5563 0475 6900     		.ascii	"i\000"
 5564 0477 01       		.byte	0x1
 5565 0478 2F01     		.2byte	0x12f
 5566 047a B6000000 		.4byte	0xb6
 5567 047e 02       		.uleb128 0x2
 5568 047f 91       		.byte	0x91
 5569 0480 56       		.sleb128 -42
 5570 0481 15       		.uleb128 0x15
 5571 0482 7200     		.ascii	"r\000"
 5572 0484 01       		.byte	0x1
 5573 0485 3001     		.2byte	0x130
 5574 0487 68000000 		.4byte	0x68
 5575 048b 02       		.uleb128 0x2
 5576 048c 91       		.byte	0x91
 5577 048d 50       		.sleb128 -48
 5578 048e 15       		.uleb128 0x15
 5579 048f 6300     		.ascii	"c\000"
 5580 0491 01       		.byte	0x1
 5581 0492 3001     		.2byte	0x130
 5582 0494 68000000 		.4byte	0x68
 5583 0498 02       		.uleb128 0x2
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 117


 5584 0499 91       		.byte	0x91
 5585 049a 4C       		.sleb128 -52
 5586 049b 1A       		.uleb128 0x1a
 5587 049c 57020000 		.4byte	.LASF49
 5588 04a0 01       		.byte	0x1
 5589 04a1 4301     		.2byte	0x143
 5590 04a3 DA000000 		.4byte	0xda
 5591 04a7 03       		.uleb128 0x3
 5592 04a8 91       		.byte	0x91
 5593 04a9 8C7F     		.sleb128 -116
 5594 04ab 1A       		.uleb128 0x1a
 5595 04ac F3010000 		.4byte	.LASF50
 5596 04b0 01       		.byte	0x1
 5597 04b1 4401     		.2byte	0x144
 5598 04b3 DA000000 		.4byte	0xda
 5599 04b7 03       		.uleb128 0x3
 5600 04b8 91       		.byte	0x91
 5601 04b9 887F     		.sleb128 -120
 5602 04bb 1A       		.uleb128 0x1a
 5603 04bc BD060000 		.4byte	.LASF51
 5604 04c0 01       		.byte	0x1
 5605 04c1 4F01     		.2byte	0x14f
 5606 04c3 B6000000 		.4byte	0xb6
 5607 04c7 02       		.uleb128 0x2
 5608 04c8 91       		.byte	0x91
 5609 04c9 4A       		.sleb128 -54
 5610 04ca 1A       		.uleb128 0x1a
 5611 04cb 45060000 		.4byte	.LASF52
 5612 04cf 01       		.byte	0x1
 5613 04d0 6D01     		.2byte	0x16d
 5614 04d2 F6050000 		.4byte	0x5f6
 5615 04d6 04       		.uleb128 0x4
 5616 04d7 91       		.byte	0x91
 5617 04d8 FC7E     		.sleb128 -132
 5618 04da 06       		.byte	0x6
 5619 04db 1A       		.uleb128 0x1a
 5620 04dc 0F010000 		.4byte	.LASF53
 5621 04e0 01       		.byte	0x1
 5622 04e1 6F01     		.2byte	0x16f
 5623 04e3 3E020000 		.4byte	0x23e
 5624 04e7 03       		.uleb128 0x3
 5625 04e8 91       		.byte	0x91
 5626 04e9 F47E     		.sleb128 -140
 5627 04eb 1A       		.uleb128 0x1a
 5628 04ec FD010000 		.4byte	.LASF54
 5629 04f0 01       		.byte	0x1
 5630 04f1 8D01     		.2byte	0x18d
 5631 04f3 DA000000 		.4byte	0xda
 5632 04f7 02       		.uleb128 0x2
 5633 04f8 91       		.byte	0x91
 5634 04f9 44       		.sleb128 -60
 5635 04fa 1A       		.uleb128 0x1a
 5636 04fb C0040000 		.4byte	.LASF33
 5637 04ff 01       		.byte	0x1
 5638 0500 8E01     		.2byte	0x18e
 5639 0502 B6000000 		.4byte	0xb6
 5640 0506 02       		.uleb128 0x2
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 118


 5641 0507 91       		.byte	0x91
 5642 0508 42       		.sleb128 -62
 5643 0509 1B       		.uleb128 0x1b
 5644 050a AC030000 		.4byte	.LBB5
 5645 050e 66010000 		.4byte	.LBE5-.LBB5
 5646 0512 51050000 		.4byte	0x551
 5647 0516 1A       		.uleb128 0x1a
 5648 0517 FD010000 		.4byte	.LASF54
 5649 051b 01       		.byte	0x1
 5650 051c 5201     		.2byte	0x152
 5651 051e DA000000 		.4byte	0xda
 5652 0522 03       		.uleb128 0x3
 5653 0523 91       		.byte	0x91
 5654 0524 847F     		.sleb128 -124
 5655 0526 0E       		.uleb128 0xe
 5656 0527 EC030000 		.4byte	.LBB6
 5657 052b 00010000 		.4byte	.LBE6-.LBB6
 5658 052f 1A       		.uleb128 0x1a
 5659 0530 89020000 		.4byte	.LASF55
 5660 0534 01       		.byte	0x1
 5661 0535 5A01     		.2byte	0x15a
 5662 0537 3E020000 		.4byte	0x23e
 5663 053b 03       		.uleb128 0x3
 5664 053c 91       		.byte	0x91
 5665 053d F07E     		.sleb128 -144
 5666 053f 1A       		.uleb128 0x1a
 5667 0540 90020000 		.4byte	.LASF56
 5668 0544 01       		.byte	0x1
 5669 0545 5B01     		.2byte	0x15b
 5670 0547 3E020000 		.4byte	0x23e
 5671 054b 03       		.uleb128 0x3
 5672 054c 91       		.byte	0x91
 5673 054d EC7E     		.sleb128 -148
 5674 054f 00       		.byte	0
 5675 0550 00       		.byte	0
 5676 0551 0E       		.uleb128 0xe
 5677 0552 C4050000 		.4byte	.LBB7
 5678 0556 88000000 		.4byte	.LBE7-.LBB7
 5679 055a 1A       		.uleb128 0x1a
 5680 055b FD010000 		.4byte	.LASF54
 5681 055f 01       		.byte	0x1
 5682 0560 8001     		.2byte	0x180
 5683 0562 DA000000 		.4byte	0xda
 5684 0566 03       		.uleb128 0x3
 5685 0567 91       		.byte	0x91
 5686 0568 F87E     		.sleb128 -136
 5687 056a 00       		.byte	0
 5688 056b 00       		.byte	0
 5689 056c 05       		.uleb128 0x5
 5690 056d 04       		.byte	0x4
 5691 056e AA000000 		.4byte	0xaa
 5692 0572 0F       		.uleb128 0xf
 5693 0573 AA000000 		.4byte	0xaa
 5694 0577 8C050000 		.4byte	0x58c
 5695 057b 10       		.uleb128 0x10
 5696 057c 76000000 		.4byte	0x76
 5697 0580 04       		.uleb128 0x4
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 119


 5698 0581 91       		.byte	0x91
 5699 0582 BC7F     		.sleb128 -68
 5700 0584 06       		.byte	0x6
 5701 0585 11       		.uleb128 0x11
 5702 0586 76000000 		.4byte	0x76
 5703 058a 01       		.byte	0x1
 5704 058b 00       		.byte	0
 5705 058c 0F       		.uleb128 0xf
 5706 058d AA000000 		.4byte	0xaa
 5707 0591 A0050000 		.4byte	0x5a0
 5708 0595 10       		.uleb128 0x10
 5709 0596 76000000 		.4byte	0x76
 5710 059a 04       		.uleb128 0x4
 5711 059b 91       		.byte	0x91
 5712 059c B47F     		.sleb128 -76
 5713 059e 06       		.byte	0x6
 5714 059f 00       		.byte	0
 5715 05a0 0F       		.uleb128 0xf
 5716 05a1 91000000 		.4byte	0x91
 5717 05a5 B4050000 		.4byte	0x5b4
 5718 05a9 10       		.uleb128 0x10
 5719 05aa 76000000 		.4byte	0x76
 5720 05ae 04       		.uleb128 0x4
 5721 05af 91       		.byte	0x91
 5722 05b0 AC7F     		.sleb128 -84
 5723 05b2 06       		.byte	0x6
 5724 05b3 00       		.byte	0
 5725 05b4 0F       		.uleb128 0xf
 5726 05b5 B6000000 		.4byte	0xb6
 5727 05b9 C8050000 		.4byte	0x5c8
 5728 05bd 10       		.uleb128 0x10
 5729 05be 76000000 		.4byte	0x76
 5730 05c2 04       		.uleb128 0x4
 5731 05c3 91       		.byte	0x91
 5732 05c4 A47F     		.sleb128 -92
 5733 05c6 06       		.byte	0x6
 5734 05c7 00       		.byte	0
 5735 05c8 0F       		.uleb128 0xf
 5736 05c9 91000000 		.4byte	0x91
 5737 05cd DC050000 		.4byte	0x5dc
 5738 05d1 10       		.uleb128 0x10
 5739 05d2 76000000 		.4byte	0x76
 5740 05d6 04       		.uleb128 0x4
 5741 05d7 91       		.byte	0x91
 5742 05d8 9C7F     		.sleb128 -100
 5743 05da 06       		.byte	0x6
 5744 05db 00       		.byte	0
 5745 05dc 0F       		.uleb128 0xf
 5746 05dd C2000000 		.4byte	0xc2
 5747 05e1 F6050000 		.4byte	0x5f6
 5748 05e5 10       		.uleb128 0x10
 5749 05e6 76000000 		.4byte	0x76
 5750 05ea 04       		.uleb128 0x4
 5751 05eb 91       		.byte	0x91
 5752 05ec 947F     		.sleb128 -108
 5753 05ee 06       		.byte	0x6
 5754 05ef 11       		.uleb128 0x11
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 120


 5755 05f0 76000000 		.4byte	0x76
 5756 05f4 01       		.byte	0x1
 5757 05f5 00       		.byte	0
 5758 05f6 0F       		.uleb128 0xf
 5759 05f7 C2000000 		.4byte	0xc2
 5760 05fb 10060000 		.4byte	0x610
 5761 05ff 10       		.uleb128 0x10
 5762 0600 76000000 		.4byte	0x76
 5763 0604 04       		.uleb128 0x4
 5764 0605 91       		.byte	0x91
 5765 0606 807F     		.sleb128 -128
 5766 0608 06       		.byte	0x6
 5767 0609 11       		.uleb128 0x11
 5768 060a 76000000 		.4byte	0x76
 5769 060e 01       		.byte	0x1
 5770 060f 00       		.byte	0
 5771 0610 18       		.uleb128 0x18
 5772 0611 18040000 		.4byte	.LASF58
 5773 0615 01       		.byte	0x1
 5774 0616 A101     		.2byte	0x1a1
 5775 0618 B6000000 		.4byte	0xb6
 5776 061c 00000000 		.4byte	.LFB71
 5777 0620 1C050000 		.4byte	.LFE71-.LFB71
 5778 0624 01       		.uleb128 0x1
 5779 0625 9C       		.byte	0x9c
 5780 0626 5F070000 		.4byte	0x75f
 5781 062a 19       		.uleb128 0x19
 5782 062b 706F7300 		.ascii	"pos\000"
 5783 062f 01       		.byte	0x1
 5784 0630 A101     		.2byte	0x1a1
 5785 0632 6C050000 		.4byte	0x56c
 5786 0636 03       		.uleb128 0x3
 5787 0637 91       		.byte	0x91
 5788 0638 847D     		.sleb128 -380
 5789 063a 17       		.uleb128 0x17
 5790 063b 61020000 		.4byte	.LASF34
 5791 063f 01       		.byte	0x1
 5792 0640 A101     		.2byte	0x1a1
 5793 0642 70030000 		.4byte	0x370
 5794 0646 03       		.uleb128 0x3
 5795 0647 91       		.byte	0x91
 5796 0648 807D     		.sleb128 -384
 5797 064a 1A       		.uleb128 0x1a
 5798 064b 1D010000 		.4byte	.LASF59
 5799 064f 01       		.byte	0x1
 5800 0650 A401     		.2byte	0x1a4
 5801 0652 5F070000 		.4byte	0x75f
 5802 0656 03       		.uleb128 0x3
 5803 0657 91       		.byte	0x91
 5804 0658 907D     		.sleb128 -368
 5805 065a 15       		.uleb128 0x15
 5806 065b 7200     		.ascii	"r\000"
 5807 065d 01       		.byte	0x1
 5808 065e A501     		.2byte	0x1a5
 5809 0660 AA000000 		.4byte	0xaa
 5810 0664 02       		.uleb128 0x2
 5811 0665 91       		.byte	0x91
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 121


 5812 0666 57       		.sleb128 -41
 5813 0667 15       		.uleb128 0x15
 5814 0668 6300     		.ascii	"c\000"
 5815 066a 01       		.byte	0x1
 5816 066b A501     		.2byte	0x1a5
 5817 066d AA000000 		.4byte	0xaa
 5818 0671 02       		.uleb128 0x2
 5819 0672 91       		.byte	0x91
 5820 0673 56       		.sleb128 -42
 5821 0674 1A       		.uleb128 0x1a
 5822 0675 31050000 		.4byte	.LASF60
 5823 0679 01       		.byte	0x1
 5824 067a AF01     		.2byte	0x1af
 5825 067c AA000000 		.4byte	0xaa
 5826 0680 02       		.uleb128 0x2
 5827 0681 91       		.byte	0x91
 5828 0682 55       		.sleb128 -43
 5829 0683 1A       		.uleb128 0x1a
 5830 0684 A8010000 		.4byte	.LASF61
 5831 0688 01       		.byte	0x1
 5832 0689 B001     		.2byte	0x1b0
 5833 068b 75070000 		.4byte	0x775
 5834 068f 02       		.uleb128 0x2
 5835 0690 91       		.byte	0x91
 5836 0691 50       		.sleb128 -48
 5837 0692 1A       		.uleb128 0x1a
 5838 0693 23000000 		.4byte	.LASF62
 5839 0697 01       		.byte	0x1
 5840 0698 B101     		.2byte	0x1b1
 5841 069a AA000000 		.4byte	0xaa
 5842 069e 02       		.uleb128 0x2
 5843 069f 91       		.byte	0x91
 5844 06a0 4F       		.sleb128 -49
 5845 06a1 1A       		.uleb128 0x1a
 5846 06a2 C0040000 		.4byte	.LASF33
 5847 06a6 01       		.byte	0x1
 5848 06a7 B501     		.2byte	0x1b5
 5849 06a9 B6000000 		.4byte	0xb6
 5850 06ad 02       		.uleb128 0x2
 5851 06ae 91       		.byte	0x91
 5852 06af 4C       		.sleb128 -52
 5853 06b0 1A       		.uleb128 0x1a
 5854 06b1 BD060000 		.4byte	.LASF51
 5855 06b5 01       		.byte	0x1
 5856 06b6 B601     		.2byte	0x1b6
 5857 06b8 B6000000 		.4byte	0xb6
 5858 06bc 02       		.uleb128 0x2
 5859 06bd 91       		.byte	0x91
 5860 06be 4A       		.sleb128 -54
 5861 06bf 0E       		.uleb128 0xe
 5862 06c0 4E020000 		.4byte	.LBB8
 5863 06c4 A0020000 		.4byte	.LBE8-.LBB8
 5864 06c8 1A       		.uleb128 0x1a
 5865 06c9 34030000 		.4byte	.LASF63
 5866 06cd 01       		.byte	0x1
 5867 06ce DA01     		.2byte	0x1da
 5868 06d0 AA000000 		.4byte	0xaa
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 122


 5869 06d4 02       		.uleb128 0x2
 5870 06d5 91       		.byte	0x91
 5871 06d6 49       		.sleb128 -55
 5872 06d7 1A       		.uleb128 0x1a
 5873 06d8 0E000000 		.4byte	.LASF64
 5874 06dc 01       		.byte	0x1
 5875 06dd DB01     		.2byte	0x1db
 5876 06df B6000000 		.4byte	0xb6
 5877 06e3 02       		.uleb128 0x2
 5878 06e4 91       		.byte	0x91
 5879 06e5 46       		.sleb128 -58
 5880 06e6 15       		.uleb128 0x15
 5881 06e7 64657300 		.ascii	"des\000"
 5882 06eb 01       		.byte	0x1
 5883 06ec DC01     		.2byte	0x1dc
 5884 06ee 3E020000 		.4byte	0x23e
 5885 06f2 03       		.uleb128 0x3
 5886 06f3 91       		.byte	0x91
 5887 06f4 8C7D     		.sleb128 -372
 5888 06f6 1A       		.uleb128 0x1a
 5889 06f7 F2040000 		.4byte	.LASF65
 5890 06fb 01       		.byte	0x1
 5891 06fc DD01     		.2byte	0x1dd
 5892 06fe 3E020000 		.4byte	0x23e
 5893 0702 03       		.uleb128 0x3
 5894 0703 91       		.byte	0x91
 5895 0704 887D     		.sleb128 -376
 5896 0706 1B       		.uleb128 0x1b
 5897 0707 B4020000 		.4byte	.LBB9
 5898 070b B2000000 		.4byte	.LBE9-.LBB9
 5899 070f 35070000 		.4byte	0x735
 5900 0713 1A       		.uleb128 0x1a
 5901 0714 41020000 		.4byte	.LASF38
 5902 0718 01       		.byte	0x1
 5903 0719 E401     		.2byte	0x1e4
 5904 071b 7B070000 		.4byte	0x77b
 5905 071f 04       		.uleb128 0x4
 5906 0720 91       		.byte	0x91
 5907 0721 BC7F     		.sleb128 -68
 5908 0723 06       		.byte	0x6
 5909 0724 1A       		.uleb128 0x1a
 5910 0725 2B040000 		.4byte	.LASF39
 5911 0729 01       		.byte	0x1
 5912 072a E601     		.2byte	0x1e6
 5913 072c B6000000 		.4byte	0xb6
 5914 0730 03       		.uleb128 0x3
 5915 0731 91       		.byte	0x91
 5916 0732 BA7F     		.sleb128 -70
 5917 0734 00       		.byte	0
 5918 0735 0E       		.uleb128 0xe
 5919 0736 96030000 		.4byte	.LBB10
 5920 073a 50010000 		.4byte	.LBE10-.LBB10
 5921 073e 1A       		.uleb128 0x1a
 5922 073f 41020000 		.4byte	.LASF38
 5923 0743 01       		.byte	0x1
 5924 0744 F801     		.2byte	0x1f8
 5925 0746 94070000 		.4byte	0x794
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 123


 5926 074a 04       		.uleb128 0x4
 5927 074b 91       		.byte	0x91
 5928 074c B07F     		.sleb128 -80
 5929 074e 06       		.byte	0x6
 5930 074f 15       		.uleb128 0x15
 5931 0750 6900     		.ascii	"i\000"
 5932 0752 01       		.byte	0x1
 5933 0753 FD01     		.2byte	0x1fd
 5934 0755 B6000000 		.4byte	0xb6
 5935 0759 02       		.uleb128 0x2
 5936 075a 91       		.byte	0x91
 5937 075b 44       		.sleb128 -60
 5938 075c 00       		.byte	0
 5939 075d 00       		.byte	0
 5940 075e 00       		.byte	0
 5941 075f 0F       		.uleb128 0xf
 5942 0760 C2000000 		.4byte	0xc2
 5943 0764 75070000 		.4byte	0x775
 5944 0768 11       		.uleb128 0x11
 5945 0769 76000000 		.4byte	0x76
 5946 076d 0E       		.byte	0xe
 5947 076e 11       		.uleb128 0x11
 5948 076f 76000000 		.4byte	0x76
 5949 0773 12       		.byte	0x12
 5950 0774 00       		.byte	0
 5951 0775 05       		.uleb128 0x5
 5952 0776 04       		.byte	0x4
 5953 0777 C2000000 		.4byte	0xc2
 5954 077b 0F       		.uleb128 0xf
 5955 077c C2000000 		.4byte	0xc2
 5956 0780 94070000 		.4byte	0x794
 5957 0784 10       		.uleb128 0x10
 5958 0785 76000000 		.4byte	0x76
 5959 0789 03       		.uleb128 0x3
 5960 078a 91       		.byte	0x91
 5961 078b 40       		.sleb128 -64
 5962 078c 06       		.byte	0x6
 5963 078d 11       		.uleb128 0x11
 5964 078e 76000000 		.4byte	0x76
 5965 0792 01       		.byte	0x1
 5966 0793 00       		.byte	0
 5967 0794 0F       		.uleb128 0xf
 5968 0795 C2000000 		.4byte	0xc2
 5969 0799 AE070000 		.4byte	0x7ae
 5970 079d 10       		.uleb128 0x10
 5971 079e 76000000 		.4byte	0x76
 5972 07a2 04       		.uleb128 0x4
 5973 07a3 91       		.byte	0x91
 5974 07a4 B47F     		.sleb128 -76
 5975 07a6 06       		.byte	0x6
 5976 07a7 11       		.uleb128 0x11
 5977 07a8 76000000 		.4byte	0x76
 5978 07ac 01       		.byte	0x1
 5979 07ad 00       		.byte	0
 5980 07ae 1C       		.uleb128 0x1c
 5981 07af 1F050000 		.4byte	.LASF121
 5982 07b3 01       		.byte	0x1
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 124


 5983 07b4 1E02     		.2byte	0x21e
 5984 07b6 00000000 		.4byte	.LFB72
 5985 07ba 64000000 		.4byte	.LFE72-.LFB72
 5986 07be 01       		.uleb128 0x1
 5987 07bf 9C       		.byte	0x9c
 5988 07c0 DF070000 		.4byte	0x7df
 5989 07c4 15       		.uleb128 0x15
 5990 07c5 7200     		.ascii	"r\000"
 5991 07c7 01       		.byte	0x1
 5992 07c8 2002     		.2byte	0x220
 5993 07ca 68000000 		.4byte	0x68
 5994 07ce 02       		.uleb128 0x2
 5995 07cf 91       		.byte	0x91
 5996 07d0 74       		.sleb128 -12
 5997 07d1 15       		.uleb128 0x15
 5998 07d2 6300     		.ascii	"c\000"
 5999 07d4 01       		.byte	0x1
 6000 07d5 2002     		.2byte	0x220
 6001 07d7 68000000 		.4byte	0x68
 6002 07db 02       		.uleb128 0x2
 6003 07dc 91       		.byte	0x91
 6004 07dd 70       		.sleb128 -16
 6005 07de 00       		.byte	0
 6006 07df 1D       		.uleb128 0x1d
 6007 07e0 4F030000 		.4byte	.LASF66
 6008 07e4 01       		.byte	0x1
 6009 07e5 2C02     		.2byte	0x22c
 6010 07e7 00000000 		.4byte	.LFB73
 6011 07eb 42000000 		.4byte	.LFE73-.LFB73
 6012 07ef 01       		.uleb128 0x1
 6013 07f0 9C       		.byte	0x9c
 6014 07f1 21080000 		.4byte	0x821
 6015 07f5 17       		.uleb128 0x17
 6016 07f6 61020000 		.4byte	.LASF34
 6017 07fa 01       		.byte	0x1
 6018 07fb 2C02     		.2byte	0x22c
 6019 07fd 70030000 		.4byte	0x370
 6020 0801 02       		.uleb128 0x2
 6021 0802 91       		.byte	0x91
 6022 0803 6C       		.sleb128 -20
 6023 0804 17       		.uleb128 0x17
 6024 0805 C0040000 		.4byte	.LASF33
 6025 0809 01       		.byte	0x1
 6026 080a 2C02     		.2byte	0x22c
 6027 080c B6000000 		.4byte	0xb6
 6028 0810 02       		.uleb128 0x2
 6029 0811 91       		.byte	0x91
 6030 0812 6A       		.sleb128 -22
 6031 0813 15       		.uleb128 0x15
 6032 0814 6900     		.ascii	"i\000"
 6033 0816 01       		.byte	0x1
 6034 0817 2E02     		.2byte	0x22e
 6035 0819 B6000000 		.4byte	0xb6
 6036 081d 02       		.uleb128 0x2
 6037 081e 91       		.byte	0x91
 6038 081f 76       		.sleb128 -10
 6039 0820 00       		.byte	0
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 125


 6040 0821 1E       		.uleb128 0x1e
 6041 0822 87010000 		.4byte	.LASF67
 6042 0826 01       		.byte	0x1
 6043 0827 3A02     		.2byte	0x23a
 6044 0829 DA000000 		.4byte	0xda
 6045 082d 00000000 		.4byte	.LFB74
 6046 0831 60000000 		.4byte	.LFE74-.LFB74
 6047 0835 01       		.uleb128 0x1
 6048 0836 9C       		.byte	0x9c
 6049 0837 67080000 		.4byte	0x867
 6050 083b 17       		.uleb128 0x17
 6051 083c 1A050000 		.4byte	.LASF68
 6052 0840 01       		.byte	0x1
 6053 0841 3A02     		.2byte	0x23a
 6054 0843 6C050000 		.4byte	0x56c
 6055 0847 02       		.uleb128 0x2
 6056 0848 91       		.byte	0x91
 6057 0849 6C       		.sleb128 -20
 6058 084a 17       		.uleb128 0x17
 6059 084b 3D000000 		.4byte	.LASF45
 6060 084f 01       		.byte	0x1
 6061 0850 3A02     		.2byte	0x23a
 6062 0852 67080000 		.4byte	0x867
 6063 0856 02       		.uleb128 0x2
 6064 0857 91       		.byte	0x91
 6065 0858 68       		.sleb128 -24
 6066 0859 15       		.uleb128 0x15
 6067 085a 6900     		.ascii	"i\000"
 6068 085c 01       		.byte	0x1
 6069 085d 3C02     		.2byte	0x23c
 6070 085f DA000000 		.4byte	0xda
 6071 0863 02       		.uleb128 0x2
 6072 0864 91       		.byte	0x91
 6073 0865 74       		.sleb128 -12
 6074 0866 00       		.byte	0
 6075 0867 05       		.uleb128 0x5
 6076 0868 04       		.byte	0x4
 6077 0869 3E020000 		.4byte	0x23e
 6078 086d 18       		.uleb128 0x18
 6079 086e D9050000 		.4byte	.LASF69
 6080 0872 01       		.byte	0x1
 6081 0873 4902     		.2byte	0x249
 6082 0875 DA000000 		.4byte	0xda
 6083 0879 00000000 		.4byte	.LFB75
 6084 087d 9C000000 		.4byte	.LFE75-.LFB75
 6085 0881 01       		.uleb128 0x1
 6086 0882 9C       		.byte	0x9c
 6087 0883 C2080000 		.4byte	0x8c2
 6088 0887 17       		.uleb128 0x17
 6089 0888 5B040000 		.4byte	.LASF70
 6090 088c 01       		.byte	0x1
 6091 088d 4902     		.2byte	0x249
 6092 088f C2080000 		.4byte	0x8c2
 6093 0893 02       		.uleb128 0x2
 6094 0894 91       		.byte	0x91
 6095 0895 6C       		.sleb128 -20
 6096 0896 17       		.uleb128 0x17
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 126


 6097 0897 38000000 		.4byte	.LASF46
 6098 089b 01       		.byte	0x1
 6099 089c 4902     		.2byte	0x249
 6100 089e 6C050000 		.4byte	0x56c
 6101 08a2 02       		.uleb128 0x2
 6102 08a3 91       		.byte	0x91
 6103 08a4 68       		.sleb128 -24
 6104 08a5 15       		.uleb128 0x15
 6105 08a6 6D696E00 		.ascii	"min\000"
 6106 08aa 01       		.byte	0x1
 6107 08ab 4C02     		.2byte	0x24c
 6108 08ad DA000000 		.4byte	0xda
 6109 08b1 02       		.uleb128 0x2
 6110 08b2 91       		.byte	0x91
 6111 08b3 74       		.sleb128 -12
 6112 08b4 15       		.uleb128 0x15
 6113 08b5 6900     		.ascii	"i\000"
 6114 08b7 01       		.byte	0x1
 6115 08b8 4D02     		.2byte	0x24d
 6116 08ba B6000000 		.4byte	0xb6
 6117 08be 02       		.uleb128 0x2
 6118 08bf 91       		.byte	0x91
 6119 08c0 72       		.sleb128 -14
 6120 08c1 00       		.byte	0
 6121 08c2 05       		.uleb128 0x5
 6122 08c3 04       		.byte	0x4
 6123 08c4 91000000 		.4byte	0x91
 6124 08c8 1E       		.uleb128 0x1e
 6125 08c9 B5040000 		.4byte	.LASF71
 6126 08cd 01       		.byte	0x1
 6127 08ce 6602     		.2byte	0x266
 6128 08d0 AA000000 		.4byte	0xaa
 6129 08d4 00000000 		.4byte	.LFB76
 6130 08d8 80000000 		.4byte	.LFE76-.LFB76
 6131 08dc 01       		.uleb128 0x1
 6132 08dd 9C       		.byte	0x9c
 6133 08de 01090000 		.4byte	0x901
 6134 08e2 17       		.uleb128 0x17
 6135 08e3 89020000 		.4byte	.LASF55
 6136 08e7 01       		.byte	0x1
 6137 08e8 6602     		.2byte	0x266
 6138 08ea 6C050000 		.4byte	0x56c
 6139 08ee 02       		.uleb128 0x2
 6140 08ef 91       		.byte	0x91
 6141 08f0 74       		.sleb128 -12
 6142 08f1 17       		.uleb128 0x17
 6143 08f2 90020000 		.4byte	.LASF56
 6144 08f6 01       		.byte	0x1
 6145 08f7 6602     		.2byte	0x266
 6146 08f9 6C050000 		.4byte	0x56c
 6147 08fd 02       		.uleb128 0x2
 6148 08fe 91       		.byte	0x91
 6149 08ff 70       		.sleb128 -16
 6150 0900 00       		.byte	0
 6151 0901 18       		.uleb128 0x18
 6152 0902 4B020000 		.4byte	.LASF72
 6153 0906 01       		.byte	0x1
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 127


 6154 0907 7E02     		.2byte	0x27e
 6155 0909 AA000000 		.4byte	0xaa
 6156 090d 00000000 		.4byte	.LFB77
 6157 0911 30020000 		.4byte	.LFE77-.LFB77
 6158 0915 01       		.uleb128 0x1
 6159 0916 9C       		.byte	0x9c
 6160 0917 3A090000 		.4byte	0x93a
 6161 091b 17       		.uleb128 0x17
 6162 091c 61020000 		.4byte	.LASF34
 6163 0920 01       		.byte	0x1
 6164 0921 7E02     		.2byte	0x27e
 6165 0923 70030000 		.4byte	0x370
 6166 0927 02       		.uleb128 0x2
 6167 0928 91       		.byte	0x91
 6168 0929 74       		.sleb128 -12
 6169 092a 17       		.uleb128 0x17
 6170 092b C0040000 		.4byte	.LASF33
 6171 092f 01       		.byte	0x1
 6172 0930 7E02     		.2byte	0x27e
 6173 0932 B6000000 		.4byte	0xb6
 6174 0936 02       		.uleb128 0x2
 6175 0937 91       		.byte	0x91
 6176 0938 72       		.sleb128 -14
 6177 0939 00       		.byte	0
 6178 093a 1F       		.uleb128 0x1f
 6179 093b 2E060000 		.4byte	.LASF76
 6180 093f 01       		.byte	0x1
 6181 0940 D802     		.2byte	0x2d8
 6182 0942 00000000 		.4byte	.LFB78
 6183 0946 5C010000 		.4byte	.LFE78-.LFB78
 6184 094a 01       		.uleb128 0x1
 6185 094b 9C       		.byte	0x9c
 6186 094c 16       		.uleb128 0x16
 6187 094d 50000000 		.4byte	.LASF73
 6188 0951 01       		.byte	0x1
 6189 0952 0603     		.2byte	0x306
 6190 0954 00000000 		.4byte	.LFB79
 6191 0958 20020000 		.4byte	.LFE79-.LFB79
 6192 095c 01       		.uleb128 0x1
 6193 095d 9C       		.byte	0x9c
 6194 095e 90090000 		.4byte	0x990
 6195 0962 17       		.uleb128 0x17
 6196 0963 61020000 		.4byte	.LASF34
 6197 0967 01       		.byte	0x1
 6198 0968 0603     		.2byte	0x306
 6199 096a 70030000 		.4byte	0x370
 6200 096e 02       		.uleb128 0x2
 6201 096f 91       		.byte	0x91
 6202 0970 6C       		.sleb128 -20
 6203 0971 1A       		.uleb128 0x1a
 6204 0972 3A060000 		.4byte	.LASF74
 6205 0976 01       		.byte	0x1
 6206 0977 1103     		.2byte	0x311
 6207 0979 AA000000 		.4byte	0xaa
 6208 097d 02       		.uleb128 0x2
 6209 097e 91       		.byte	0x91
 6210 097f 77       		.sleb128 -9
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 128


 6211 0980 1A       		.uleb128 0x1a
 6212 0981 69060000 		.4byte	.LASF75
 6213 0985 01       		.byte	0x1
 6214 0986 3303     		.2byte	0x333
 6215 0988 AA000000 		.4byte	0xaa
 6216 098c 02       		.uleb128 0x2
 6217 098d 91       		.byte	0x91
 6218 098e 76       		.sleb128 -10
 6219 098f 00       		.byte	0
 6220 0990 1F       		.uleb128 0x1f
 6221 0991 96010000 		.4byte	.LASF77
 6222 0995 01       		.byte	0x1
 6223 0996 4C03     		.2byte	0x34c
 6224 0998 00000000 		.4byte	.LFB80
 6225 099c 58000000 		.4byte	.LFE80-.LFB80
 6226 09a0 01       		.uleb128 0x1
 6227 09a1 9C       		.byte	0x9c
 6228 09a2 1F       		.uleb128 0x1f
 6229 09a3 74020000 		.4byte	.LASF78
 6230 09a7 01       		.byte	0x1
 6231 09a8 5903     		.2byte	0x359
 6232 09aa 00000000 		.4byte	.LFB81
 6233 09ae 5C000000 		.4byte	.LFE81-.LFB81
 6234 09b2 01       		.uleb128 0x1
 6235 09b3 9C       		.byte	0x9c
 6236 09b4 1F       		.uleb128 0x1f
 6237 09b5 10060000 		.4byte	.LASF79
 6238 09b9 01       		.byte	0x1
 6239 09ba 6A03     		.2byte	0x36a
 6240 09bc 00000000 		.4byte	.LFB82
 6241 09c0 5C000000 		.4byte	.LFE82-.LFB82
 6242 09c4 01       		.uleb128 0x1
 6243 09c5 9C       		.byte	0x9c
 6244 09c6 1D       		.uleb128 0x1d
 6245 09c7 ED050000 		.4byte	.LASF80
 6246 09cb 01       		.byte	0x1
 6247 09cc 8203     		.2byte	0x382
 6248 09ce 00000000 		.4byte	.LFB83
 6249 09d2 28020000 		.4byte	.LFE83-.LFB83
 6250 09d6 01       		.uleb128 0x1
 6251 09d7 9C       		.byte	0x9c
 6252 09d8 080A0000 		.4byte	0xa08
 6253 09dc 17       		.uleb128 0x17
 6254 09dd 61020000 		.4byte	.LASF34
 6255 09e1 01       		.byte	0x1
 6256 09e2 8203     		.2byte	0x382
 6257 09e4 70030000 		.4byte	0x370
 6258 09e8 02       		.uleb128 0x2
 6259 09e9 91       		.byte	0x91
 6260 09ea 6C       		.sleb128 -20
 6261 09eb 17       		.uleb128 0x17
 6262 09ec C0040000 		.4byte	.LASF33
 6263 09f0 01       		.byte	0x1
 6264 09f1 8203     		.2byte	0x382
 6265 09f3 B6000000 		.4byte	0xb6
 6266 09f7 02       		.uleb128 0x2
 6267 09f8 91       		.byte	0x91
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 129


 6268 09f9 6A       		.sleb128 -22
 6269 09fa 15       		.uleb128 0x15
 6270 09fb 6900     		.ascii	"i\000"
 6271 09fd 01       		.byte	0x1
 6272 09fe 8503     		.2byte	0x385
 6273 0a00 B6000000 		.4byte	0xb6
 6274 0a04 02       		.uleb128 0x2
 6275 0a05 91       		.byte	0x91
 6276 0a06 76       		.sleb128 -10
 6277 0a07 00       		.byte	0
 6278 0a08 16       		.uleb128 0x16
 6279 0a09 45050000 		.4byte	.LASF81
 6280 0a0d 01       		.byte	0x1
 6281 0a0e B603     		.2byte	0x3b6
 6282 0a10 00000000 		.4byte	.LFB84
 6283 0a14 90000000 		.4byte	.LFE84-.LFB84
 6284 0a18 01       		.uleb128 0x1
 6285 0a19 9C       		.byte	0x9c
 6286 0a1a 3D0A0000 		.4byte	0xa3d
 6287 0a1e 17       		.uleb128 0x17
 6288 0a1f 61020000 		.4byte	.LASF34
 6289 0a23 01       		.byte	0x1
 6290 0a24 B603     		.2byte	0x3b6
 6291 0a26 70030000 		.4byte	0x370
 6292 0a2a 02       		.uleb128 0x2
 6293 0a2b 91       		.byte	0x91
 6294 0a2c 74       		.sleb128 -12
 6295 0a2d 17       		.uleb128 0x17
 6296 0a2e C0040000 		.4byte	.LASF33
 6297 0a32 01       		.byte	0x1
 6298 0a33 B603     		.2byte	0x3b6
 6299 0a35 B6000000 		.4byte	0xb6
 6300 0a39 02       		.uleb128 0x2
 6301 0a3a 91       		.byte	0x91
 6302 0a3b 72       		.sleb128 -14
 6303 0a3c 00       		.byte	0
 6304 0a3d 16       		.uleb128 0x16
 6305 0a3e 52010000 		.4byte	.LASF82
 6306 0a42 01       		.byte	0x1
 6307 0a43 CD03     		.2byte	0x3cd
 6308 0a45 00000000 		.4byte	.LFB85
 6309 0a49 3C000000 		.4byte	.LFE85-.LFB85
 6310 0a4d 01       		.uleb128 0x1
 6311 0a4e 9C       		.byte	0x9c
 6312 0a4f 610A0000 		.4byte	0xa61
 6313 0a53 19       		.uleb128 0x19
 6314 0a54 7300     		.ascii	"s\000"
 6315 0a56 01       		.byte	0x1
 6316 0a57 CD03     		.2byte	0x3cd
 6317 0a59 7D000000 		.4byte	0x7d
 6318 0a5d 02       		.uleb128 0x2
 6319 0a5e 91       		.byte	0x91
 6320 0a5f 74       		.sleb128 -12
 6321 0a60 00       		.byte	0
 6322 0a61 16       		.uleb128 0x16
 6323 0a62 52060000 		.4byte	.LASF83
 6324 0a66 01       		.byte	0x1
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 130


 6325 0a67 DB03     		.2byte	0x3db
 6326 0a69 00000000 		.4byte	.LFB86
 6327 0a6d 24000000 		.4byte	.LFE86-.LFB86
 6328 0a71 01       		.uleb128 0x1
 6329 0a72 9C       		.byte	0x9c
 6330 0a73 850A0000 		.4byte	0xa85
 6331 0a77 19       		.uleb128 0x19
 6332 0a78 6300     		.ascii	"c\000"
 6333 0a7a 01       		.byte	0x1
 6334 0a7b DB03     		.2byte	0x3db
 6335 0a7d 83000000 		.4byte	0x83
 6336 0a81 02       		.uleb128 0x2
 6337 0a82 91       		.byte	0x91
 6338 0a83 77       		.sleb128 -9
 6339 0a84 00       		.byte	0
 6340 0a85 20       		.uleb128 0x20
 6341 0a86 0D050000 		.4byte	.LASF84
 6342 0a8a 06       		.byte	0x6
 6343 0a8b 9606     		.2byte	0x696
 6344 0a8d 910A0000 		.4byte	0xa91
 6345 0a91 21       		.uleb128 0x21
 6346 0a92 9F000000 		.4byte	0x9f
 6347 0a96 22       		.uleb128 0x22
 6348 0a97 C4060000 		.4byte	.LASF85
 6349 0a9b 05       		.byte	0x5
 6350 0a9c 11       		.byte	0x11
 6351 0a9d CE000000 		.4byte	0xce
 6352 0aa1 05       		.uleb128 0x5
 6353 0aa2 03       		.byte	0x3
 6354 0aa3 00000000 		.4byte	quad_cnt_left
 6355 0aa7 22       		.uleb128 0x22
 6356 0aa8 09040000 		.4byte	.LASF86
 6357 0aac 05       		.byte	0x5
 6358 0aad 12       		.byte	0x12
 6359 0aae CE000000 		.4byte	0xce
 6360 0ab2 05       		.uleb128 0x5
 6361 0ab3 03       		.byte	0x3
 6362 0ab4 00000000 		.4byte	quad_cnt_right
 6363 0ab8 22       		.uleb128 0x22
 6364 0ab9 66020000 		.4byte	.LASF87
 6365 0abd 05       		.byte	0x5
 6366 0abe 13       		.byte	0x13
 6367 0abf CE000000 		.4byte	0xce
 6368 0ac3 05       		.uleb128 0x5
 6369 0ac4 03       		.byte	0x3
 6370 0ac5 00000000 		.4byte	quad_cnt_prev
 6371 0ac9 22       		.uleb128 0x22
 6372 0aca 5B000000 		.4byte	.LASF88
 6373 0ace 05       		.byte	0x5
 6374 0acf 14       		.byte	0x14
 6375 0ad0 AA000000 		.4byte	0xaa
 6376 0ad4 05       		.uleb128 0x5
 6377 0ad5 03       		.byte	0x3
 6378 0ad6 00000000 		.4byte	straight_line_distance
 6379 0ada 22       		.uleb128 0x22
 6380 0adb 5B050000 		.4byte	.LASF89
 6381 0adf 05       		.byte	0x5
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 131


 6382 0ae0 15       		.byte	0x15
 6383 0ae1 AA000000 		.4byte	0xaa
 6384 0ae5 05       		.uleb128 0x5
 6385 0ae6 03       		.byte	0x3
 6386 0ae7 00000000 		.4byte	distance_prev
 6387 0aeb 22       		.uleb128 0x22
 6388 0aec 42030000 		.4byte	.LASF90
 6389 0af0 05       		.byte	0x5
 6390 0af1 18       		.byte	0x18
 6391 0af2 AA000000 		.4byte	0xaa
 6392 0af6 05       		.uleb128 0x5
 6393 0af7 03       		.byte	0x3
 6394 0af8 00000000 		.4byte	pwm_cmp_left
 6395 0afc 22       		.uleb128 0x22
 6396 0afd E4040000 		.4byte	.LASF91
 6397 0b01 05       		.byte	0x5
 6398 0b02 19       		.byte	0x19
 6399 0b03 AA000000 		.4byte	0xaa
 6400 0b07 05       		.uleb128 0x5
 6401 0b08 03       		.byte	0x3
 6402 0b09 00000000 		.4byte	pwm_cmp_right
 6403 0b0d 22       		.uleb128 0x22
 6404 0b0e FF000000 		.4byte	.LASF92
 6405 0b12 05       		.byte	0x5
 6406 0b13 1D       		.byte	0x1d
 6407 0b14 AA000000 		.4byte	0xaa
 6408 0b18 05       		.uleb128 0x5
 6409 0b19 03       		.byte	0x3
 6410 0b1a 00000000 		.4byte	robot_direction
 6411 0b1e 22       		.uleb128 0x22
 6412 0b1f 17000000 		.4byte	.LASF93
 6413 0b23 05       		.byte	0x5
 6414 0b24 20       		.byte	0x20
 6415 0b25 AA000000 		.4byte	0xaa
 6416 0b29 05       		.uleb128 0x5
 6417 0b2a 03       		.byte	0x3
 6418 0b2b 00000000 		.4byte	robot_x_pos
 6419 0b2f 22       		.uleb128 0x22
 6420 0b30 00030000 		.4byte	.LASF94
 6421 0b34 05       		.byte	0x5
 6422 0b35 21       		.byte	0x21
 6423 0b36 AA000000 		.4byte	0xaa
 6424 0b3a 05       		.uleb128 0x5
 6425 0b3b 03       		.byte	0x3
 6426 0b3c 00000000 		.4byte	robot_y_pos
 6427 0b40 22       		.uleb128 0x22
 6428 0b41 00000000 		.4byte	.LASF95
 6429 0b45 05       		.byte	0x5
 6430 0b46 24       		.byte	0x24
 6431 0b47 B6000000 		.4byte	0xb6
 6432 0b4b 05       		.uleb128 0x5
 6433 0b4c 03       		.byte	0x3
 6434 0b4d 00000000 		.4byte	num_map_nodes
 6435 0b51 0F       		.uleb128 0xf
 6436 0b52 C2000000 		.4byte	0xc2
 6437 0b56 670B0000 		.4byte	0xb67
 6438 0b5a 11       		.uleb128 0x11
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 132


 6439 0b5b 76000000 		.4byte	0x76
 6440 0b5f 03       		.byte	0x3
 6441 0b60 11       		.uleb128 0x11
 6442 0b61 76000000 		.4byte	0x76
 6443 0b65 01       		.byte	0x1
 6444 0b66 00       		.byte	0
 6445 0b67 22       		.uleb128 0x22
 6446 0b68 F3000000 		.4byte	.LASF96
 6447 0b6c 05       		.byte	0x5
 6448 0b6d 27       		.byte	0x27
 6449 0b6e 510B0000 		.4byte	0xb51
 6450 0b72 05       		.uleb128 0x5
 6451 0b73 03       		.byte	0x3
 6452 0b74 00000000 		.4byte	orientation
 6453 0b78 22       		.uleb128 0x22
 6454 0b79 8B060000 		.4byte	.LASF97
 6455 0b7d 05       		.byte	0x5
 6456 0b7e 2E       		.byte	0x2e
 6457 0b7f AA000000 		.4byte	0xaa
 6458 0b83 05       		.uleb128 0x5
 6459 0b84 03       		.byte	0x3
 6460 0b85 00000000 		.4byte	robot_orientation
 6461 0b89 22       		.uleb128 0x22
 6462 0b8a 02070000 		.4byte	.LASF98
 6463 0b8e 05       		.byte	0x5
 6464 0b8f 2F       		.byte	0x2f
 6465 0b90 75070000 		.4byte	0x775
 6466 0b94 05       		.uleb128 0x5
 6467 0b95 03       		.byte	0x3
 6468 0b96 00000000 		.4byte	path_orientation
 6469 0b9a 22       		.uleb128 0x22
 6470 0b9b 0C020000 		.4byte	.LASF99
 6471 0b9f 05       		.byte	0x5
 6472 0ba0 32       		.byte	0x32
 6473 0ba1 B6000000 		.4byte	0xb6
 6474 0ba5 05       		.uleb128 0x5
 6475 0ba6 03       		.byte	0x3
 6476 0ba7 00000000 		.4byte	path_index
 6477 0bab 22       		.uleb128 0x22
 6478 0bac 72010000 		.4byte	.LASF100
 6479 0bb0 05       		.byte	0x5
 6480 0bb1 33       		.byte	0x33
 6481 0bb2 B6000000 		.4byte	0xb6
 6482 0bb6 05       		.uleb128 0x5
 6483 0bb7 03       		.byte	0x3
 6484 0bb8 00000000 		.4byte	robot_position_index
 6485 0bbc 22       		.uleb128 0x22
 6486 0bbd CC040000 		.4byte	.LASF101
 6487 0bc1 05       		.byte	0x5
 6488 0bc2 34       		.byte	0x34
 6489 0bc3 B6000000 		.4byte	0xb6
 6490 0bc7 05       		.uleb128 0x5
 6491 0bc8 03       		.byte	0x3
 6492 0bc9 00000000 		.4byte	next_event_index
 6493 0bcd 22       		.uleb128 0x22
 6494 0bce E4020000 		.4byte	.LASF102
 6495 0bd2 05       		.byte	0x5
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 133


 6496 0bd3 37       		.byte	0x37
 6497 0bd4 AA000000 		.4byte	0xaa
 6498 0bd8 05       		.uleb128 0x5
 6499 0bd9 03       		.byte	0x3
 6500 0bda 00000000 		.4byte	flag_turn_around
 6501 0bde 22       		.uleb128 0x22
 6502 0bdf 84050000 		.4byte	.LASF103
 6503 0be3 05       		.byte	0x5
 6504 0be4 38       		.byte	0x38
 6505 0be5 AA000000 		.4byte	0xaa
 6506 0be9 05       		.uleb128 0x5
 6507 0bea 03       		.byte	0x3
 6508 0beb 00000000 		.4byte	flag_veering
 6509 0bef 22       		.uleb128 0x22
 6510 0bf0 D2060000 		.4byte	.LASF104
 6511 0bf4 05       		.byte	0x5
 6512 0bf5 39       		.byte	0x39
 6513 0bf6 AA000000 		.4byte	0xaa
 6514 0bfa 05       		.uleb128 0x5
 6515 0bfb 03       		.byte	0x3
 6516 0bfc 00000000 		.4byte	flag_new_path_index
 6517 0c00 22       		.uleb128 0x22
 6518 0c01 17020000 		.4byte	.LASF105
 6519 0c05 05       		.byte	0x5
 6520 0c06 3A       		.byte	0x3a
 6521 0c07 AA000000 		.4byte	0xaa
 6522 0c0b 05       		.uleb128 0x5
 6523 0c0c 03       		.byte	0x3
 6524 0c0d 00000000 		.4byte	flag_passing_next_int
 6525 0c11 22       		.uleb128 0x22
 6526 0c12 7F000000 		.4byte	.LASF106
 6527 0c16 05       		.byte	0x5
 6528 0c17 3B       		.byte	0x3b
 6529 0c18 AA000000 		.4byte	0xaa
 6530 0c1c 05       		.uleb128 0x5
 6531 0c1d 03       		.byte	0x3
 6532 0c1e 00000000 		.4byte	flag_next_event_deadend
 6533 0c22 22       		.uleb128 0x22
 6534 0c23 3B010000 		.4byte	.LASF107
 6535 0c27 05       		.byte	0x5
 6536 0c28 3C       		.byte	0x3c
 6537 0c29 AA000000 		.4byte	0xaa
 6538 0c2d 05       		.uleb128 0x5
 6539 0c2e 03       		.byte	0x3
 6540 0c2f 00000000 		.4byte	flag_next_event_u_turn
 6541 0c33 22       		.uleb128 0x22
 6542 0c34 91050000 		.4byte	.LASF108
 6543 0c38 05       		.byte	0x5
 6544 0c39 3D       		.byte	0x3d
 6545 0c3a AA000000 		.4byte	0xaa
 6546 0c3e 05       		.uleb128 0x5
 6547 0c3f 03       		.byte	0x3
 6548 0c40 00000000 		.4byte	flag_centre_on_line_after_turn
 6549 0c44 22       		.uleb128 0x22
 6550 0c45 D6000000 		.4byte	.LASF109
 6551 0c49 05       		.byte	0x5
 6552 0c4a 3E       		.byte	0x3e
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 134


 6553 0c4b AA000000 		.4byte	0xaa
 6554 0c4f 05       		.uleb128 0x5
 6555 0c50 03       		.byte	0x3
 6556 0c51 00000000 		.4byte	flag_next_event_intersection
 6557 0c55 22       		.uleb128 0x22
 6558 0c56 2B010000 		.4byte	.LASF110
 6559 0c5a 05       		.byte	0x5
 6560 0c5b 41       		.byte	0x41
 6561 0c5c AA000000 		.4byte	0xaa
 6562 0c60 05       		.uleb128 0x5
 6563 0c61 03       		.byte	0x3
 6564 0c62 00000000 		.4byte	int_sensor_left
 6565 0c66 22       		.uleb128 0x22
 6566 0c67 C7020000 		.4byte	.LASF111
 6567 0c6b 05       		.byte	0x5
 6568 0c6c 42       		.byte	0x42
 6569 0c6d AA000000 		.4byte	0xaa
 6570 0c71 05       		.uleb128 0x5
 6571 0c72 03       		.byte	0x3
 6572 0c73 00000000 		.4byte	int_sensor_right
 6573 0c77 22       		.uleb128 0x22
 6574 0c78 EF060000 		.4byte	.LASF112
 6575 0c7c 05       		.byte	0x5
 6576 0c7d 43       		.byte	0x43
 6577 0c7e AA000000 		.4byte	0xaa
 6578 0c82 05       		.uleb128 0x5
 6579 0c83 03       		.byte	0x3
 6580 0c84 00000000 		.4byte	line_sensor_centre
 6581 0c88 22       		.uleb128 0x22
 6582 0c89 BB000000 		.4byte	.LASF113
 6583 0c8d 05       		.byte	0x5
 6584 0c8e 44       		.byte	0x44
 6585 0c8f AA000000 		.4byte	0xaa
 6586 0c93 05       		.uleb128 0x5
 6587 0c94 03       		.byte	0x3
 6588 0c95 00000000 		.4byte	line_sensor_left
 6589 0c99 22       		.uleb128 0x22
 6590 0c9a B0020000 		.4byte	.LASF114
 6591 0c9e 05       		.byte	0x5
 6592 0c9f 45       		.byte	0x45
 6593 0ca0 AA000000 		.4byte	0xaa
 6594 0ca4 05       		.uleb128 0x5
 6595 0ca5 03       		.byte	0x3
 6596 0ca6 00000000 		.4byte	line_sensor_right
 6597 0caa 22       		.uleb128 0x22
 6598 0cab DD040000 		.4byte	.LASF115
 6599 0caf 05       		.byte	0x5
 6600 0cb0 48       		.byte	0x48
 6601 0cb1 B6000000 		.4byte	0xb6
 6602 0cb5 05       		.uleb128 0x5
 6603 0cb6 03       		.byte	0x3
 6604 0cb7 00000000 		.4byte	tc_cnt
 6605 0cbb 22       		.uleb128 0x22
 6606 0cbc AC000000 		.4byte	.LASF116
 6607 0cc0 05       		.byte	0x5
 6608 0cc1 4B       		.byte	0x4b
 6609 0cc2 AA000000 		.4byte	0xaa
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 135


 6610 0cc6 05       		.uleb128 0x5
 6611 0cc7 03       		.byte	0x3
 6612 0cc8 00000000 		.4byte	flag_adc_ready
 6613 0ccc 0F       		.uleb128 0xf
 6614 0ccd 68000000 		.4byte	0x68
 6615 0cd1 E20C0000 		.4byte	0xce2
 6616 0cd5 11       		.uleb128 0x11
 6617 0cd6 76000000 		.4byte	0x76
 6618 0cda 0E       		.byte	0xe
 6619 0cdb 11       		.uleb128 0x11
 6620 0cdc 76000000 		.4byte	0x76
 6621 0ce0 12       		.byte	0x12
 6622 0ce1 00       		.byte	0
 6623 0ce2 23       		.uleb128 0x23
 6624 0ce3 6D617000 		.ascii	"map\000"
 6625 0ce7 07       		.byte	0x7
 6626 0ce8 11       		.byte	0x11
 6627 0ce9 CC0C0000 		.4byte	0xccc
 6628 0ced 05       		.uleb128 0x5
 6629 0cee 03       		.byte	0x3
 6630 0cef 00000000 		.4byte	map
 6631 0cf3 0F       		.uleb128 0xf
 6632 0cf4 68000000 		.4byte	0x68
 6633 0cf8 090D0000 		.4byte	0xd09
 6634 0cfc 11       		.uleb128 0x11
 6635 0cfd 76000000 		.4byte	0x76
 6636 0d01 05       		.byte	0x5
 6637 0d02 11       		.uleb128 0x11
 6638 0d03 76000000 		.4byte	0x76
 6639 0d07 01       		.byte	0x1
 6640 0d08 00       		.byte	0
 6641 0d09 22       		.uleb128 0x22
 6642 0d0a FF030000 		.4byte	.LASF117
 6643 0d0e 07       		.byte	0x7
 6644 0d0f 23       		.byte	0x23
 6645 0d10 F30C0000 		.4byte	0xcf3
 6646 0d14 05       		.uleb128 0x5
 6647 0d15 03       		.byte	0x3
 6648 0d16 00000000 		.4byte	food_list
 6649 0d1a 00       		.byte	0
 6650              		.section	.debug_abbrev,"",%progbits
 6651              	.Ldebug_abbrev0:
 6652 0000 01       		.uleb128 0x1
 6653 0001 11       		.uleb128 0x11
 6654 0002 01       		.byte	0x1
 6655 0003 25       		.uleb128 0x25
 6656 0004 0E       		.uleb128 0xe
 6657 0005 13       		.uleb128 0x13
 6658 0006 0B       		.uleb128 0xb
 6659 0007 03       		.uleb128 0x3
 6660 0008 0E       		.uleb128 0xe
 6661 0009 1B       		.uleb128 0x1b
 6662 000a 0E       		.uleb128 0xe
 6663 000b 55       		.uleb128 0x55
 6664 000c 17       		.uleb128 0x17
 6665 000d 11       		.uleb128 0x11
 6666 000e 01       		.uleb128 0x1
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 136


 6667 000f 10       		.uleb128 0x10
 6668 0010 17       		.uleb128 0x17
 6669 0011 00       		.byte	0
 6670 0012 00       		.byte	0
 6671 0013 02       		.uleb128 0x2
 6672 0014 24       		.uleb128 0x24
 6673 0015 00       		.byte	0
 6674 0016 0B       		.uleb128 0xb
 6675 0017 0B       		.uleb128 0xb
 6676 0018 3E       		.uleb128 0x3e
 6677 0019 0B       		.uleb128 0xb
 6678 001a 03       		.uleb128 0x3
 6679 001b 0E       		.uleb128 0xe
 6680 001c 00       		.byte	0
 6681 001d 00       		.byte	0
 6682 001e 03       		.uleb128 0x3
 6683 001f 16       		.uleb128 0x16
 6684 0020 00       		.byte	0
 6685 0021 03       		.uleb128 0x3
 6686 0022 0E       		.uleb128 0xe
 6687 0023 3A       		.uleb128 0x3a
 6688 0024 0B       		.uleb128 0xb
 6689 0025 3B       		.uleb128 0x3b
 6690 0026 0B       		.uleb128 0xb
 6691 0027 49       		.uleb128 0x49
 6692 0028 13       		.uleb128 0x13
 6693 0029 00       		.byte	0
 6694 002a 00       		.byte	0
 6695 002b 04       		.uleb128 0x4
 6696 002c 24       		.uleb128 0x24
 6697 002d 00       		.byte	0
 6698 002e 0B       		.uleb128 0xb
 6699 002f 0B       		.uleb128 0xb
 6700 0030 3E       		.uleb128 0x3e
 6701 0031 0B       		.uleb128 0xb
 6702 0032 03       		.uleb128 0x3
 6703 0033 08       		.uleb128 0x8
 6704 0034 00       		.byte	0
 6705 0035 00       		.byte	0
 6706 0036 05       		.uleb128 0x5
 6707 0037 0F       		.uleb128 0xf
 6708 0038 00       		.byte	0
 6709 0039 0B       		.uleb128 0xb
 6710 003a 0B       		.uleb128 0xb
 6711 003b 49       		.uleb128 0x49
 6712 003c 13       		.uleb128 0x13
 6713 003d 00       		.byte	0
 6714 003e 00       		.byte	0
 6715 003f 06       		.uleb128 0x6
 6716 0040 16       		.uleb128 0x16
 6717 0041 00       		.byte	0
 6718 0042 03       		.uleb128 0x3
 6719 0043 0E       		.uleb128 0xe
 6720 0044 3A       		.uleb128 0x3a
 6721 0045 0B       		.uleb128 0xb
 6722 0046 3B       		.uleb128 0x3b
 6723 0047 05       		.uleb128 0x5
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 137


 6724 0048 49       		.uleb128 0x49
 6725 0049 13       		.uleb128 0x13
 6726 004a 00       		.byte	0
 6727 004b 00       		.byte	0
 6728 004c 07       		.uleb128 0x7
 6729 004d 04       		.uleb128 0x4
 6730 004e 01       		.byte	0x1
 6731 004f 03       		.uleb128 0x3
 6732 0050 0E       		.uleb128 0xe
 6733 0051 0B       		.uleb128 0xb
 6734 0052 0B       		.uleb128 0xb
 6735 0053 3A       		.uleb128 0x3a
 6736 0054 0B       		.uleb128 0xb
 6737 0055 3B       		.uleb128 0x3b
 6738 0056 0B       		.uleb128 0xb
 6739 0057 01       		.uleb128 0x1
 6740 0058 13       		.uleb128 0x13
 6741 0059 00       		.byte	0
 6742 005a 00       		.byte	0
 6743 005b 08       		.uleb128 0x8
 6744 005c 28       		.uleb128 0x28
 6745 005d 00       		.byte	0
 6746 005e 03       		.uleb128 0x3
 6747 005f 0E       		.uleb128 0xe
 6748 0060 1C       		.uleb128 0x1c
 6749 0061 0D       		.uleb128 0xd
 6750 0062 00       		.byte	0
 6751 0063 00       		.byte	0
 6752 0064 09       		.uleb128 0x9
 6753 0065 28       		.uleb128 0x28
 6754 0066 00       		.byte	0
 6755 0067 03       		.uleb128 0x3
 6756 0068 08       		.uleb128 0x8
 6757 0069 1C       		.uleb128 0x1c
 6758 006a 0D       		.uleb128 0xd
 6759 006b 00       		.byte	0
 6760 006c 00       		.byte	0
 6761 006d 0A       		.uleb128 0xa
 6762 006e 2E       		.uleb128 0x2e
 6763 006f 00       		.byte	0
 6764 0070 3F       		.uleb128 0x3f
 6765 0071 19       		.uleb128 0x19
 6766 0072 03       		.uleb128 0x3
 6767 0073 0E       		.uleb128 0xe
 6768 0074 3A       		.uleb128 0x3a
 6769 0075 0B       		.uleb128 0xb
 6770 0076 3B       		.uleb128 0x3b
 6771 0077 0B       		.uleb128 0xb
 6772 0078 27       		.uleb128 0x27
 6773 0079 19       		.uleb128 0x19
 6774 007a 11       		.uleb128 0x11
 6775 007b 01       		.uleb128 0x1
 6776 007c 12       		.uleb128 0x12
 6777 007d 06       		.uleb128 0x6
 6778 007e 40       		.uleb128 0x40
 6779 007f 18       		.uleb128 0x18
 6780 0080 9642     		.uleb128 0x2116
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 138


 6781 0082 19       		.uleb128 0x19
 6782 0083 00       		.byte	0
 6783 0084 00       		.byte	0
 6784 0085 0B       		.uleb128 0xb
 6785 0086 2E       		.uleb128 0x2e
 6786 0087 00       		.byte	0
 6787 0088 3F       		.uleb128 0x3f
 6788 0089 19       		.uleb128 0x19
 6789 008a 03       		.uleb128 0x3
 6790 008b 0E       		.uleb128 0xe
 6791 008c 3A       		.uleb128 0x3a
 6792 008d 0B       		.uleb128 0xb
 6793 008e 3B       		.uleb128 0x3b
 6794 008f 0B       		.uleb128 0xb
 6795 0090 27       		.uleb128 0x27
 6796 0091 19       		.uleb128 0x19
 6797 0092 11       		.uleb128 0x11
 6798 0093 01       		.uleb128 0x1
 6799 0094 12       		.uleb128 0x12
 6800 0095 06       		.uleb128 0x6
 6801 0096 40       		.uleb128 0x40
 6802 0097 18       		.uleb128 0x18
 6803 0098 9742     		.uleb128 0x2117
 6804 009a 19       		.uleb128 0x19
 6805 009b 00       		.byte	0
 6806 009c 00       		.byte	0
 6807 009d 0C       		.uleb128 0xc
 6808 009e 2E       		.uleb128 0x2e
 6809 009f 01       		.byte	0x1
 6810 00a0 3F       		.uleb128 0x3f
 6811 00a1 19       		.uleb128 0x19
 6812 00a2 03       		.uleb128 0x3
 6813 00a3 0E       		.uleb128 0xe
 6814 00a4 3A       		.uleb128 0x3a
 6815 00a5 0B       		.uleb128 0xb
 6816 00a6 3B       		.uleb128 0x3b
 6817 00a7 0B       		.uleb128 0xb
 6818 00a8 49       		.uleb128 0x49
 6819 00a9 13       		.uleb128 0x13
 6820 00aa 11       		.uleb128 0x11
 6821 00ab 01       		.uleb128 0x1
 6822 00ac 12       		.uleb128 0x12
 6823 00ad 06       		.uleb128 0x6
 6824 00ae 40       		.uleb128 0x40
 6825 00af 18       		.uleb128 0x18
 6826 00b0 9642     		.uleb128 0x2116
 6827 00b2 19       		.uleb128 0x19
 6828 00b3 01       		.uleb128 0x1
 6829 00b4 13       		.uleb128 0x13
 6830 00b5 00       		.byte	0
 6831 00b6 00       		.byte	0
 6832 00b7 0D       		.uleb128 0xd
 6833 00b8 34       		.uleb128 0x34
 6834 00b9 00       		.byte	0
 6835 00ba 03       		.uleb128 0x3
 6836 00bb 0E       		.uleb128 0xe
 6837 00bc 3A       		.uleb128 0x3a
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 139


 6838 00bd 0B       		.uleb128 0xb
 6839 00be 3B       		.uleb128 0x3b
 6840 00bf 0B       		.uleb128 0xb
 6841 00c0 49       		.uleb128 0x49
 6842 00c1 13       		.uleb128 0x13
 6843 00c2 02       		.uleb128 0x2
 6844 00c3 18       		.uleb128 0x18
 6845 00c4 00       		.byte	0
 6846 00c5 00       		.byte	0
 6847 00c6 0E       		.uleb128 0xe
 6848 00c7 0B       		.uleb128 0xb
 6849 00c8 01       		.byte	0x1
 6850 00c9 11       		.uleb128 0x11
 6851 00ca 01       		.uleb128 0x1
 6852 00cb 12       		.uleb128 0x12
 6853 00cc 06       		.uleb128 0x6
 6854 00cd 00       		.byte	0
 6855 00ce 00       		.byte	0
 6856 00cf 0F       		.uleb128 0xf
 6857 00d0 01       		.uleb128 0x1
 6858 00d1 01       		.byte	0x1
 6859 00d2 49       		.uleb128 0x49
 6860 00d3 13       		.uleb128 0x13
 6861 00d4 01       		.uleb128 0x1
 6862 00d5 13       		.uleb128 0x13
 6863 00d6 00       		.byte	0
 6864 00d7 00       		.byte	0
 6865 00d8 10       		.uleb128 0x10
 6866 00d9 21       		.uleb128 0x21
 6867 00da 00       		.byte	0
 6868 00db 49       		.uleb128 0x49
 6869 00dc 13       		.uleb128 0x13
 6870 00dd 2F       		.uleb128 0x2f
 6871 00de 18       		.uleb128 0x18
 6872 00df 00       		.byte	0
 6873 00e0 00       		.byte	0
 6874 00e1 11       		.uleb128 0x11
 6875 00e2 21       		.uleb128 0x21
 6876 00e3 00       		.byte	0
 6877 00e4 49       		.uleb128 0x49
 6878 00e5 13       		.uleb128 0x13
 6879 00e6 2F       		.uleb128 0x2f
 6880 00e7 0B       		.uleb128 0xb
 6881 00e8 00       		.byte	0
 6882 00e9 00       		.byte	0
 6883 00ea 12       		.uleb128 0x12
 6884 00eb 34       		.uleb128 0x34
 6885 00ec 00       		.byte	0
 6886 00ed 03       		.uleb128 0x3
 6887 00ee 08       		.uleb128 0x8
 6888 00ef 3A       		.uleb128 0x3a
 6889 00f0 0B       		.uleb128 0xb
 6890 00f1 3B       		.uleb128 0x3b
 6891 00f2 0B       		.uleb128 0xb
 6892 00f3 49       		.uleb128 0x49
 6893 00f4 13       		.uleb128 0x13
 6894 00f5 02       		.uleb128 0x2
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 140


 6895 00f6 18       		.uleb128 0x18
 6896 00f7 00       		.byte	0
 6897 00f8 00       		.byte	0
 6898 00f9 13       		.uleb128 0x13
 6899 00fa 2E       		.uleb128 0x2e
 6900 00fb 01       		.byte	0x1
 6901 00fc 3F       		.uleb128 0x3f
 6902 00fd 19       		.uleb128 0x19
 6903 00fe 03       		.uleb128 0x3
 6904 00ff 0E       		.uleb128 0xe
 6905 0100 3A       		.uleb128 0x3a
 6906 0101 0B       		.uleb128 0xb
 6907 0102 3B       		.uleb128 0x3b
 6908 0103 0B       		.uleb128 0xb
 6909 0104 27       		.uleb128 0x27
 6910 0105 19       		.uleb128 0x19
 6911 0106 11       		.uleb128 0x11
 6912 0107 01       		.uleb128 0x1
 6913 0108 12       		.uleb128 0x12
 6914 0109 06       		.uleb128 0x6
 6915 010a 40       		.uleb128 0x40
 6916 010b 18       		.uleb128 0x18
 6917 010c 9642     		.uleb128 0x2116
 6918 010e 19       		.uleb128 0x19
 6919 010f 01       		.uleb128 0x1
 6920 0110 13       		.uleb128 0x13
 6921 0111 00       		.byte	0
 6922 0112 00       		.byte	0
 6923 0113 14       		.uleb128 0x14
 6924 0114 05       		.uleb128 0x5
 6925 0115 00       		.byte	0
 6926 0116 03       		.uleb128 0x3
 6927 0117 0E       		.uleb128 0xe
 6928 0118 3A       		.uleb128 0x3a
 6929 0119 0B       		.uleb128 0xb
 6930 011a 3B       		.uleb128 0x3b
 6931 011b 0B       		.uleb128 0xb
 6932 011c 49       		.uleb128 0x49
 6933 011d 13       		.uleb128 0x13
 6934 011e 02       		.uleb128 0x2
 6935 011f 18       		.uleb128 0x18
 6936 0120 00       		.byte	0
 6937 0121 00       		.byte	0
 6938 0122 15       		.uleb128 0x15
 6939 0123 34       		.uleb128 0x34
 6940 0124 00       		.byte	0
 6941 0125 03       		.uleb128 0x3
 6942 0126 08       		.uleb128 0x8
 6943 0127 3A       		.uleb128 0x3a
 6944 0128 0B       		.uleb128 0xb
 6945 0129 3B       		.uleb128 0x3b
 6946 012a 05       		.uleb128 0x5
 6947 012b 49       		.uleb128 0x49
 6948 012c 13       		.uleb128 0x13
 6949 012d 02       		.uleb128 0x2
 6950 012e 18       		.uleb128 0x18
 6951 012f 00       		.byte	0
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 141


 6952 0130 00       		.byte	0
 6953 0131 16       		.uleb128 0x16
 6954 0132 2E       		.uleb128 0x2e
 6955 0133 01       		.byte	0x1
 6956 0134 3F       		.uleb128 0x3f
 6957 0135 19       		.uleb128 0x19
 6958 0136 03       		.uleb128 0x3
 6959 0137 0E       		.uleb128 0xe
 6960 0138 3A       		.uleb128 0x3a
 6961 0139 0B       		.uleb128 0xb
 6962 013a 3B       		.uleb128 0x3b
 6963 013b 05       		.uleb128 0x5
 6964 013c 27       		.uleb128 0x27
 6965 013d 19       		.uleb128 0x19
 6966 013e 11       		.uleb128 0x11
 6967 013f 01       		.uleb128 0x1
 6968 0140 12       		.uleb128 0x12
 6969 0141 06       		.uleb128 0x6
 6970 0142 40       		.uleb128 0x40
 6971 0143 18       		.uleb128 0x18
 6972 0144 9642     		.uleb128 0x2116
 6973 0146 19       		.uleb128 0x19
 6974 0147 01       		.uleb128 0x1
 6975 0148 13       		.uleb128 0x13
 6976 0149 00       		.byte	0
 6977 014a 00       		.byte	0
 6978 014b 17       		.uleb128 0x17
 6979 014c 05       		.uleb128 0x5
 6980 014d 00       		.byte	0
 6981 014e 03       		.uleb128 0x3
 6982 014f 0E       		.uleb128 0xe
 6983 0150 3A       		.uleb128 0x3a
 6984 0151 0B       		.uleb128 0xb
 6985 0152 3B       		.uleb128 0x3b
 6986 0153 05       		.uleb128 0x5
 6987 0154 49       		.uleb128 0x49
 6988 0155 13       		.uleb128 0x13
 6989 0156 02       		.uleb128 0x2
 6990 0157 18       		.uleb128 0x18
 6991 0158 00       		.byte	0
 6992 0159 00       		.byte	0
 6993 015a 18       		.uleb128 0x18
 6994 015b 2E       		.uleb128 0x2e
 6995 015c 01       		.byte	0x1
 6996 015d 3F       		.uleb128 0x3f
 6997 015e 19       		.uleb128 0x19
 6998 015f 03       		.uleb128 0x3
 6999 0160 0E       		.uleb128 0xe
 7000 0161 3A       		.uleb128 0x3a
 7001 0162 0B       		.uleb128 0xb
 7002 0163 3B       		.uleb128 0x3b
 7003 0164 05       		.uleb128 0x5
 7004 0165 27       		.uleb128 0x27
 7005 0166 19       		.uleb128 0x19
 7006 0167 49       		.uleb128 0x49
 7007 0168 13       		.uleb128 0x13
 7008 0169 11       		.uleb128 0x11
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 142


 7009 016a 01       		.uleb128 0x1
 7010 016b 12       		.uleb128 0x12
 7011 016c 06       		.uleb128 0x6
 7012 016d 40       		.uleb128 0x40
 7013 016e 18       		.uleb128 0x18
 7014 016f 9642     		.uleb128 0x2116
 7015 0171 19       		.uleb128 0x19
 7016 0172 01       		.uleb128 0x1
 7017 0173 13       		.uleb128 0x13
 7018 0174 00       		.byte	0
 7019 0175 00       		.byte	0
 7020 0176 19       		.uleb128 0x19
 7021 0177 05       		.uleb128 0x5
 7022 0178 00       		.byte	0
 7023 0179 03       		.uleb128 0x3
 7024 017a 08       		.uleb128 0x8
 7025 017b 3A       		.uleb128 0x3a
 7026 017c 0B       		.uleb128 0xb
 7027 017d 3B       		.uleb128 0x3b
 7028 017e 05       		.uleb128 0x5
 7029 017f 49       		.uleb128 0x49
 7030 0180 13       		.uleb128 0x13
 7031 0181 02       		.uleb128 0x2
 7032 0182 18       		.uleb128 0x18
 7033 0183 00       		.byte	0
 7034 0184 00       		.byte	0
 7035 0185 1A       		.uleb128 0x1a
 7036 0186 34       		.uleb128 0x34
 7037 0187 00       		.byte	0
 7038 0188 03       		.uleb128 0x3
 7039 0189 0E       		.uleb128 0xe
 7040 018a 3A       		.uleb128 0x3a
 7041 018b 0B       		.uleb128 0xb
 7042 018c 3B       		.uleb128 0x3b
 7043 018d 05       		.uleb128 0x5
 7044 018e 49       		.uleb128 0x49
 7045 018f 13       		.uleb128 0x13
 7046 0190 02       		.uleb128 0x2
 7047 0191 18       		.uleb128 0x18
 7048 0192 00       		.byte	0
 7049 0193 00       		.byte	0
 7050 0194 1B       		.uleb128 0x1b
 7051 0195 0B       		.uleb128 0xb
 7052 0196 01       		.byte	0x1
 7053 0197 11       		.uleb128 0x11
 7054 0198 01       		.uleb128 0x1
 7055 0199 12       		.uleb128 0x12
 7056 019a 06       		.uleb128 0x6
 7057 019b 01       		.uleb128 0x1
 7058 019c 13       		.uleb128 0x13
 7059 019d 00       		.byte	0
 7060 019e 00       		.byte	0
 7061 019f 1C       		.uleb128 0x1c
 7062 01a0 2E       		.uleb128 0x2e
 7063 01a1 01       		.byte	0x1
 7064 01a2 3F       		.uleb128 0x3f
 7065 01a3 19       		.uleb128 0x19
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 143


 7066 01a4 03       		.uleb128 0x3
 7067 01a5 0E       		.uleb128 0xe
 7068 01a6 3A       		.uleb128 0x3a
 7069 01a7 0B       		.uleb128 0xb
 7070 01a8 3B       		.uleb128 0x3b
 7071 01a9 05       		.uleb128 0x5
 7072 01aa 11       		.uleb128 0x11
 7073 01ab 01       		.uleb128 0x1
 7074 01ac 12       		.uleb128 0x12
 7075 01ad 06       		.uleb128 0x6
 7076 01ae 40       		.uleb128 0x40
 7077 01af 18       		.uleb128 0x18
 7078 01b0 9742     		.uleb128 0x2117
 7079 01b2 19       		.uleb128 0x19
 7080 01b3 01       		.uleb128 0x1
 7081 01b4 13       		.uleb128 0x13
 7082 01b5 00       		.byte	0
 7083 01b6 00       		.byte	0
 7084 01b7 1D       		.uleb128 0x1d
 7085 01b8 2E       		.uleb128 0x2e
 7086 01b9 01       		.byte	0x1
 7087 01ba 3F       		.uleb128 0x3f
 7088 01bb 19       		.uleb128 0x19
 7089 01bc 03       		.uleb128 0x3
 7090 01bd 0E       		.uleb128 0xe
 7091 01be 3A       		.uleb128 0x3a
 7092 01bf 0B       		.uleb128 0xb
 7093 01c0 3B       		.uleb128 0x3b
 7094 01c1 05       		.uleb128 0x5
 7095 01c2 27       		.uleb128 0x27
 7096 01c3 19       		.uleb128 0x19
 7097 01c4 11       		.uleb128 0x11
 7098 01c5 01       		.uleb128 0x1
 7099 01c6 12       		.uleb128 0x12
 7100 01c7 06       		.uleb128 0x6
 7101 01c8 40       		.uleb128 0x40
 7102 01c9 18       		.uleb128 0x18
 7103 01ca 9742     		.uleb128 0x2117
 7104 01cc 19       		.uleb128 0x19
 7105 01cd 01       		.uleb128 0x1
 7106 01ce 13       		.uleb128 0x13
 7107 01cf 00       		.byte	0
 7108 01d0 00       		.byte	0
 7109 01d1 1E       		.uleb128 0x1e
 7110 01d2 2E       		.uleb128 0x2e
 7111 01d3 01       		.byte	0x1
 7112 01d4 3F       		.uleb128 0x3f
 7113 01d5 19       		.uleb128 0x19
 7114 01d6 03       		.uleb128 0x3
 7115 01d7 0E       		.uleb128 0xe
 7116 01d8 3A       		.uleb128 0x3a
 7117 01d9 0B       		.uleb128 0xb
 7118 01da 3B       		.uleb128 0x3b
 7119 01db 05       		.uleb128 0x5
 7120 01dc 27       		.uleb128 0x27
 7121 01dd 19       		.uleb128 0x19
 7122 01de 49       		.uleb128 0x49
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 144


 7123 01df 13       		.uleb128 0x13
 7124 01e0 11       		.uleb128 0x11
 7125 01e1 01       		.uleb128 0x1
 7126 01e2 12       		.uleb128 0x12
 7127 01e3 06       		.uleb128 0x6
 7128 01e4 40       		.uleb128 0x40
 7129 01e5 18       		.uleb128 0x18
 7130 01e6 9742     		.uleb128 0x2117
 7131 01e8 19       		.uleb128 0x19
 7132 01e9 01       		.uleb128 0x1
 7133 01ea 13       		.uleb128 0x13
 7134 01eb 00       		.byte	0
 7135 01ec 00       		.byte	0
 7136 01ed 1F       		.uleb128 0x1f
 7137 01ee 2E       		.uleb128 0x2e
 7138 01ef 00       		.byte	0
 7139 01f0 3F       		.uleb128 0x3f
 7140 01f1 19       		.uleb128 0x19
 7141 01f2 03       		.uleb128 0x3
 7142 01f3 0E       		.uleb128 0xe
 7143 01f4 3A       		.uleb128 0x3a
 7144 01f5 0B       		.uleb128 0xb
 7145 01f6 3B       		.uleb128 0x3b
 7146 01f7 05       		.uleb128 0x5
 7147 01f8 11       		.uleb128 0x11
 7148 01f9 01       		.uleb128 0x1
 7149 01fa 12       		.uleb128 0x12
 7150 01fb 06       		.uleb128 0x6
 7151 01fc 40       		.uleb128 0x40
 7152 01fd 18       		.uleb128 0x18
 7153 01fe 9642     		.uleb128 0x2116
 7154 0200 19       		.uleb128 0x19
 7155 0201 00       		.byte	0
 7156 0202 00       		.byte	0
 7157 0203 20       		.uleb128 0x20
 7158 0204 34       		.uleb128 0x34
 7159 0205 00       		.byte	0
 7160 0206 03       		.uleb128 0x3
 7161 0207 0E       		.uleb128 0xe
 7162 0208 3A       		.uleb128 0x3a
 7163 0209 0B       		.uleb128 0xb
 7164 020a 3B       		.uleb128 0x3b
 7165 020b 05       		.uleb128 0x5
 7166 020c 49       		.uleb128 0x49
 7167 020d 13       		.uleb128 0x13
 7168 020e 3F       		.uleb128 0x3f
 7169 020f 19       		.uleb128 0x19
 7170 0210 3C       		.uleb128 0x3c
 7171 0211 19       		.uleb128 0x19
 7172 0212 00       		.byte	0
 7173 0213 00       		.byte	0
 7174 0214 21       		.uleb128 0x21
 7175 0215 35       		.uleb128 0x35
 7176 0216 00       		.byte	0
 7177 0217 49       		.uleb128 0x49
 7178 0218 13       		.uleb128 0x13
 7179 0219 00       		.byte	0
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 145


 7180 021a 00       		.byte	0
 7181 021b 22       		.uleb128 0x22
 7182 021c 34       		.uleb128 0x34
 7183 021d 00       		.byte	0
 7184 021e 03       		.uleb128 0x3
 7185 021f 0E       		.uleb128 0xe
 7186 0220 3A       		.uleb128 0x3a
 7187 0221 0B       		.uleb128 0xb
 7188 0222 3B       		.uleb128 0x3b
 7189 0223 0B       		.uleb128 0xb
 7190 0224 49       		.uleb128 0x49
 7191 0225 13       		.uleb128 0x13
 7192 0226 3F       		.uleb128 0x3f
 7193 0227 19       		.uleb128 0x19
 7194 0228 02       		.uleb128 0x2
 7195 0229 18       		.uleb128 0x18
 7196 022a 00       		.byte	0
 7197 022b 00       		.byte	0
 7198 022c 23       		.uleb128 0x23
 7199 022d 34       		.uleb128 0x34
 7200 022e 00       		.byte	0
 7201 022f 03       		.uleb128 0x3
 7202 0230 08       		.uleb128 0x8
 7203 0231 3A       		.uleb128 0x3a
 7204 0232 0B       		.uleb128 0xb
 7205 0233 3B       		.uleb128 0x3b
 7206 0234 0B       		.uleb128 0xb
 7207 0235 49       		.uleb128 0x49
 7208 0236 13       		.uleb128 0x13
 7209 0237 3F       		.uleb128 0x3f
 7210 0238 19       		.uleb128 0x19
 7211 0239 02       		.uleb128 0x2
 7212 023a 18       		.uleb128 0x18
 7213 023b 00       		.byte	0
 7214 023c 00       		.byte	0
 7215 023d 00       		.byte	0
 7216              		.section	.debug_aranges,"",%progbits
 7217 0000 D4000000 		.4byte	0xd4
 7218 0004 0200     		.2byte	0x2
 7219 0006 00000000 		.4byte	.Ldebug_info0
 7220 000a 04       		.byte	0x4
 7221 000b 00       		.byte	0
 7222 000c 0000     		.2byte	0
 7223 000e 0000     		.2byte	0
 7224 0010 00000000 		.4byte	.LFB63
 7225 0014 58000000 		.4byte	.LFE63-.LFB63
 7226 0018 00000000 		.4byte	.LFB64
 7227 001c 18000000 		.4byte	.LFE64-.LFB64
 7228 0020 00000000 		.4byte	.LFB65
 7229 0024 54020000 		.4byte	.LFE65-.LFB65
 7230 0028 00000000 		.4byte	.LFB66
 7231 002c E4000000 		.4byte	.LFE66-.LFB66
 7232 0030 00000000 		.4byte	.LFB67
 7233 0034 84000000 		.4byte	.LFE67-.LFB67
 7234 0038 00000000 		.4byte	.LFB68
 7235 003c 1C010000 		.4byte	.LFE68-.LFB68
 7236 0040 00000000 		.4byte	.LFB69
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 146


 7237 0044 30000000 		.4byte	.LFE69-.LFB69
 7238 0048 00000000 		.4byte	.LFB70
 7239 004c E8060000 		.4byte	.LFE70-.LFB70
 7240 0050 00000000 		.4byte	.LFB71
 7241 0054 1C050000 		.4byte	.LFE71-.LFB71
 7242 0058 00000000 		.4byte	.LFB72
 7243 005c 64000000 		.4byte	.LFE72-.LFB72
 7244 0060 00000000 		.4byte	.LFB73
 7245 0064 42000000 		.4byte	.LFE73-.LFB73
 7246 0068 00000000 		.4byte	.LFB74
 7247 006c 60000000 		.4byte	.LFE74-.LFB74
 7248 0070 00000000 		.4byte	.LFB75
 7249 0074 9C000000 		.4byte	.LFE75-.LFB75
 7250 0078 00000000 		.4byte	.LFB76
 7251 007c 80000000 		.4byte	.LFE76-.LFB76
 7252 0080 00000000 		.4byte	.LFB77
 7253 0084 30020000 		.4byte	.LFE77-.LFB77
 7254 0088 00000000 		.4byte	.LFB78
 7255 008c 5C010000 		.4byte	.LFE78-.LFB78
 7256 0090 00000000 		.4byte	.LFB79
 7257 0094 20020000 		.4byte	.LFE79-.LFB79
 7258 0098 00000000 		.4byte	.LFB80
 7259 009c 58000000 		.4byte	.LFE80-.LFB80
 7260 00a0 00000000 		.4byte	.LFB81
 7261 00a4 5C000000 		.4byte	.LFE81-.LFB81
 7262 00a8 00000000 		.4byte	.LFB82
 7263 00ac 5C000000 		.4byte	.LFE82-.LFB82
 7264 00b0 00000000 		.4byte	.LFB83
 7265 00b4 28020000 		.4byte	.LFE83-.LFB83
 7266 00b8 00000000 		.4byte	.LFB84
 7267 00bc 90000000 		.4byte	.LFE84-.LFB84
 7268 00c0 00000000 		.4byte	.LFB85
 7269 00c4 3C000000 		.4byte	.LFE85-.LFB85
 7270 00c8 00000000 		.4byte	.LFB86
 7271 00cc 24000000 		.4byte	.LFE86-.LFB86
 7272 00d0 00000000 		.4byte	0
 7273 00d4 00000000 		.4byte	0
 7274              		.section	.debug_ranges,"",%progbits
 7275              	.Ldebug_ranges0:
 7276 0000 00000000 		.4byte	.LFB63
 7277 0004 58000000 		.4byte	.LFE63
 7278 0008 00000000 		.4byte	.LFB64
 7279 000c 18000000 		.4byte	.LFE64
 7280 0010 00000000 		.4byte	.LFB65
 7281 0014 54020000 		.4byte	.LFE65
 7282 0018 00000000 		.4byte	.LFB66
 7283 001c E4000000 		.4byte	.LFE66
 7284 0020 00000000 		.4byte	.LFB67
 7285 0024 84000000 		.4byte	.LFE67
 7286 0028 00000000 		.4byte	.LFB68
 7287 002c 1C010000 		.4byte	.LFE68
 7288 0030 00000000 		.4byte	.LFB69
 7289 0034 30000000 		.4byte	.LFE69
 7290 0038 00000000 		.4byte	.LFB70
 7291 003c E8060000 		.4byte	.LFE70
 7292 0040 00000000 		.4byte	.LFB71
 7293 0044 1C050000 		.4byte	.LFE71
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 147


 7294 0048 00000000 		.4byte	.LFB72
 7295 004c 64000000 		.4byte	.LFE72
 7296 0050 00000000 		.4byte	.LFB73
 7297 0054 42000000 		.4byte	.LFE73
 7298 0058 00000000 		.4byte	.LFB74
 7299 005c 60000000 		.4byte	.LFE74
 7300 0060 00000000 		.4byte	.LFB75
 7301 0064 9C000000 		.4byte	.LFE75
 7302 0068 00000000 		.4byte	.LFB76
 7303 006c 80000000 		.4byte	.LFE76
 7304 0070 00000000 		.4byte	.LFB77
 7305 0074 30020000 		.4byte	.LFE77
 7306 0078 00000000 		.4byte	.LFB78
 7307 007c 5C010000 		.4byte	.LFE78
 7308 0080 00000000 		.4byte	.LFB79
 7309 0084 20020000 		.4byte	.LFE79
 7310 0088 00000000 		.4byte	.LFB80
 7311 008c 58000000 		.4byte	.LFE80
 7312 0090 00000000 		.4byte	.LFB81
 7313 0094 5C000000 		.4byte	.LFE81
 7314 0098 00000000 		.4byte	.LFB82
 7315 009c 5C000000 		.4byte	.LFE82
 7316 00a0 00000000 		.4byte	.LFB83
 7317 00a4 28020000 		.4byte	.LFE83
 7318 00a8 00000000 		.4byte	.LFB84
 7319 00ac 90000000 		.4byte	.LFE84
 7320 00b0 00000000 		.4byte	.LFB85
 7321 00b4 3C000000 		.4byte	.LFE85
 7322 00b8 00000000 		.4byte	.LFB86
 7323 00bc 24000000 		.4byte	.LFE86
 7324 00c0 00000000 		.4byte	0
 7325 00c4 00000000 		.4byte	0
 7326              		.section	.debug_line,"",%progbits
 7327              	.Ldebug_line0:
 7328 0000 1E070000 		.section	.debug_str,"MS",%progbits,1
 7328      02006001 
 7328      00000201 
 7328      FB0E0D00 
 7328      01010101 
 7329              	.LASF95:
 7330 0000 6E756D5F 		.ascii	"num_map_nodes\000"
 7330      6D61705F 
 7330      6E6F6465 
 7330      7300
 7331              	.LASF64:
 7332 000e 6D696E5F 		.ascii	"min_dist\000"
 7332      64697374 
 7332      00
 7333              	.LASF93:
 7334 0017 726F626F 		.ascii	"robot_x_pos\000"
 7334      745F785F 
 7334      706F7300 
 7335              	.LASF62:
 7336 0023 6F726967 		.ascii	"original_orientation\000"
 7336      696E616C 
 7336      5F6F7269 
 7336      656E7461 
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 148


 7336      74696F6E 
 7337              	.LASF46:
 7338 0038 636F6E73 		.ascii	"cons\000"
 7338      00
 7339              	.LASF45:
 7340 003d 6E6F6465 		.ascii	"nodes\000"
 7340      7300
 7341              	.LASF26:
 7342 0043 6F726965 		.ascii	"orientations\000"
 7342      6E746174 
 7342      696F6E73 
 7342      00
 7343              	.LASF73:
 7344 0050 7475726E 		.ascii	"turn_robot\000"
 7344      5F726F62 
 7344      6F7400
 7345              	.LASF88:
 7346 005b 73747261 		.ascii	"straight_line_distance\000"
 7346      69676874 
 7346      5F6C696E 
 7346      655F6469 
 7346      7374616E 
 7347              	.LASF8:
 7348 0072 756E7369 		.ascii	"unsigned int\000"
 7348      676E6564 
 7348      20696E74 
 7348      00
 7349              	.LASF106:
 7350 007f 666C6167 		.ascii	"flag_next_event_deadend\000"
 7350      5F6E6578 
 7350      745F6576 
 7350      656E745F 
 7350      64656164 
 7351              	.LASF14:
 7352 0097 5F5F696E 		.ascii	"__int32_t\000"
 7352      7433325F 
 7352      7400
 7353              	.LASF19:
 7354 00a1 696E7431 		.ascii	"int16\000"
 7354      3600
 7355              	.LASF24:
 7356 00a7 53544154 		.ascii	"STAT\000"
 7356      00
 7357              	.LASF116:
 7358 00ac 666C6167 		.ascii	"flag_adc_ready\000"
 7358      5F616463 
 7358      5F726561 
 7358      647900
 7359              	.LASF113:
 7360 00bb 6C696E65 		.ascii	"line_sensor_left\000"
 7360      5F73656E 
 7360      736F725F 
 7360      6C656674 
 7360      00
 7361              	.LASF32:
 7362 00cc 6D6F6465 		.ascii	"mode\000"
 7362      00
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 149


 7363              	.LASF48:
 7364 00d1 70726576 		.ascii	"prev\000"
 7364      00
 7365              	.LASF109:
 7366 00d6 666C6167 		.ascii	"flag_next_event_intersection\000"
 7366      5F6E6578 
 7366      745F6576 
 7366      656E745F 
 7366      696E7465 
 7367              	.LASF96:
 7368 00f3 6F726965 		.ascii	"orientation\000"
 7368      6E746174 
 7368      696F6E00 
 7369              	.LASF92:
 7370 00ff 726F626F 		.ascii	"robot_direction\000"
 7370      745F6469 
 7370      72656374 
 7370      696F6E00 
 7371              	.LASF53:
 7372 010f 6375725F 		.ascii	"cur_path_node\000"
 7372      70617468 
 7372      5F6E6F64 
 7372      6500
 7373              	.LASF59:
 7374 011d 74726176 		.ascii	"traversed_map\000"
 7374      65727365 
 7374      645F6D61 
 7374      7000
 7375              	.LASF110:
 7376 012b 696E745F 		.ascii	"int_sensor_left\000"
 7376      73656E73 
 7376      6F725F6C 
 7376      65667400 
 7377              	.LASF107:
 7378 013b 666C6167 		.ascii	"flag_next_event_u_turn\000"
 7378      5F6E6578 
 7378      745F6576 
 7378      656E745F 
 7378      755F7475 
 7379              	.LASF82:
 7380 0152 75736250 		.ascii	"usbPutString\000"
 7380      75745374 
 7380      72696E67 
 7380      00
 7381              	.LASF25:
 7382 015f 64697265 		.ascii	"directions\000"
 7382      6374696F 
 7382      6E7300
 7383              	.LASF21:
 7384 016a 464F5257 		.ascii	"FORWARD\000"
 7384      41524400 
 7385              	.LASF100:
 7386 0172 726F626F 		.ascii	"robot_position_index\000"
 7386      745F706F 
 7386      73697469 
 7386      6F6E5F69 
 7386      6E646578 
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 150


 7387              	.LASF67:
 7388 0187 6765745F 		.ascii	"get_node_index\000"
 7388      6E6F6465 
 7388      5F696E64 
 7388      657800
 7389              	.LASF77:
 7390 0196 6765745F 		.ascii	"get_light_sensors\000"
 7390      6C696768 
 7390      745F7365 
 7390      6E736F72 
 7390      7300
 7391              	.LASF61:
 7392 01a8 74726176 		.ascii	"traverse_orientation\000"
 7392      65727365 
 7392      5F6F7269 
 7392      656E7461 
 7392      74696F6E 
 7393              	.LASF12:
 7394 01bd 666C6F61 		.ascii	"float\000"
 7394      7400
 7395              	.LASF20:
 7396 01c3 696E7433 		.ascii	"int32\000"
 7396      3200
 7397              	.LASF57:
 7398 01c9 66696E64 		.ascii	"find_shortest_path\000"
 7398      5F73686F 
 7398      72746573 
 7398      745F7061 
 7398      746800
 7399              	.LASF7:
 7400 01dc 6C6F6E67 		.ascii	"long long unsigned int\000"
 7400      206C6F6E 
 7400      6720756E 
 7400      7369676E 
 7400      65642069 
 7401              	.LASF50:
 7402 01f3 6465735F 		.ascii	"des_index\000"
 7402      696E6465 
 7402      7800
 7403              	.LASF54:
 7404 01fd 6375725F 		.ascii	"cur_node_index\000"
 7404      6E6F6465 
 7404      5F696E64 
 7404      657800
 7405              	.LASF99:
 7406 020c 70617468 		.ascii	"path_index\000"
 7406      5F696E64 
 7406      657800
 7407              	.LASF105:
 7408 0217 666C6167 		.ascii	"flag_passing_next_int\000"
 7408      5F706173 
 7408      73696E67 
 7408      5F6E6578 
 7408      745F696E 
 7409              	.LASF43:
 7410 022d 63757272 		.ascii	"current_path_length\000"
 7410      656E745F 
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 151


 7410      70617468 
 7410      5F6C656E 
 7410      67746800 
 7411              	.LASF38:
 7412 0241 74656D70 		.ascii	"temp_path\000"
 7412      5F706174 
 7412      6800
 7413              	.LASF72:
 7414 024b 666F6C6C 		.ascii	"follow_path\000"
 7414      6F775F70 
 7414      61746800 
 7415              	.LASF49:
 7416 0257 706F735F 		.ascii	"pos_index\000"
 7416      696E6465 
 7416      7800
 7417              	.LASF34:
 7418 0261 70617468 		.ascii	"path\000"
 7418      00
 7419              	.LASF87:
 7420 0266 71756164 		.ascii	"quad_cnt_prev\000"
 7420      5F636E74 
 7420      5F707265 
 7420      7600
 7421              	.LASF78:
 7422 0274 6765745F 		.ascii	"get_wheel_quadrature\000"
 7422      77686565 
 7422      6C5F7175 
 7422      61647261 
 7422      74757265 
 7423              	.LASF55:
 7424 0289 6E6F6465 		.ascii	"node_1\000"
 7424      5F3100
 7425              	.LASF56:
 7426 0290 6E6F6465 		.ascii	"node_2\000"
 7426      5F3200
 7427              	.LASF40:
 7428 0297 6765745F 		.ascii	"get_traverse_path_length\000"
 7428      74726176 
 7428      65727365 
 7428      5F706174 
 7428      685F6C65 
 7429              	.LASF114:
 7430 02b0 6C696E65 		.ascii	"line_sensor_right\000"
 7430      5F73656E 
 7430      736F725F 
 7430      72696768 
 7430      7400
 7431              	.LASF10:
 7432 02c2 63686172 		.ascii	"char\000"
 7432      00
 7433              	.LASF111:
 7434 02c7 696E745F 		.ascii	"int_sensor_right\000"
 7434      73656E73 
 7434      6F725F72 
 7434      69676874 
 7434      00
 7435              	.LASF17:
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 152


 7436 02d8 75696E74 		.ascii	"uint16\000"
 7436      313600
 7437              	.LASF18:
 7438 02df 696E7438 		.ascii	"int8\000"
 7438      00
 7439              	.LASF102:
 7440 02e4 666C6167 		.ascii	"flag_turn_around\000"
 7440      5F747572 
 7440      6E5F6172 
 7440      6F756E64 
 7440      00
 7441              	.LASF29:
 7442 02f5 4C454654 		.ascii	"LEFT\000"
 7442      00
 7443              	.LASF27:
 7444 02fa 52494748 		.ascii	"RIGHT\000"
 7444      5400
 7445              	.LASF94:
 7446 0300 726F626F 		.ascii	"robot_y_pos\000"
 7446      745F795F 
 7446      706F7300 
 7447              	.LASF37:
 7448 030c 6765745F 		.ascii	"get_food_list_path_length\000"
 7448      666F6F64 
 7448      5F6C6973 
 7448      745F7061 
 7448      74685F6C 
 7449              	.LASF6:
 7450 0326 6C6F6E67 		.ascii	"long long int\000"
 7450      206C6F6E 
 7450      6720696E 
 7450      7400
 7451              	.LASF63:
 7452 0334 6D61705F 		.ascii	"map_traversed\000"
 7452      74726176 
 7452      65727365 
 7452      6400
 7453              	.LASF90:
 7454 0342 70776D5F 		.ascii	"pwm_cmp_left\000"
 7454      636D705F 
 7454      6C656674 
 7454      00
 7455              	.LASF66:
 7456 034f 696E6974 		.ascii	"init_path\000"
 7456      5F706174 
 7456      6800
 7457              	.LASF118:
 7458 0359 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 7458      4320342E 
 7458      392E3320 
 7458      32303135 
 7458      30333033 
 7459 038c 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m3 -mthumb -g -O"
 7459      20726576 
 7459      6973696F 
 7459      6E203232 
 7459      31323230 
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 153


 7460 03bf 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 7460      66756E63 
 7460      74696F6E 
 7460      2D736563 
 7460      74696F6E 
 7461              	.LASF42:
 7462 03e7 67656E65 		.ascii	"generate_food_list_path\000"
 7462      72617465 
 7462      5F666F6F 
 7462      645F6C69 
 7462      73745F70 
 7463              	.LASF117:
 7464 03ff 666F6F64 		.ascii	"food_list\000"
 7464      5F6C6973 
 7464      7400
 7465              	.LASF86:
 7466 0409 71756164 		.ascii	"quad_cnt_right\000"
 7466      5F636E74 
 7466      5F726967 
 7466      687400
 7467              	.LASF58:
 7468 0418 66696E64 		.ascii	"find_traverse_path\000"
 7468      5F747261 
 7468      76657273 
 7468      655F7061 
 7468      746800
 7469              	.LASF39:
 7470 042b 64697374 		.ascii	"dist\000"
 7470      00
 7471              	.LASF47:
 7472 0430 68657572 		.ascii	"heurst\000"
 7472      737400
 7473              	.LASF22:
 7474 0437 5455524E 		.ascii	"TURNING_LEFT\000"
 7474      494E475F 
 7474      4C454654 
 7474      00
 7475              	.LASF44:
 7476 0444 67656E65 		.ascii	"generate_traverse_path\000"
 7476      72617465 
 7476      5F747261 
 7476      76657273 
 7476      655F7061 
 7477              	.LASF70:
 7478 045b 61727261 		.ascii	"array\000"
 7478      7900
 7479              	.LASF30:
 7480 0461 68616E64 		.ascii	"handle_timer_tc\000"
 7480      6C655F74 
 7480      696D6572 
 7480      5F746300 
 7481              	.LASF13:
 7482 0471 6C6F6E67 		.ascii	"long double\000"
 7482      20646F75 
 7482      626C6500 
 7483              	.LASF120:
 7484 047d 433A5C55 		.ascii	"C:\\Users\\louis\\Desktop\\psoc_code_base\\CS301_Cl"
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 154


 7484      73657273 
 7484      5C6C6F75 
 7484      69735C44 
 7484      65736B74 
 7485 04ab 6173732E 		.ascii	"ass.cydsn\000"
 7485      63796473 
 7485      6E00
 7486              	.LASF71:
 7487 04b5 69735F6E 		.ascii	"is_next_to\000"
 7487      6578745F 
 7487      746F00
 7488              	.LASF33:
 7489 04c0 70617468 		.ascii	"path_length\000"
 7489      5F6C656E 
 7489      67746800 
 7490              	.LASF101:
 7491 04cc 6E657874 		.ascii	"next_event_index\000"
 7491      5F657665 
 7491      6E745F69 
 7491      6E646578 
 7491      00
 7492              	.LASF115:
 7493 04dd 74635F63 		.ascii	"tc_cnt\000"
 7493      6E7400
 7494              	.LASF91:
 7495 04e4 70776D5F 		.ascii	"pwm_cmp_right\000"
 7495      636D705F 
 7495      72696768 
 7495      7400
 7496              	.LASF65:
 7497 04f2 6D696E5F 		.ascii	"min_des\000"
 7497      64657300 
 7498              	.LASF2:
 7499 04fa 73686F72 		.ascii	"short int\000"
 7499      7420696E 
 7499      7400
 7500              	.LASF4:
 7501 0504 6C6F6E67 		.ascii	"long int\000"
 7501      20696E74 
 7501      00
 7502              	.LASF84:
 7503 050d 49544D5F 		.ascii	"ITM_RxBuffer\000"
 7503      52784275 
 7503      66666572 
 7503      00
 7504              	.LASF68:
 7505 051a 6E6F6465 		.ascii	"node\000"
 7505      00
 7506              	.LASF121:
 7507 051f 6765745F 		.ascii	"get_num_map_nodes\000"
 7507      6E756D5F 
 7507      6D61705F 
 7507      6E6F6465 
 7507      7300
 7508              	.LASF60:
 7509 0531 63757272 		.ascii	"current_orientation\000"
 7509      656E745F 
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 155


 7509      6F726965 
 7509      6E746174 
 7509      696F6E00 
 7510              	.LASF81:
 7511 0545 75706461 		.ascii	"update_robot_position\000"
 7511      74655F72 
 7511      6F626F74 
 7511      5F706F73 
 7511      6974696F 
 7512              	.LASF89:
 7513 055b 64697374 		.ascii	"distance_prev\000"
 7513      616E6365 
 7513      5F707265 
 7513      7600
 7514              	.LASF9:
 7515 0569 73697A65 		.ascii	"sizetype\000"
 7515      74797065 
 7515      00
 7516              	.LASF5:
 7517 0572 6C6F6E67 		.ascii	"long unsigned int\000"
 7517      20756E73 
 7517      69676E65 
 7517      6420696E 
 7517      7400
 7518              	.LASF103:
 7519 0584 666C6167 		.ascii	"flag_veering\000"
 7519      5F766565 
 7519      72696E67 
 7519      00
 7520              	.LASF108:
 7521 0591 666C6167 		.ascii	"flag_centre_on_line_after_turn\000"
 7521      5F63656E 
 7521      7472655F 
 7521      6F6E5F6C 
 7521      696E655F 
 7522              	.LASF35:
 7523 05b0 6164635F 		.ascii	"adc_bat_value\000"
 7523      6261745F 
 7523      76616C75 
 7523      6500
 7524              	.LASF15:
 7525 05be 696E7433 		.ascii	"int32_t\000"
 7525      325F7400 
 7526              	.LASF31:
 7527 05c6 68616E64 		.ascii	"handle_adc_reading\000"
 7527      6C655F61 
 7527      64635F72 
 7527      65616469 
 7527      6E6700
 7528              	.LASF69:
 7529 05d9 6765745F 		.ascii	"get_array_min_index\000"
 7529      61727261 
 7529      795F6D69 
 7529      6E5F696E 
 7529      64657800 
 7530              	.LASF80:
 7531 05ed 6765745F 		.ascii	"get_next_event_index\000"
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 156


 7531      6E657874 
 7531      5F657665 
 7531      6E745F69 
 7531      6E646578 
 7532              	.LASF1:
 7533 0602 756E7369 		.ascii	"unsigned char\000"
 7533      676E6564 
 7533      20636861 
 7533      7200
 7534              	.LASF79:
 7535 0610 6765745F 		.ascii	"get_distance\000"
 7535      64697374 
 7535      616E6365 
 7535      00
 7536              	.LASF41:
 7537 061d 70617468 		.ascii	"path_length_temp\000"
 7537      5F6C656E 
 7537      6774685F 
 7537      74656D70 
 7537      00
 7538              	.LASF76:
 7539 062e 666F6C6C 		.ascii	"follow_line\000"
 7539      6F775F6C 
 7539      696E6500 
 7540              	.LASF74:
 7541 063a 6E65775F 		.ascii	"new_orient\000"
 7541      6F726965 
 7541      6E7400
 7542              	.LASF52:
 7543 0645 72657665 		.ascii	"reverse_path\000"
 7543      7273655F 
 7543      70617468 
 7543      00
 7544              	.LASF83:
 7545 0652 75736250 		.ascii	"usbPutChar\000"
 7545      75744368 
 7545      617200
 7546              	.LASF0:
 7547 065d 7369676E 		.ascii	"signed char\000"
 7547      65642063 
 7547      68617200 
 7548              	.LASF75:
 7549 0669 7475726E 		.ascii	"turn_quad\000"
 7549      5F717561 
 7549      6400
 7550              	.LASF3:
 7551 0673 73686F72 		.ascii	"short unsigned int\000"
 7551      7420756E 
 7551      7369676E 
 7551      65642069 
 7551      6E7400
 7552              	.LASF28:
 7553 0686 444F574E 		.ascii	"DOWN\000"
 7553      00
 7554              	.LASF97:
 7555 068b 726F626F 		.ascii	"robot_orientation\000"
 7555      745F6F72 
ARM GAS  C:\Users\louis\AppData\Local\Temp\cceZOiJn.s 			page 157


 7555      69656E74 
 7555      6174696F 
 7555      6E00
 7556              	.LASF36:
 7557 069d 6D61696E 		.ascii	"main\000"
 7557      00
 7558              	.LASF23:
 7559 06a2 5455524E 		.ascii	"TURNING_RIGHT\000"
 7559      494E475F 
 7559      52494748 
 7559      5400
 7560              	.LASF16:
 7561 06b0 75696E74 		.ascii	"uint8\000"
 7561      3800
 7562              	.LASF11:
 7563 06b6 646F7562 		.ascii	"double\000"
 7563      6C6500
 7564              	.LASF51:
 7565 06bd 73616665 		.ascii	"safety\000"
 7565      747900
 7566              	.LASF85:
 7567 06c4 71756164 		.ascii	"quad_cnt_left\000"
 7567      5F636E74 
 7567      5F6C6566 
 7567      7400
 7568              	.LASF104:
 7569 06d2 666C6167 		.ascii	"flag_new_path_index\000"
 7569      5F6E6577 
 7569      5F706174 
 7569      685F696E 
 7569      64657800 
 7570              	.LASF119:
 7571 06e6 2E5C6D61 		.ascii	".\\main.c\000"
 7571      696E2E63 
 7571      00
 7572              	.LASF112:
 7573 06ef 6C696E65 		.ascii	"line_sensor_centre\000"
 7573      5F73656E 
 7573      736F725F 
 7573      63656E74 
 7573      726500
 7574              	.LASF98:
 7575 0702 70617468 		.ascii	"path_orientation\000"
 7575      5F6F7269 
 7575      656E7461 
 7575      74696F6E 
 7575      00
 7576              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
